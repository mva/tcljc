(ns tcljc.compiler.branch
  (:require [tcljc.classfile :as cf]
            [tcljc.javabase :as jb]
            [tcljc.runtime :as rt]
            [tcljc.wrong :as emap]
            [tcljc.expr :as x]
            [tcljc.exprfold :as xf]
            [tcljc.compiler.conv :as conv])
  (:import (tcljc.expr Expr Branch)
           (jdk.classfile Opcode)))

;;; Cast any computational int expression (including char and boolean)
;;; to an integer value.
(defn cast-to-int ^Expr [^Expr x]       ;pre: `x` is computational int
  (x/identity jb/int x))

(defn conv-to-boolean ^Expr [^Expr x]
  (cond
    (x/boolean? x)                   ;primitive boolean
    x

    (x/primitive? x)             ;only void and no-return are false
    (xf/prog2-expr x (x/expr-boolean (x/pushes-result? x))) 

    (and (not (x/const-value? x)) (.isAssignableFrom (x/type x) Boolean))
    (x/invoke-xref jb/boolean [x] rt/mhd-truthy-reference)

    :else       ;any reference that is a non-Boolean subtype of Object
    (xf/acmp x x/expr-nil-object cf/ne)))

(defn if-expr ^Expr [^Expr test ^Expr if-true ^Expr if-false]
  (let [test (conv-to-boolean test)
        to-tp (x/type (conv/path-join if-true if-false))
        pathv (conv/consume-paths to-tp (list if-true if-false))]
    (-> (if (x/branch? test)
          ;; If `test` is a branch instruction, then the new if just
          ;; adds the branches that complete it.
          ^Branch test
          (xf/icmp test x/expr-false cf/ne))
        (x/split&join to-tp (nth pathv 0) (nth pathv 1)))))

;;; ------------------------------------------------------------------------

;;; FIXME... see NaN comment before compiler/binary-cmp
(defn xcmp ^Expr [^int cmp-opcd ^Expr arg0 ^Expr arg1]
  (let [arg0 (conv/ensure-numeric arg0)
        arg1 (conv/ensure-numeric arg1)
        to-cl (conv/upper-numeric-tp arg0 arg1)]
    (if (jb/same-class? Integer/TYPE to-cl)
      (xf/icmp arg0 arg1 cmp-opcd)
      (let [cmp (xf/xcmp-signum (conv/widen-from to-cl arg0)
                                (conv/widen-from to-cl arg1)
                                (condp jb/same-class? to-cl
                                  Double/TYPE Opcode/DCMPG
                                  Float/TYPE Opcode/FCMPG
                                  #_else Opcode/LCMP))]
        (xf/icmp cmp x/expr-zero-int cmp-opcd)))))
