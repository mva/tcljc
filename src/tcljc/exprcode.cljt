(ns tcljc.exprcode
  (:require
   [tcljc.classfile :as cf]
   [tcljc.javabase :as jb]
   [tcljc.expr :as x])
  (:import
   (tcljc.expr Expr Insn Const Progn Block Branch SplitJoin Switch
               LoopBody Recur TryCatchFinally Setter IAdaptResult IAdapting)
   (clojure.lang Symbol IPersistentVector))
  (:refer-clojure :exclude [type]))

(defn trace-flow ^Expr [^Expr x ^IAdaptResult adpt-res]
  (letfn [(trace-sequential ^Expr [^Expr x ^IAdaptResult adpt-res]
            ;; pre: (pos? (x/arg-count x))
            (let [argv (x/argv x)
                  a (new "[Ltcljc.expr.Expr;" (count argv))
                  n-1 (dec (alength a))
                  adpt-last (x/comp-adapt adpt-res (if (x/progn? x)
                                                     (.adpt-paths ^Progn x)
                                                     (.adpt-paths ^Block x)))]
              (loop [i 0]
                (let [arg (nth argv i)]
                  (if (< i n-1)
                    (let [arg' (aset a i (trace-flow arg x/adpt-identity))]
                      (if (x/returns? arg')
                        (recur (inc i))
                        (x/with-code x x/no-return (subvec (vec a) 0 (inc i)))))
                    (let [arg' (aset a i (trace-flow arg adpt-last))
                          tp (if (x/returns? arg') (x/type x) x/no-return)]
                      (x/with-code x tp (vec a))))))))
          (trace-instruction ^Expr [^Expr x ^IAdaptResult adpt-res]
            (let [argv (x/argv x)
                  a (new "[Ltcljc.expr.Expr;" (count argv))
                  n (alength a)]
              (loop [i 0]
                (if (< i n)
                  (let [arg' (aset a i (trace-flow (nth argv i) x/adpt-identity))]
                    (if (x/returns? arg')
                      (recur (inc i))
                      (Progn. (x/form x) x/no-return (subvec (vec a) 0 (inc i))
                              nil nil)))
                  (cond
                    (or (x/recur? x) (x/throw? x))
                    (x/with-code x x/no-return (vec a))
                    (zero? (x/arg-count x))
                    (.apply-to-instr adpt-res x)
                    :else
                    (.apply-to-instr adpt-res (x/with-code x (vec a))))))))
          (trace-paths ^"[Ltcljc.expr.Expr;" [^Expr x ^int dstart ^int dend
                                              ^IAdaptResult adpt-res]
            (let [argv (x/argv x)
                  a (new "[Ltcljc.expr.Expr;" (count argv))
                  end (+ (alength a) dend)]
              (loop [i dstart]
                (when (< i end)
                  (aset a i (trace-flow (nth argv i) adpt-res))
                  (recur (inc i))))
              a))
          (boolean-identities* ^Branch [^Branch b ^Expr left ^Expr right]
            ;; Folds boolean not, so that `not-primitive` can retain
            ;; the source code's operation.  Covers both identity and
            ;; not of boolean constant, independent of argument order.
            (cond
              (x/const-value? right)
              (if (x/branch? left)
                (-> (if (= (= cf/eq (.opcd b)) (x/const-value-false? right))
                      ;; either (== left false) or (not= left true)
                      (x/with-negate-cmp ^Branch left)
                      ;; either (not= left false) or (== left true)
                      ^Branch left)
                    (boolean-identities))
                b)

              (x/const-value? left)
              (recur b right left) ;no need to change `opcd`: it's eq or ne

              :else b))
          (boolean-identities ^Branch [^Branch b]
            (boolean-identities* b (x/nth-arg b 0) (x/nth-arg b 1)))
          (returning-type ^Class [^Expr x xs]
            ;; `no-return` if none of the expressions returns, and
            ;; `(type x)` otherwise
            (loop [xs (seq xs)]
              (cond (nil? xs) x/no-return
                    (x/returns? (first xs)) (x/type x)
                    :else (recur (next xs)))))
          (trace-split-join ^Expr [^SplitJoin x]
            (let [branch (-> ^Branch (x/nth-arg x 0)
                             (boolean-identities)
                             (trace-instruction x/adpt-identity))]
              (if (x/returns? branch)
                (let [adpt-paths (x/comp-adapt adpt-res (.adpt-paths x))
                      a (doto (trace-paths x 1 0 adpt-paths)
                          (aset 0 branch))]
                  (if (x/const-value? branch)
                    (aget a (if (x/const-value-true? branch) 1 2))
                    (x/with-code x (returning-type x (rest a)) (vec a))))
                branch)))
          (trace-switch ^Expr [^Switch x]
            (let [test (trace-instruction (x/nth-arg x 0) x/adpt-identity)]
              (if (x/returns? test)
                (let [adpt-paths (x/comp-adapt adpt-res (.adpt-paths x))
                      a (doto (trace-paths x 1 0 adpt-paths)
                          (aset 0 test))]
                  (x/with-code x (returning-type x (rest a)) (vec a)))
                test)))
          (trace-try-catch-finally ^Expr [^TryCatchFinally x]
            (let [n (x/arg-count x)
                  finally (trace-flow (peek (x/argv x)) x/adpt-identity)]
              (if (x/expr-empty? finally)
                (let [adpt-paths (x/comp-adapt adpt-res (.adpt-paths x))
                      a (doto (trace-paths x 0 -1 adpt-paths)
                          (aset (dec n) finally))]
                  (x/with-code x (returning-type x (butlast a)) (vec a)))
                (let [a (doto (trace-paths x 0 -1 (.adpt-paths x))
                          (aset (dec n) finally))]
                  (if (x/returns? finally)
                    (->> (x/with-code x (returning-type x (butlast a)) (vec a))
                         (.apply-to-instr adpt-res))
                    (x/with-code x x/no-return (vec a)))))))
          (trace-loop-body ^Expr [^LoopBody x]
            (let [adpt-paths (x/comp-adapt adpt-res (.adpt-paths x))
                  body (trace-flow (x/nth-arg x 0) adpt-paths)]
              (x/with-code x (x/type body) [body])))
          (trace-branching ^Expr [^Expr x]
            (condp instance? x
              SplitJoin (trace-split-join ^SplitJoin x)
              Switch (trace-switch ^Switch x)
              TryCatchFinally (trace-try-catch-finally ^TryCatchFinally x)
              LoopBody (trace-loop-body ^LoopBody x)
              #_else (throw (IllegalArgumentException.))))]
    (if (x/strict-evaluation? x)
      (cond
        (and (instance? IAdapting x) (pos? (x/arg-count x)))
        (trace-sequential x adpt-res)
        
        (x/branch? x)
        (trace-branching (x/split&join ^Branch x))

        :else (trace-instruction x adpt-res))
      (trace-branching x))))

(def ^:private adpt-return-from-method
  (reify IAdaptResult
    (apply-to-instr [_ x]
      (x/insn* x/no-return [x]
               (-> (cf/type-kind (x/type x))
                   (jdk.classfile.instruction.ReturnInstruction/of))))
    (toString [_]
      "return")))

(defn as-returning-code ^Expr [^Expr x]
  #_(prn :as-returning-code-in (x/prefix-tree x))
  (let [res (trace-flow x adpt-return-from-method)]
    #_(prn :as-returning-code-out (x/prefix-tree res))
    res))
