;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.compiler.conv
  (:require
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.wrong :as wrong]
   [tcljc.expr :as x]
   [tcljc.exprfold :as xf]
   [tcljc.type :as tp])
  (:import
   (tcljc.expr Expr BindingRef IAdaptResult)))

(def ^:private show-class-loader false)

(letfn [(class-loader-suffix [tp]
          (when show-class-loader
            (if (class? tp)
              (if-some [ld (.getClassLoader ^Class tp)]
                (or (.getName ld) "not-named")
                nil #_"bootstrap")
              "class-desc")))]
  (defn type-str ^String [clx]
    (str (.displayName (rt/cd-of clx)) (class-loader-suffix clx))))

;;; ------------------------------------------------------------------------

(defn- jvm-adapt-to ^Expr [^Class to-tp ^Expr from] ;returns nil on failure
  (let [from-tp (x/type from)]
    (cond
      (or (x/type? to-tp from)    ;cheapest: type of `from` is `to-tp`
          (jb/polymorphic? to-tp))
      from

      (or (jb/jvm-assignable-to? from-tp to-tp)
          (tp/unboxing-assignable-to? from-tp to-tp)
          (and (x/pushes-nil-object? from) (jb/reference? to-tp)))
      (tp/coerce from to-tp)            ;widen

      (jb/statement? to-tp)
      (tp/coerce-to-statm from)

      (tp/numeric-assignable-to? from-tp to-tp)
      (.adapt (.primitive-to (tp/of-primitive to-tp)) from)
      
      :else nil)))

(letfn [(adapt-for-assign ^Expr [^Expr from ^Class to-tp]
          (let [from-cl (x/type from)
                to-cl to-tp]
            (or (jvm-adapt-to to-tp from)

                (when (x/statement? from)
                  (tp/prog2-expr from (tp/default-value-of to-tp)))
        
                (when (jb/reference? to-tp)
                  (cond (jb/jvm-assignable-to? to-cl from-cl)
                        (tp/coerce from to-tp) ;narrow

                        (jb/same-class? Void/TYPE from-cl)
                        (tp/prog2-expr from (x/const to-tp nil))
                
                        :else nil)))))
        (wrong-assign ^void [^Expr from ^Class to-tp ^String to-description]
          (x/wrong-type (str "cannot assign to " (wrong/q to-tp) to-description)
                        from))]
  
  ;; Transform `x` into a type that can be represented as a non-void
  ;; type descriptor.  In particular, void is turned into an expression that
  ;; pushes a nil operand of type Object.
  ;; 
  ;; pre: `x` is a runtime value & not polymorphic.
  (defn consume-poly ^Expr [^Expr x]
    (let [x-tp (x/type x)]
      (if (jb/statement? x-tp)
        (tp/prog2-expr x x/expr-nil-object)
        x)))

  ;; Transform `x` into a type that is assignment compatible to type
  ;; `to-tp`.  If `to-tp` is jb/polymorphic?, this function delegates
  ;; to `consume-poly`.
  ;; 
  ;; pre: `x` is a runtime value & not polymorphic.
  (defn consume ^Expr [^Expr x ^Class to-tp to-form]
    (if (jb/polymorphic? to-tp)
      (consume-poly x)
      (or (adapt-for-assign x to-tp)
          (wrong-assign x to-tp (when (some? to-form)
                                  (str " of " (wrong/q-symbol to-form)))))))
  (defn consume-for ^Expr [^Expr x ^BindingRef bref]
    ;; FIXME... `simple-nm` is nil for imported parameters because
    ;; reflection does not offer this information
    (consume x (x/type bref) (.simple-nm bref)))

  ;; Special case of `consume` which passes on an expression `x` if
  ;; `to-tp` is polymorphic.
  (defn consume-body ^Expr [^Expr x ^Class to-tp ^String to-result]
    (if (jb/polymorphic? to-tp)
      x
      (or (adapt-for-assign x to-tp)
          (wrong-assign x to-tp (str " of " to-result))))))

;;; ------------------------------------------------------------------------

;; Return `to` if `from` can be widened to `to`, and nil otherwise.
(defn- path-adaptable ^Expr [^Expr to ^Expr from]
  (when (or (not (x/pushes-result? from))
            (tp/numeric-assignable-to? (x/type from) (x/type to))
            (and (x/pushes-nil-object? from) (x/reference? to)))
    to))

(def ^:private expr-some-object (x/const jb/Object "expr-some-object"))
(defn path-join
  (^Expr [xs]
   (reduce path-join (first xs) (rest xs)))
  (^Expr [^Expr x0 ^Expr x1]
   (or (when (x/same-type? x0 x1)
         x0)
       (path-adaptable x0 x1)
       (path-adaptable x1 x0)
       (when (and (x/reference? x0) (x/reference? x1))
         expr-some-object)         ;must differ from x/expr-nil-object
       (wrong/other (str "incompatible path types " (wrong/str* (x/type x0))
                         " and " (wrong/str* (x/type x1)))))))
(defn- adapt-for-path ^Expr [^Expr from ^Class to-tp]
  (or (jvm-adapt-to to-tp from)
      (cond ;non-Java type conversions are possible for paths!
        (x/statement? from) ;case "no return" is handled by jvm-adapt-to
        (tp/prog2-expr from (tp/default-value-of to-tp))
        
        (and (jb/same-class? jb/int to-tp) (x/character? from))
        ;; rejected by language, but ok for emitted code
        (.adapt (.primitive-to tp/int) from)
        
        :else
        (throw (IllegalStateException. (str "to " to-tp " <- from "
                                            (x/type from)))))))

(deftype AdaptForPath [^Class to-tp]
  IAdaptResult
  (apply-to-instr [_ x]
    (adapt-for-path x to-tp))
  (after [this before]
    (if (and (instance? AdaptForPath before)
             (.isAssignableFrom to-tp (.to-tp ^AdaptForPath before)))
      this
      (x/adpt-comp this before)))
  (safe-instructions? [_]
    true)
  (toString [_]
    (str "afp-" (.getName to-tp))))
(def adpt-for-path ->AdaptForPath)
