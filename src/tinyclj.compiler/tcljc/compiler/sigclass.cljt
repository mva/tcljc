;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.compiler.sigclass
  (:require
   [tcljc.util :as util]
   [tcljc.config :as cfg]
   [tcljc.javabase :as jb]
   [tcljc.classfile :as cf]
   [tcljc.runtime :as rt]
   [tcljc.wrong :as wrong]
   [tcljc.expr :as x]
   [tcljc.context :as ctx]
   [tcljc.compiler.type :as tp]
   [tcljc.compiler.resolve :as resolve]
   [tcljc.compiler.sigfn :as sig]
   [tinyclj.string :as str])
  (:import
   (tcljc.classfile ClassDef FieldDef ILdStInstr)
   (tcljc.expr Arity Binding)
   (tcljc.context Ctx)
   (clojure.lang Symbol IPersistentMap IPersistentVector)
   (java.lang.classfile ClassFile ClassBuilder CodeBuilder TypeKind)
   (java.lang.classfile.attribute RecordAttribute RecordComponentInfo)
   (java.lang.constant ClassDesc MethodTypeDesc MethodHandleDesc
                       DirectMethodHandleDesc ConstantDesc ConstantDescs
                       DynamicCallSiteDesc)
   (java.lang.reflect Method)
   (java.util.function Consumer)))

(defn check-no-suffix [xs]
  (when (some? (seq xs))
    (wrong/syntax "expect end of list" (cons '... xs))))

(defn ensure-parameters [x ^boolean receiver?]
  (when-not (vector? x)
    (wrong/syntax "expect vector of parameters" x))
  (when (and receiver? (zero? (count x)))
    (wrong/syntax "expect at least receiver parameter" x)))

;;; ------------------------------------------------------------------------

(defn- hinted? ^boolean [sig]
  (when (some? (sig/get-tag (first sig)))
    (wrong/syntax "no type tag allowed for receiver parameter"))
  (not (and (nil? (sig/get-tag sig))
            (every? (comp nil? sig/get-tag) (rest sig)))))

(defn- method-as-arity ^Arity [^Method m ^Arity at]
  (let [paramv (mapv #(sig/mk-param (.level at)
                                    (-> ^Binding %2 .bref (x/sname)) ^Class %1)
                     (.getParameterTypes m) (.paramv at))]
    (assert (= (count paramv) (count (.paramv at))))
    (Arity. paramv (.getReturnType m) (count paramv)
            (.isVarArgs m) false m (.getName m)
            (.this-name at) (.level at) (.aform at)
            (.!closes-over at) (.at-idx at))))

(defn- fixup-method-sig ^Arity [^Arity at ^Class etp]
  (let [nm (.method-name at)
        n (x/at-n at)]
    (letfn [(invoke-ex-data []
              {:invoke/name nm
               :invoke/owner etp
               :invoke/paramter-count n})]
      (if-some [ms (seq (resolve/itf-methods-with-name etp nm n))]
        (if (nil? (next ms))
          (method-as-arity (first ms) at)
          (-> (str "multiple virtual " n "-parameter methods matching ")
              (wrong/unresolved-interop nm nil (invoke-ex-data))))
        (-> (str "no virtual " n "-parameter method matching ")
            (wrong/unresolved-interop nm nil (invoke-ex-data)))))))

(defn- check-method-match ^Arity [^Arity at ^Class etp]
  (let [nm (.method-name at)
        atypes (into-array Class (x/at-parameter-types at))]
    (if-some [m (resolve/itf-method-exact etp nm (.rtype at) atypes)]
      (method-as-arity m at)
      (wrong/unresolved-interop "no virtual method matching " nm nil
                                {:invoke/owner etp
                                 :invoke/name nm
                                 :invoke/arg-types atypes}))))

(defn method-arity-type ^Arity [^Class etp [nm sig & body :as form]
                                ^int level ^int at-idx ^Ctx ctx]
  ;; The returned Arity omits the first parameter.  Its name is
  ;; stored in `this-name` and it is translated into the
  ;; receiver of the virtual method.
  (wrong/ensure-sym nm)  ;silently ignore namespace part for defrecord
  (ensure-parameters sig true)
  (let [rtype (sig/tag-of sig true jb/cl-polymorphic-type ctx)
        tmpl (Arity. nil nil -1 false false nil (name nm) (nth sig 0)
                     level form (util/mk-shm) at-idx)
        at (sig/arity-sig tmpl jb/cl-polymorphic-type rtype (rest sig) ctx)]
    (-> (if (hinted? sig)
          (check-method-match at etp)
          (fixup-method-sig at etp)))))

;;; ------------------------------------------------------------------------

(defn- tag-desc-of ^ClassDesc [^String pkg-name ^IPersistentMap imports
                               form ^boolean void? ^ClassDesc no-hint]
  (letfn [(get-cld ^ClassDesc [^String x]
            (try
              (ClassDesc/of x)
              (catch IllegalArgumentException _
                (wrong/syntax "invalid class name" x))))
          (symbol-class-desc ^ClassDesc [^Symbol x]
            (or (some-> (get imports x nil) (rt/describe-class))
                (let [nm (name x)
                      nm (if (str/includes? nm ".")
                           nm
                           (str pkg-name "." nm))]
                  (get-cld nm))))
          (as-class-desc ^ClassDesc [x]
            ;; used by definterface to accept class names without
            ;; existing definition
            (if (symbol? x)
              (let [nm (name x)
                    array-rank (cfg/array-dimensions nm)]
                (if (zero? array-rank)
                  (symbol-class-desc x)
                  (-> (cfg/strip-array-suffix nm array-rank)
                      (symbol-class-desc)
                      (.arrayType array-rank))))
              (get-cld x)))]
    
    (if-some [tag (sig/get-tag form)]
      (let [tp (as-class-desc tag)]
        (when (and (not void?) (= rt/void tp))
          (wrong/syntax "`void` tag not applicable in this context"))
        tp)
      no-hint)))

(defn itf-class-def ^ClassDef [^String pkg-name ^IPersistentMap imports
                               [_ if-nm & methods :as form]]
  (letfn [(method-sig ^MethodTypeDesc [msig]
            (loop [acc []
                   [p :as params] (seq msig)]
              (cond
                (nil? params)
                (-> (tag-desc-of pkg-name imports msig true rt/object)
                    (rt/mtd-of acc))
             
                (= p '&)
                (let [p (sig/ensure-parameter (second params))
                      tp (tag-desc-of pkg-name imports p false nil)
                      tp (cond
                           (nil? tp)
                           (wrong/syntax "method cannot have rest parameter")
                           (not (.isArray tp))
                           (wrong/type-expr "type of vararg parameter must be array" tp)
                           :else tp)]
                  (if (nnext params)
                    (wrong/syntax "additional parameters after vararg parameter")
                    (recur (conj acc tp) nil))) ;VARARGS flag is set by caller

                :else
                (let [tp (tag-desc-of pkg-name imports p false rt/object)]
                  (recur (conj acc tp) (next params))))))


          (method-cbh ^Consumer [[mname msig & methodr]]
            (wrong/ensure-simple-sym mname)
            (ensure-parameters msig false)
            (check-no-suffix methodr)
            (when-some [tag (sig/get-tag mname)]
              (wrong/other (str "method result tag " (wrong/q tag) " must be "
                                "placed on the parameter vector, not the "
                                "method name")))
            (let [mnm (cfg/munge-name mname)
                  flags (cond-> (bit-or ClassFile/ACC_PUBLIC
                                        ClassFile/ACC_ABSTRACT)
                          (and (>= (count msig) 2) (= '& (peek (pop msig))))
                          (bit-or ClassFile/ACC_VARARGS))
                  mtd (method-sig msig)]
              (cf/with-cbh [cb]
                (.withMethod cb mnm mtd flags (cf/with-mbh [mb] nil)))))]
    
    (let [if-nm (wrong/ensure-simple-sym if-nm)]
      (cf/class-def (ClassDesc/of pkg-name (name if-nm))
                    (bit-or ClassFile/ACC_PUBLIC ClassFile/ACC_INTERFACE
                            ClassFile/ACC_ABSTRACT)
                    () nil [] (mapv method-cbh methods)))))

;;; ------------------------------------------------------------------------

;;; See JLS "8.10.1 Record Components": It is a compile-time error for
;;; a record declaration to declare a record component with the name
;;; `clone`, `finalize`, `getClass`, `hashCode`, `notify`,
;;; `notifyAll`, `toString`, or `wait`.
(def ^:private prohibited-record-fields
  #{"clone" "finalize" "getClass" "hashCode" "notify" "notifyAll"
    "toString" "wait"})

(defn- pass-to-super? ^boolean [^Symbol nm]
  (boolean (-> nm (meta) :pass-to-super-constructor)))

(defn- take-super-mhd [tps field-sig ^Ctx ctx]
  (let [cl ^Class (first tps)]
    (if (or (nil? cl) (jb/array? cl) (jb/primitive? cl) (jb/interface? cl))
      [rt/object-constructor tps]
      ;; Right now, this does not check whether a constructor with
      ;; this signature exists.  This check is complicated by the fact
      ;; that the constructor does not to be public.  For example,
      ;; PrintWriter-on in core_print.cljt uses the protected
      ;; constructor of Writer.
      [(->> (filter pass-to-super? field-sig)
            (map #(sig/tag-of % false jb/Object ctx))
            (rt/fixed-args-constructor cl))
       (rest tps)])))

(defn- super-classes [itfs field-sig ^Ctx ctx]
  (letfn [(take-class-symbol ^Class [form]
            (or (when (symbol? form) (ctx/lookup-type form ctx))
                (sig/wrong-class form)))]
    (let [tps (mapv take-class-symbol itfs) ;eager
          [super-mhd tps :as supers] (take-super-mhd tps field-sig ctx)]
      (doseq [tp tps]
        (sig/ensure-interface tp))
      supers)))

(letfn [(check-mutable ^int [^int flags nm ^boolean java-record?]
          (when java-record?
            (wrong/other (str "java.lang.Record cannot have mutable field "
                              (wrong/q nm))))
          flags)
        (field-flags ^int [nm ^boolean java-record?]
          (let [m (meta nm)]
            (cond
              (:unsynchronized-mutable m)
              (check-mutable ClassFile/ACC_PRIVATE nm java-record?)
              (:volatile-mutable m)
              (check-mutable (bit-or ClassFile/ACC_PRIVATE ClassFile/ACC_VOLATILE)
                             nm java-record?)
              java-record?
              (bit-or ClassFile/ACC_PRIVATE ClassFile/ACC_FINAL)
              :else 
              (bit-or ClassFile/ACC_PUBLIC ClassFile/ACC_FINAL))))
        (record-deftype? ^boolean [^IPersistentVector fieldv]
          (let [cnt (count fieldv)]
            (letfn [(nth-last-mnm ^String [^int i]
                      (.mnm ^FieldDef (nth fieldv (- cnt i))))]
              (and (>= cnt 4)
                   (= "__meta" (nth-last-mnm 4))
                   (= "__extmap" (nth-last-mnm 3))
                   (= "__hash" (nth-last-mnm 2))
                   (= "__hasheq" (nth-last-mnm 1))))))

        (field-getter ^void [^CodeBuilder xb ^ClassDesc this-class
                             ^FieldDef field]
          (-> (.aload xb 0)
              (.getfield this-class (.mnm field) (.tpd field))
              (.returnInstruction (TypeKind/from (.tpd field)))))
        
        (kw-instr ^CodeBuilder [^CodeBuilder xb ^FieldDef fdef]
          (rt/load-constant xb (keyword nil (.mnm fdef))))
        (conv-to-field ^CodeBuilder [^CodeBuilder xb ^FieldDef fdef]
          (let [tpd (.tpd fdef)]
            (cond
              (.isPrimitive tpd)
              (let [tp (tp/of-primitive-descriptor tpd)]
                (-> (.checkcast xb (rt/cd-of (.class-wrapper tp)))
                    (cf/invoke (.unboxing-mhd tp))))

              (.equals rt/object tpd) xb ;omit CHECKCAST

              :else (.checkcast xb (.tpd fdef)))))
        (lookup+cast ^CodeBuilder [^CodeBuilder xb ^FieldDef fdef]
          (-> (.aload xb 0)
              (kw-instr fdef)
              (.aconst_null)
              (.invokeinterface rt/map "valAt" rt/mtd-object-object-object)
              (conv-to-field fdef)))
        (map-without ^CodeBuilder [^CodeBuilder xb ^FieldDef fdef]
          (-> (kw-instr xb fdef)
              (.invokeinterface rt/map "without" rt/mtd-map-object)))
        (record-factory ^void [^CodeBuilder xb ^ClassDesc this-class
                               primary-param-lds ^IPersistentVector fieldv]
          (-> (.new_ xb this-class)
              (.dup))
          (doseq [field fieldv] (lookup+cast xb field))
          (-> (.aconst_null xb)
              (.aload 0))
          (doseq [field fieldv] (map-without xb field))
          (-> (.invokestatic xb rt/ClojureRT "seqOrElse" rt/mtd-object-object)
              (.iconst_0)
              (.iconst_0)
              (.invokespecial this-class ConstantDescs/INIT_NAME
                              (cf/parameter-mtd rt/void [] primary-param-lds))
              (.areturn)))]
  
  (defn eph-dtp-class-def ^ClassDef [^String pkg-name ^IPersistentMap imports
                                     ^ClassDesc this-class field-sig
                                     opts methods ^Ctx ctx]
    (letfn [(constr-argn ^int [^DirectMethodHandleDesc mhd]
              (-> mhd .invocationType .parameterCount))
            (parameter-ld ^ILdStInstr [^int i ^FieldDef fdef]
              (cf/ld-st-parameter (.tpd fdef) (.mnm fdef) i))
            (field-st ^ILdStInstr [^FieldDef fdef]
              (cf/ld-st-virtual this-class (.mnm fdef) (.tpd fdef)))
            (primary-constructor ^Consumer [^DirectMethodHandleDesc super-mhd
                                            ^IPersistentVector fieldv]
              (let [super-argn (constr-argn super-mhd)]
                (cf/with-cbh [cb]
                  (cf/constructor cb ClassFile/ACC_PUBLIC super-mhd
                                  (map-indexed parameter-ld fieldv)
                                  (map field-st (subvec fieldv super-argn))))))
            (record-constructors ^Consumer [^IPersistentVector fieldv]
              ;; pre: super-argn is zero
              (cf/with-cbh [cb]
                (let [primary-param-lds (map-indexed parameter-ld fieldv)]
                  (cf/delegating-constructor
                   cb ClassFile/ACC_PUBLIC this-class primary-param-lds
                   [jb/jvm-null jb/jvm-null jb/jvm-int-zero jb/jvm-int-zero])
                  (cf/delegating-constructor
                   cb ClassFile/ACC_PUBLIC this-class primary-param-lds
                   [jb/jvm-int-zero jb/jvm-int-zero])
                  (let [factory-fieldv (subvec fieldv 0 (- (count fieldv) 4))]
                    (.withMethodBody cb "create"
                                     (rt/mtd-of* this-class rt/map)
                                     (bit-or ClassFile/ACC_PUBLIC
                                             ClassFile/ACC_STATIC)
                                     (cf/with-xbh [xb]
                                       (record-factory xb this-class
                                                       primary-param-lds
                                                       factory-fieldv)))))))

            (no-toString? ^boolean [methods]
              (->> methods
                   (filter #(and (= (first %) 'toString)
                                 (= (count (second %)) 1)))
                   (first)
                   (nil?)))
            (object-method ^ClassBuilder [^ClassBuilder cb
                                          ^DynamicCallSiteDesc dcsd]
              (.withMethodBody
               cb (.invocationName dcsd)
               (-> dcsd (.invocationType) (.dropParameterTypes 0 1))
               (bit-or ClassFile/ACC_PUBLIC ClassFile/ACC_FINAL)
               (cf/with-xbh [xb]
                 (let [tk (-> (.invocationType dcsd)
                              (.returnType)
                              (TypeKind/from))]
                   (cond-> (.aload xb 0)
                     (= (.invocationName dcsd) "equals") (.aload 1)
                     true (.invokedynamic dcsd)
                     true (.returnInstruction tk))))))
            (object-method-args ^ConstantDesc* [^IPersistentVector fieldv]
              (let [n (count fieldv)
                    a (new ConstantDesc* (+ n 2))]
                (aset a 0 this-class)
                (aset a 1 (str/join ";" (map #(.mnm ^FieldDef %) fieldv)))
                (dotimes [i n]
                  (let [field ^FieldDef (nth fieldv i)]
                    (aset a (+ i 2)
                          (MethodHandleDesc/ofField rt/mhk-getter this-class
                                                    (.mnm field) (.tpd field)))))
                a))
            (java-record-elements ^Consumer [^IPersistentVector fieldv
                                             ^boolean provide-toString?]
              (cf/with-cbh [cb]
                (let [inv-toString (rt/mtd-of* rt/String this-class)
                      inv-hashCode (rt/mtd-of* rt/int this-class)
                      inv-equals (rt/mtd-of* rt/boolean this-class rt/object)
                      dcsd (DynamicCallSiteDesc/of rt/bsm-object-method
                                                   "toString" inv-toString
                                                   (object-method-args fieldv))]
                  (-> (if provide-toString?
                        (object-method cb dcsd)
                        cb)
                      (object-method (.withNameAndType dcsd "hashCode"
                                                       inv-hashCode))
                      (object-method (.withNameAndType dcsd "equals"
                                                       inv-equals))))

                (doseq [^FieldDef field fieldv]
                  (.withMethodBody cb (.mnm field) (rt/mtd-of* (.tpd field))
                                   ClassFile/ACC_PUBLIC
                                   (cf/with-xbh [xb]
                                     (field-getter xb this-class field))))

                (let [comps (map (fn [^FieldDef field]
                                   (RecordComponentInfo/of
                                    (.mnm field) (.tpd field)))
                                 fieldv)]
                  (.with cb (RecordAttribute/of ^java.util.List comps)))))
            
            (field-cbh ^Consumer [^FieldDef fdef]
              (cf/with-cbh [cb]
                (.withField cb (.mnm fdef) (.tpd fdef) (.flags fdef))))]
      (let [[super-mhd itfs] (super-classes (:implements opts) field-sig ctx)
            java-record? (.equals rt/Record (.owner ^DirectMethodHandleDesc super-mhd))

            eph-field (fn ^FieldDef [nm]
                        ;; mirrors `field-bref` below
                        (let [tpd (tag-desc-of pkg-name imports nm false rt/object)
                              mnm (cfg/munge-name nm)]
                          (cf/field-def mnm tpd (field-flags nm java-record?)
                                        (pass-to-super? nm))))
            fieldv (->> (if-some [s (seq (filter pass-to-super? field-sig))]
                          ;; sort "pass to super" entries to front
                          (concat s (remove pass-to-super? field-sig))
                          field-sig)
                        (mapv eph-field))

            flags (-> (if (:abstract opts)
                        (do (when java-record?
                              (wrong/other "java.lang.Record cannot be declared :abstract"))
                            ClassFile/ACC_ABSTRACT)
                        ClassFile/ACC_FINAL)
                      (bit-or ClassFile/ACC_PUBLIC))
            record? (record-deftype? fieldv)]
        (when java-record?
          (doseq [^FieldDef field fieldv
                  :let [nm (.mnm field)]
                  :when (contains? prohibited-record-fields nm)]
            (wrong/other (str "java.lang.Record cannot declare field with name "
                              "of no-arg Object method " (wrong/q (symbol nm))))))
        
        ;; put constructor into class definition, so that it is
        ;; visible for methods of the deftype*
        (cf/class-def
         this-class flags (map rt/cd-of itfs) super-mhd fieldv
         (cond-> [(primary-constructor super-mhd fieldv)]
           record? (conj (record-constructors fieldv))
           java-record? (conj (java-record-elements fieldv (no-toString? methods)))
           true (into (map field-cbh)
                      (subvec fieldv (constr-argn super-mhd))))))))

  (defn dtp-field-brefs [^ClassDesc this-class field-sig ^Ctx ctx]
    (letfn [(field-bref [nm]
              ;; mirrors `eph-field` above
              (when-not (pass-to-super? nm)
                (let [tp (sig/tag-of nm false jb/Object ctx)
                      mnm (cfg/munge-name nm)
                      ;; Note: Java records with mutable fields are
                      ;; rejected anyway
                      mutable? (-> (field-flags nm false)
                                   (bit-and ClassFile/ACC_FINAL)
                                   (zero?))
                      bref (x/field-ref nm tp mutable?)]
                  (.deliver-load bref (cf/ld-st-virtual this-class mnm
                                                        (rt/cd-of tp)))
                  bref)))]
      (keep field-bref field-sig))))

;;; ------------------------------------------------------------------------

(defn eph-reify-class-def ^ClassDef [^ClassDesc this-class itfs ^Ctx ctx]
    (let [field-sig []
          [super-mhd itfs] (super-classes itfs field-sig ctx)
          itfs (cons (ctx/get-type rt/clnm-iobj ctx) itfs)
          flags ClassFile/ACC_PUBLIC]
      (cf/class-def this-class flags (map rt/cd-of itfs) super-mhd [] [])))
