;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.compiler.sigfn
  (:require
   [tcljc.util :as util]
   [tcljc.config :as cfg]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.wrong :as wrong]
   [tcljc.expr :as x]
   [tcljc.context :as ctx]
   [tcljc.compiler.resolve :as resolve])
  (:import
   (tcljc.expr FnForm Arity Binding)
   (tcljc.context Ctx)
   (clojure.lang Symbol)
   (java.lang.reflect Method)))

(defn wrong-class [x]
  (if (instance? NoClassDefFoundError x)
    (wrong-class (ex-message ^NoClassDefFoundError x))
    (let [sym (symbol x)]               ;idempotent
      (wrong/unresolved "class not found: " sym))))

(defn ensure-interface ^Class [^Class tp]
  (if (jb/interface? tp)
    tp
    (wrong/type-expr "not an interface class" tp)))


(defn get-tag [form]
  (-> form (meta) :tag))

(defn- tag-of* ^Class [tag ^boolean void? ^Class no-hint ^Ctx ctx]
  (if (some? tag)
    (if-some [tp (ctx/get-type tag ctx)]
      (if (and (jb/statement? tp) (not void?))
        (wrong/syntax "`void` tag not applicable in this context")
        tp)
      (wrong-class tag))
    no-hint))

(defn tag-of ^Class [form ^boolean void? ^Class no-hint ^Ctx ctx]
  (tag-of* (get-tag form) void? no-hint ctx))


;;; ------------------------------------------------------------------------

(defn ensure-parameter [x]
  (if (symbol? x)
    (if (namespace x)
      (wrong/syntax "parameter name must not have a namespace" x)
      x)
    (wrong/syntax "parameter name must be symbol" x)))

(defn- with-paramv
  (^Arity [^Arity tmpl paramv ^Class rtype ^Method m]
   (Arity. paramv rtype (count paramv) (.varargs? tmpl) false
           m (.getName m) (.this-name tmpl) (.level tmpl) (.aform tmpl)
           (.!closes-over tmpl) (.at-idx tmpl)))
  (^Arity [^Arity tmpl paramv ^Class rtype
           ^boolean varargs? ^boolean variadic? ^int idx]
   (Arity. paramv rtype (count paramv) varargs? variadic?
           (.method tmpl) (.method-name tmpl) (.this-name tmpl)
           (.level tmpl) (.aform tmpl) (.!closes-over tmpl) idx)))

(defn mk-param ^Binding [^int level ^Symbol nm ^Class tp]
  (-> (x/local-ref level nm tp x/b-parameter)
      (x/local-binding nil)))

(defn mk-receiver ^Binding [^int level ^Symbol nm ^Class tp]
  (-> (x/local-ref level nm tp x/b-this-object)
      (x/local-binding nil)))

(defn arity-sig ^Arity [^Arity tmpl ^Class unset-tp ^Class rtype params ^Ctx ctx]
  (loop [acc []
         [p :as params] (seq params)]
    (cond
      (nil? params)
      (with-paramv tmpl acc rtype false false (.at-idx tmpl))
      
      (= p '&)
      (let [p (ensure-parameter (second params))
            tp (tag-of p false nil ctx)
            vap-tp (cond
                     (nil? tp) (or unset-tp (ctx/get-type rt/clnm-seq ctx))
                     (jb/array? tp) tp
                     :else (wrong/type-expr "type of rest parameter must be array" tp))]
        (when (nnext params)
          (wrong/syntax "additional parameters after rest parameter"))
        (let [param (mk-param (.level tmpl) p vap-tp)]
          (with-paramv tmpl
            (conj acc param) rtype (some? tp) (nil? tp) (.at-idx tmpl))))

      :else
      (let [tp (tag-of p false (or unset-tp jb/Object) ctx)
            param (mk-param (.level tmpl) (ensure-parameter p) tp)]
        (recur (conj acc param) (next params))))))

;;; If `unset-tp` is not nil, then this type is used for an entity
;;; without an explicit type tag: return type, parameter type, or
;;; varargs type.
(defn- parse-arity-sigs [^int level ^Class unset-tp ^Symbol this-name aforms
                         ^Ctx ctx]
  (letfn [(arity ^Arity [aform ^int at-idx]
            (if (and (seq? aform) (vector? (first aform)))
              (let [v (first aform)
                    rtag (get-tag v)
                    rtype (if (= rtag 'auto-return-type)
                            jb/cl-polymorphic-type
                            (or (tag-of* rtag true unset-tp ctx) jb/Object))
                    tmpl (Arity. nil nil -1 false false nil nil this-name
                                 level aform (util/mk-shm) at-idx)]
                (arity-sig tmpl unset-tp rtype (seq v) ctx))
              (wrong/syntax "expect function arity ([...] ...)")))
          (arity-seq [acc seen-ns [aform :as aforms]]
            (if (some? aforms)
              (let [at (arity aform (count acc)), n (.n at)]
                (when (contains? seen-ns (object n))
                  (wrong/other (str "function arity " n " already defined")))
                (when (and (.varargs? at)
                           (->> acc
                                (filter #(> (.n ^Arity %) n))
                                (seq)
                                (boolean)))
                  (wrong/other "only maximum arity can be variadic"))
                (recur (conj acc at) (conj seen-ns (object n)) (next aforms)))
              (if (seq acc)
                acc
                (wrong/syntax "function must have at least one arity"))))]
    (arity-seq [] #{} (seq aforms))))

(defn- with-method-ptype ^Binding [^Binding b ^Class tp]
  (let [bref (.bref b)]
    (-> (x/local-ref (x/b-level bref) (.simple-nm bref) tp x/b-parameter)
        (x/local-binding (first (x/argv b))))))

;;; FIXME... revise type checks to whatever the JVM allows, in
;;; particular primitives & boxing and whatever Valhalla brings
(defn- fixup-arity-sig ^Arity [^Arity at ^Method m]
  (let [unhinted? (->> (cons (.rtype at) (x/at-parameter-types at))
                       (every? jb/polymorphic?))
        resolve (fn ^Class [^Class sig-tp ^Class method-tp]
                  (if (jb/polymorphic? sig-tp)
                    (if unhinted? method-tp jb/Object)
                    sig-tp))
        rtype (let [mtype (.getReturnType m)
                    rtype (resolve (.rtype at) mtype)]
                (when-not (jb/jvm-assignable-to? rtype mtype)
                  (wrong/other (str "function result " (wrong/q rtype)
                                    " not assignment compatible to method's "
                                    (wrong/q mtype))))
                rtype)
        pclasses (.getParameterTypes m)
        paramv (loop [acc []
                      i 0]
                 (if (= i (.n at))
                   acc
                   (let [pclass (aget pclasses i)
                         d (x/at-nth-binding at i)
                         dclass (resolve (x/type (.bref d)) pclass)]
                     (if (jb/jvm-assignable-to? dclass pclass)
                       (recur (conj acc (with-method-ptype d dclass)) (inc i))
                       (wrong/other (str "function parameter " (wrong/q dclass)
                                         " not assignment compatible to "
                                         "method's " (wrong/q pclass)))))))]
    (when-not (= (.varargs? at) (.isVarArgs m))
      (wrong/other "interface and function disagree on varargs status"))
    (with-paramv at paramv rtype m)))

(defn- fixup-arity-sigs-from-itf [asigs ^Class itf]
  (when-not (= (count asigs) 1)
    (wrong/other "interface function must implement exactly one arity"))
  (let [at ^Arity (first asigs)
        an (x/at-n at)]
    (if-some [m (first (->> (resolve/itf-methods itf)
                            (filter #(= (.getParameterCount ^Method %) an))))]
      [(fixup-arity-sig at m)]
      (wrong/other (str "interface " (wrong/q itf)
                        " has no method of arity " an)))))

;;; `level` is the level that is assigned to names defined in this
;;; function.
(defn destructure-fn*-form ^FnForm [form ^int level ^String unique-mnm ^Ctx ctx]
  (letfn [(arity-forms [xs]
            (if (vector? (first xs))
              (list (with-meta xs (meta form)))
              (map #(cfg/with-line % form) xs)))
          ;; Set fn-form-*'s form early, so that its available in the
          ;; forked of thread that compiles the function body.
          (mk-fn-form-fct [^Symbol this-name aforms]
            (let [at-sigs (parse-arity-sigs level nil this-name aforms ctx)
                  tp (ctx/get-type rt/clnm-abstract-fn ctx)]
              (x/fn-form-fct form tp level unique-mnm at-sigs)))
          (mk-fn-form-itf [^Class itf-tag aforms]
            (let [at-sigs (-> (parse-arity-sigs level jb/cl-polymorphic-type
                                                nil aforms ctx)
                              (fixup-arity-sigs-from-itf itf-tag))]
              (x/fn-form-itf form itf-tag level unique-mnm at-sigs)))]
    (let [nm (second form)]
      (if (symbol? nm)
        (let [aforms (arity-forms (nnext form))]
          (when (some? (get-tag nm))
            (wrong/other "type tag on function name is not supported"))
          (when (some? (get-tag (first form)))
            (wrong/other "interface function cannot have a name"))
          (mk-fn-form-fct nm aforms))
        (let [aforms (arity-forms (next form))]
          (if-some [itf-tag (tag-of (first form) false nil ctx)]
            (mk-fn-form-itf (ensure-interface itf-tag) aforms)
            (mk-fn-form-fct nil aforms)))))))
