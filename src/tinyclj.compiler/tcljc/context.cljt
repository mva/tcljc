;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.context ;note: this namespace cannot be required by tcljc.expr
  (:require
   [tcljc.config :as cfg]
   [tcljc.javabase :as jb]
   [tcljc.wrong :as wrong]
   [tcljc.runtime :as rt]
   [tcljc.expr :as x]
   [tcljc.io :as io]
   [tinyclj.string :as str])
  (:import
   (tcljc.expr BindingRef FnForm ArityCode)
   (tcljc.io CompileIO)
   (clojure.lang Symbol Keyword IPersistentVector IPersistentMap ExceptionInfo)
   (java.lang.constant ClassDesc)
   (java.lang.invoke MethodHandles$Lookup)
   (java.util.concurrent Future ArrayBlockingQueue ExecutorService)))

(defn wait-for-fn-body ^ArityCode* [^FnForm fn-form]
  (io/wait-for-result (.body-fut fn-form)))
(defn fn-body-now ^ArityCode* [^FnForm fn-form]
  (.resultNow (.body-fut fn-form)))

;;; ------------------------------------------------------------------------

(definterface ICtx
  ;; `known-ns` maps a namespace name (a string) to a map of the
  ;; public globals of the namespace (a map string -> BindingRef).  It
  ;; is the transitive closure over all directly and indirectly
  ;; required namespaces.
  (get-known-ns ^IPersistentMap [])
  (merge-into-known-ns ^void [^IPersistentMap other-known-ns])
  
  (get-ns-alias-map ^IPersistentMap [])
  (put-ns-alias ^void [^String alias ^String ns-str])
  
  ;; If there is a def with the given name in this namespace, then
  ;; this map has an entry mapping its name to the BindingRef.
  (get-globals ^IPersistentMap [])
  ;; Define global `nm` as `x`.  The new name is immediatly visible,
  ;; but it can be shadowed by any local binding, even one that was
  ;; established before the def.  For example, ```(let [] (def y 1)
  ;; y)``` evaluates to `1`, while ```(let [x 2] (def x 1)
  ;; x)```. evaluates to `2`.
  (put-global ^void [^String nm ^BindingRef x])
  
  (get-imports ^IPersistentMap [])
  (put-import ^void [^Symbol nm ^Class cl])

  (compile-io ^CompileIO [])
  (set-compile-io ^CompileIO [^CompileIO compile-io])
  
  ;; Top-level forms are assigned consecutive index values.  This
  ;; enables synchronization of macro operations across forms, as well
  ;; as between compilation and bytecode emit threads.
  (get-tlf-idx ^int [])
  (increment-tlf-idx ^void []))

;;; ------------------------------------------------------------------------

;;; The mutable (unlocked) namespace context is private to the
;;; namespace thread.  All updates and reads are confined to this
;;; single thread.  The immutable (locked) namespace context is shared
;;; across function-level compilation threads.  It isolates its users
;;; from concurrent or reordered updates in the namespace environment,
;;; effectively freezing the environment.
(deftype Ctx [^:unsynchronized-mutable ^IPersistentMap _known-ns
              ^:unsynchronized-mutable ^IPersistentMap _ns-alias
              ^:unsynchronized-mutable ^IPersistentMap _globals
              ^:unsynchronized-mutable ^IPersistentMap _imports
     
              ^String ns-str
              ^:unsynchronized-mutable ^CompileIO _compile-io
              
              ^boolean locked?
              ^:unsynchronized-mutable ^int _macro-count
              ^:unsynchronized-mutable ^int _tlf-idx]
  ICtx
  (get-known-ns [_]
    _known-ns)
  (merge-into-known-ns [_ other-known-ns]
    (if locked?
      (throw (IllegalStateException.))
      (set! _known-ns
            (reduce-kv (fn [acc k v]
                         (assert (string? k))
                         (assert (map? v))
                         (cond-> acc
                           (not (or (= ns-str k) (contains? acc k)))
                           (assoc k v)))
                       other-known-ns _known-ns))))
  
  (get-ns-alias-map [_]
    _ns-alias)
  (put-ns-alias [_ alias ns-str]
    (if locked?
      (throw (IllegalStateException.))
      (set! _ns-alias (assoc _ns-alias alias ns-str))))
    
  (get-globals [_]
    _globals)
  (put-global [_ nm x]
    (if locked?
      (throw (IllegalStateException.))
      (set! _globals (assoc _globals nm x))))
    
  (get-imports [_]
    _imports)
  (put-import [_ nm x]
    (if locked?
      (throw (IllegalStateException.))
      (set! _imports (assoc _imports nm x))))

  (compile-io [_]
    _compile-io)
  (set-compile-io [_ compile-io]
    (let [prev _compile-io]
      (set! _compile-io compile-io)
      prev))
  
  (get-tlf-idx [_]
    _tlf-idx)
  (increment-tlf-idx [_]
    (set! _tlf-idx (inc _tlf-idx))))

(defn mk-ctx* ^Ctx [^IPersistentMap initial-globals
                    ^IPersistentMap initial-imports
                    ^String ns-str ^CompileIO compile-io]
  (let [known-ns {}, ns-alias {}]
    (Ctx. known-ns ns-alias initial-globals initial-imports
          ns-str compile-io false 0 0)))

(defn locked ^Ctx [^Ctx ctx]
  (if (.locked? ctx)
    ctx
    (Ctx. (.get-known-ns ctx) (.get-ns-alias-map ctx) (.get-globals ctx)
          (.get-imports ctx) (.ns-str ctx) (.compile-io ctx)
          true 0 (.get-tlf-idx ctx))))

(defn locked-in-class ^Ctx [^Ctx ctx ^Class ephemeral-class]
  (let [short-sym (jb/import-symbol-short ephemeral-class)
        imports (assoc (.get-imports ctx) short-sym ephemeral-class)]
    (Ctx. (.get-known-ns ctx) (.get-ns-alias-map ctx) (.get-globals ctx)
          imports (.ns-str ctx)
          (.compile-io-in (.compile-io ctx) ephemeral-class)
          true 0 (.get-tlf-idx ctx))))


(defn global? ^boolean [^Ctx ctx]
  (not (.locked? ctx)))

(defn this-ns ^String [^Ctx ctx]
  (.ns-str ctx))

(defn dyn-ld ^ClassLoader [^Ctx ctx]
  (.getClassLoader (-> ctx .compile-io .lookup-in-pkg .lookupClass)))



;; Given a simple symbol or a string in type tag syntax, return the
;; imported class or the type instance from the dynamic class loader
;; of the application under construction.  Return nil if the type does
;; not exist.
(defn lookup-type ^Class [tp ^Ctx ctx]
  (letfn [(resolve-class-symbol ^Class [^Symbol tp]
            (or (.valAt (.get-imports ctx) tp)
                (.resolveConstantDesc (ClassDesc/of (name tp))
                                      (-> ctx .compile-io .lookup-in-pkg))))
          (resolve-type-symbol ^Class [^Symbol tp]
            (let [nm (name tp)
                  array-rank (cfg/array-dimensions nm)]
              (if (zero? array-rank) ;not an array & valAt lookup failed
                (resolve-class-symbol tp)
                (loop [cl (-> (cfg/strip-array-suffix nm array-rank)
                              (resolve-class-symbol))
                       i array-rank]
                  (if (zero? i)
                    cl
                    (recur (.arrayType cl) (dec i)))))))]
    (try
      (cond
        (class? tp) tp
        (symbol? tp) (resolve-type-symbol tp)
        :else nil)
      (catch ClassNotFoundException _
        nil))))

(defn get-type ^Class [tp ^Ctx ctx]
  (or (lookup-type tp ctx)
      (wrong/class-not-found tp)))

;; Look up namespace qualified name resolved via `known-ns`.  If the
;; namespace part refers to a known namespace, then the simple name
;; must exist -- an error is signaled otherwise.  Nil is returned if
;; the namespace part is unknown.
(letfn [(lookup-global* [^Ctx ctx ^String ns ^String nm]
          (let [resolved-ns-nm (.valAt (.get-ns-alias-map ctx) ns ns)]
            (if (.equals (.ns-str ctx) resolved-ns-nm)
              (or (.valAt (.get-globals ctx) nm nil) ;same as for (nil? ns)
                  (wrong/unresolved-nmsp-sym resolved-ns-nm (symbol ns nm)))
              (when-some [publics (.valAt (.get-known-ns ctx) resolved-ns-nm nil)]
                (or (.valAt ^IPersistentMap publics nm nil)
                    (wrong/unresolved-nmsp-sym resolved-ns-nm (symbol ns nm)))))))]
  (defn lookup-sname-global ^BindingRef [^Symbol nm ^Ctx ctx]
    (.valAt (.get-globals ctx) (name nm) nil))
  (defn lookup-qname-global ^BindingRef [^Symbol nm ^Ctx ctx]
    (lookup-global* ctx (namespace nm) (name nm))))

(defn put-global ^BindingRef [^String nm ^BindingRef x ^Ctx ctx]
  (.put-global ctx nm x))
