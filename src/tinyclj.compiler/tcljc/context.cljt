(ns tcljc.context ;note: this namespace cannot be required by tcljc.expr
  (:require
   [tcljc.config :as cfg]
   [tcljc.javabase :as jb]
   [tcljc.wrong :as wrong]
   [tcljc.runtime :as rt]
   [tcljc.expr :as x]
   [tinyclj.string :as str])
  (:import
   (tcljc.expr BindingRef FnForm)
   (clojure.lang Symbol Keyword IPersistentVector IPersistentMap)
   (java.nio.file Path)
   (java.lang.constant ClassDesc ConstantDesc)
   (java.lang.invoke MethodHandles$Lookup MethodHandle)
   (java.util Map ArrayList)
   (java.util.concurrent Future BlockingQueue ArrayBlockingQueue
                         CompletableFuture TimeoutException TimeUnit
                         ExecutorService Executors ConcurrentHashMap)))

(defn cf? ^boolean [x]
  (instance? CompletableFuture x))

;;; Produces the value of `body` or throws an exception.  Whatever the
;;; outcome, the provided CompletableFuture is completed afterwards:
;;; either with the value or exceptionally.
(defmacro with-complete [cf & body]
  `(let [^CompletableFuture cf# ~cf]
     (try
       (let [res# (do ~@body)]
         (.complete cf# res#)
         res#)
       (catch Throwable t#
         (.completeExceptionally cf# t#)
         (throw t#)))))

;;; This is used to communicate completion without a particular value,
;;; *or* exceptional completion.  Only the former would be covered by
;;; a semaphore or a countdown latch.
(defmacro with-complete-nil [cf & body]
  `(let [^CompletableFuture cf# ~cf]
     (try
       (let [res# (do ~@body)]
         (.complete cf# nil)
         res#)
       (catch Throwable t#
         (.completeExceptionally cf# t#)
         (throw t#)))))

;;; See ptest/get-future: Do *NOT* call wait-for-result as part of a
;;; map.
(defn wait-for-result
  ([x]
   ;; Assumption: Nothing takes longer than this many seconds.  Right
   ;; now, a timeout probably means a program error instead of a large
   ;; program.
   (wait-for-result 5 x)) 
  ([^int seconds x]
   (if (instance? Future x)
     (try
       (.get ^Future x seconds TimeUnit/SECONDS)
       (catch java.util.concurrent.ExecutionException e ;unwrap
         (throw (or (.getCause e) ^Throwable e))))
     x)))

(defn get-result-now [x]        ;pre: computation of `x` has completed
  (wait-for-result 1 x))


(defn wait-for-fn-body ^"[Ltcljc.expr.ArityCode;" [^FnForm fn-form]
  (wait-for-result (.body-fut fn-form)))
(defn fn-body-now ^"[Ltcljc.expr.ArityCode;" [^FnForm fn-form]
  (.resultNow (.body-fut fn-form)))

;;; ------------------------------------------------------------------------

(definterface ICtx
  ;; `known-ns` maps a namespace name (a string) to a map of the
  ;; public globals of the namespace (a map string -> BindingRef).  It
  ;; is the transitive closure over all directly and indirectly
  ;; required namespaces.
  (get-known-ns ^IPersistentMap [])
  (merge-into-known-ns ^void [^IPersistentMap other-known-ns])
  
  (get-ns-alias-map ^IPersistentMap [])
  (put-ns-alias ^void [^String alias ^String ns-str])
  
  ;; If there is a def with the given name in this namespace, then
  ;; this map has an entry mapping its name to the BindingRef.
  (get-globals ^IPersistentMap [])
  ;; Define global `nm` as `x`.  The new name is immediatly visible,
  ;; but it can be shadowed by any local binding, even one that was
  ;; established before the def.  For example, ```(let [] (def y 1)
  ;; y)``` evaluates to `1`, while ```(let [x 2] (def x 1)
  ;; x)```. evaluates to `2`.
  (put-global ^void [^String nm ^BindingRef x])
  
  (get-imports ^IPersistentMap [])
  (put-import ^void [^Symbol nm ^Class cl])
  
  ;; Top-level forms are assigned consecutive index values.  This
  ;; enables synchronization of macro operations across forms, as well
  ;; as between compilation and bytecode emit threads.
  (get-tlf-idx ^int [])
  (increment-tlf-idx ^void []))

(definterface FnRequireNamespace
  ;; Schedule the namespace `ns-str` for compilation, passing it
  ;; `provided-nmsp` as its map of known namespaces (string ->
  ;; Namespace).  Returns the Namespace instance for `ns-str`,
  ;; possible via a future.
  (schedule [^String ns-str ^IPersistentMap provided-nmsp]))

;;; ------------------------------------------------------------------------

(def msg-fatal-error -4)
;;; Contains the exception that killed the sending thread.  The
;;; receiving end should re-raise it.  This message is always followed
;;; by a `msg-close-queue`.

(def msg-close-queue -3)
;;; Send when the compile thread is exiting.  Usually this means
;;; compilation is done, but this message is also send after
;;; exceptional completion.

(def msg-emit-tlf -2)
;;; Emit top-level form.  The `s` queue waits for the function bodies'
;;; futures before passing this message on to the `q` queue.  That is,
;;; once in `q` all compilation tasks of this top-level form have
;;; completed.

(def msg-macro-of-next-tlf -1)
;;; Registers a DelayedMacroFn that is part of the next `msg-emit-tlf`
;;; top-level form.  This tasks the emitter thread to deliver the
;;; macro's value eventually.  Messages of this type are sequenced
;;; with respect to `msg-emit-tlf`: the macro is defined after the
;;; previous message's top-level form, and is contained in the next
;;; message's top-level form.

(def req-define-class 1)
;;; Issued after compiling a `definterface*` or a `deftype*`.  Returns
;;; the class instance, although other classes it depends on may not
;;; be defined at this point.  Type descriptors like array types may
;;; reference the newly created class immediately.

(def req-flush-namespace-segment 3)
;;; Returns when all namespace code accumulated upto this point has
;;; been defined into the class loader.  That is, the namespace code
;;; has become both visible and possibly active.  The value being
;;; returned is an expression that forces the namespace's
;;; initialization up to this point.


(deftype Msg [^int task ^Object x ^CompletableFuture promise])

(defn close-queue? ^boolean [^Msg msg]
  (= (.task msg) msg-close-queue))
(defn needs-response? ^boolean [^int task]
  (>= task 0))
(defn task-id* ^String [^int task]
  (case task
    #_msg-fatal-error -4 "msg-fatal-error"
    #_msg-close-queue -3 "msg-close-queue"
    #_msg-emit-tlf -2 "msg-emit-tlf"
    #_msg-macro-of-next-tlf -1 "msg-macro-of-next-tlf"
    #_req-define-class 1 "req-define-class"
    #_req-flush-namespace-segment 3 "req-flush-namespace-segment"))
(defn task-id ^String [^Msg msg]
  (task-id* (.task msg)))

(defn send-msg ^Object [^BlockingQueue q ^int task ^Object x]
  (if (needs-response? task)
    (let [fut (CompletableFuture.)]
      (.put q (Msg. task x fut))
      (let [resp (wait-for-result fut)]
        (if (instance? Throwable resp)
          (throw ^Throwable resp)       ;receiving thread is in trouble
          resp)))
    (.put q (Msg. task x nil))))

;;; ------------------------------------------------------------------------

;;; The mutable (unlocked) namespace context is private to the
;;; namespace thread.  All updates and reads are confined to this
;;; single thread.  The immutable (locked) namespace context is shared
;;; across function-level compilation threads.  It isolates its users
;;; from concurrent or reordered updates in the namespace environment,
;;; effectively freezing the environment.
(deftype Ctx [^:unsynchronized-mutable ^IPersistentMap _known-ns
              ^:unsynchronized-mutable ^IPersistentMap _ns-alias
              ^:unsynchronized-mutable ^IPersistentMap _globals
              ^:unsynchronized-mutable ^IPersistentMap _imports
     
              ^String ns-str
              ^Path rpath
              ^java.net.URL rurl    ;nil when importing capstone class
              ^MethodHandles$Lookup lookup-in-pkg
              ^FnRequireNamespace require-namespace

              ^ConcurrentHashMap !private-names
              ;; Helper structure to generate unique names for fn* and
              ;; reify* instances within a given namespace.
     
              ^Object binding-frame
              ;; To carry *out* and *err* into threads.
     
              ^BlockingQueue emit-q
     
              ^MethodHandle next-id-mh
              ^MethodHandle apply-mh
              ;; Handle for `tinyclj.lang.RT/applyMacroMapped`, or nil
              ;; if application and compiler share their runtime
              ;; classes.  In the latter case, the macro function's
              ;; `applyTo` can be invoked directly.
     
              ^ExecutorService exc-method
              ;; The executor for futures compiling an fn* arity (or
              ;; reify* method, or deftype method).

              ^boolean locked?
              ^:unsynchronized-mutable ^int _macro-count
              ^:unsynchronized-mutable ^int _tlf-idx]
  ICtx
  (get-known-ns [_]
    _known-ns)
  (merge-into-known-ns [_ other-known-ns]
    (if locked?
      (throw (IllegalStateException.))
      (set! _known-ns
            (reduce-kv (fn [acc k v]
                         (assert (string? k))
                         (assert (map? v))
                         (cond-> acc
                           (not (or (= ns-str k) (contains? acc k)))
                           (assoc k v)))
                       other-known-ns _known-ns))))
  
  (get-ns-alias-map [_]
    _ns-alias)
  (put-ns-alias [_ alias ns-str]
    (if locked?
      (throw (IllegalStateException.))
      (set! _ns-alias (assoc _ns-alias alias ns-str))))
    
  (get-globals [_]
    _globals)
  (put-global [_ nm x]
    (if locked?
      (throw (IllegalStateException.))
      (set! _globals (assoc _globals nm x))))
    
  (get-imports [_]
    _imports)
  (put-import [_ nm x]
    (if locked?
      (throw (IllegalStateException.))
      (set! _imports (assoc _imports nm x))))
  
  (get-tlf-idx [_]
    _tlf-idx)
  (increment-tlf-idx [_]
    (set! _tlf-idx (inc _tlf-idx))))

(defn resolve-mh ^MethodHandle [^MethodHandles$Lookup l ^ConstantDesc cd]
  ^MethodHandle (.resolveConstantDesc cd l))

(defn mk-ctx* ^Ctx [^IPersistentMap initial-globals
                                  
                    ^String ns-str ^Path rpath ^java.net.URL rurl
                                  
                    ^MethodHandles$Lookup lookup-in-pkg
                    ^FnRequireNamespace require-namespace
                    ^MethodHandle apply-mh
                    ^ExecutorService exc-method]
  ;; pick up bindings for *out* and *err* at this point, so that
  ;; output redirection established by ptest works for worker threads
  (let [known-ns {}
        ns-alias {}
        binding-frame (clojure.lang.Var/cloneThreadBindingFrame)
        capacity-q 8  ;prevent compilation from reaching too far ahead
        emit-q (ArrayBlockingQueue. capacity-q)
        next-id-mh (resolve-mh lookup-in-pkg rt/mhd-nextID)
        private-names (ConcurrentHashMap.)]
    (Ctx. known-ns ns-alias initial-globals jb/initial-imports
          ns-str rpath rurl lookup-in-pkg require-namespace
          private-names binding-frame emit-q next-id-mh apply-mh exc-method
          false 0 0)))

(defn locked ^Ctx [^Ctx ctx]
  (if (.locked? ctx)
    ctx
    (Ctx. (.get-known-ns ctx) (.get-ns-alias-map ctx) (.get-globals ctx)
          (.get-imports ctx)
          (.ns-str ctx) (.rpath ctx) (.rurl ctx)
          (.lookup-in-pkg ctx) (.require-namespace ctx)
          (.!private-names ctx) (.binding-frame ctx) (.emit-q ctx)
          (.next-id-mh ctx) (.apply-mh ctx) (.exc-method ctx) true 0
          (.get-tlf-idx ctx))))

(defn locked-in-class ^Ctx [^Ctx ctx ^Class ephemeral-class]
  (let [short-sym (jb/import-symbol-short ephemeral-class)
        imports (assoc (.get-imports ctx) short-sym ephemeral-class)
        l (.in (.lookup-in-pkg ctx) ephemeral-class)]
    (Ctx. (.get-known-ns ctx) (.get-ns-alias-map ctx) (.get-globals ctx)
          imports
          (.ns-str ctx) (.rpath ctx) (.rurl ctx)
          l (.require-namespace ctx)
          (.!private-names ctx) (.binding-frame ctx) (.emit-q ctx)
          (.next-id-mh ctx) (.apply-mh ctx) (.exc-method ctx) true 0
          (.get-tlf-idx ctx))))


;;; Not private because of the `with-context` macro.
#_(def ^ThreadLocal ctx (ThreadLocal.))   ;FIXME... want ScopeLocal here
(defn tl-ctx* ^Ctx [tl-ctx] tl-ctx)

(defn global? ^boolean [tl-ctx]
  (not (.locked? (tl-ctx* tl-ctx))))

(defn this-ns ^String [tl-ctx]
  (.ns-str (tl-ctx* tl-ctx)))

(defn lookup-in-pkg ^MethodHandles$Lookup [tl-ctx]
  (.lookup-in-pkg (tl-ctx* tl-ctx)))

(defn next-id ^int [^Ctx ctx]
  ^int (.invokeExact (.next-id-mh ctx)))

;; Given a simple symbol or a string in type tag syntax, return the
;; imported class or the type instance from the dynamic class loader
;; of the application under construction.  Return nil if the type does
;; not exist.
(defn lookup-type ^Class [tp tl-ctx]
  (if (class? tp)
    tp
    (let [tl-ctx (tl-ctx* tl-ctx)]
      (or (.valAt (.get-imports tl-ctx) tp) ;symbols only
          (try
            (.resolveConstantDesc (if (symbol? tp)
                                    (ClassDesc/of (str tp))
                                    (rt/str-to-cld tp))
                                  (.lookup-in-pkg tl-ctx))
            (catch ClassNotFoundException _
              nil))))))

(defn get-type ^Class [tp tl-ctx]
  (or (lookup-type tp tl-ctx)
      (wrong/class-not-found tp)))

;; Look up namespace qualified name resolved via `known-ns`.  If the
;; namespace part refers to a known namespace, then the simple name
;; must exist -- an error is signaled otherwise.  Nil is returned if
;; the namespace part is unknown.
(letfn [(lookup-global* [^Ctx ctx ^String ns ^String nm]
          (let [resolved-ns-nm (.valAt (.get-ns-alias-map ctx) ns ns)]
            (if (.equals (.ns-str ctx) resolved-ns-nm)
              (or (.valAt (.get-globals ctx) nm nil) ;same as for (nil? ns)
                  (wrong/unresolved resolved-ns-nm (symbol ns nm)))
              (when-some [publics (.valAt (.get-known-ns ctx) resolved-ns-nm nil)]
                (or (.valAt ^IPersistentMap publics nm nil)
                    (wrong/unresolved resolved-ns-nm (symbol ns nm)))))))]
  (defn lookup-sname-global ^BindingRef [^Symbol nm tl-ctx]
    (.valAt (.get-globals (tl-ctx* tl-ctx)) (name nm) nil))
  (defn lookup-qname-global ^BindingRef [^Symbol nm tl-ctx]
    (lookup-global* (tl-ctx* tl-ctx) (namespace nm) (name nm))))

(defn put-global ^BindingRef [^String nm ^BindingRef x tl-ctx]
  (.put-global (tl-ctx* tl-ctx) nm x))


(defn this-rpath ^Path [tl-ctx]
  (.rpath (tl-ctx* tl-ctx)))
(defn this-rurl ^java.net.URL [tl-ctx]
  (.rurl (tl-ctx* tl-ctx)))
(defn private-name-map ^ConcurrentHashMap [tl-ctx]
  (.!private-names (tl-ctx* tl-ctx)))


(defn push-nmsp-context ^void [^MethodHandles$Lookup lookup-in-pkg
                               ^String ns-str]
  (let [mh (resolve-mh lookup-in-pkg rt/mhd-pushFileContext)]
    ^void (.invokeExact mh ns-str)))
(defn pop-nmsp-context ^void [^MethodHandles$Lookup lookup-in-pkg]
  (let [mh (resolve-mh lookup-in-pkg rt/mhd-popFileContext)]
    ^void (.invokeExact mh)))

(defn exc-method ^ExecutorService [tl-ctx]
  (.exc-method (tl-ctx* tl-ctx)))

;;; ------------------------------------------------------------------------

(def enable-task-log false)

(letfn [(get-sexpr [^Keyword kw ^IPersistentMap m]
          (java.util.Objects/requireNonNull (get m kw) (str kw)))]
  (defn- binding-sym ^Symbol [m] (get-sexpr :binding-sym m))
  (defn- local-context-sexpr [m] (get-sexpr :local-context m))
  (defn- other-thread-sexpr [m] (get-sexpr :other-thread? m))
  (defn- executor-sexpr [m] (get-sexpr :executor m))
  (defn- label-sexpr [m] (get m :label "<no-label>")))

(defmacro with-log-task [m & body]
  (if enable-task-log
    `(let [label# ~(label-sexpr m)
           start# (cfg/log-start label#)
           res# (do ~@body)]
       (cfg/log-end start# label#)
       res#)
    (list* 'do body)))

(defmacro with-executor [m & body]
  (let [exc-sym (binding-sym m)]
    `(let [~exc-sym (Executors/newVirtualThreadPerTaskExecutor)]
       (try
         ~@body
         (finally
           (.shutdown ~exc-sym)
           (when-not (.awaitTermination ~exc-sym 5 TimeUnit/MINUTES)
             (throw (TimeoutException.))))))))

(defmacro with-context [m & body]
  ;; FIXME... currently this is just a no-op with regard to actually
  ;; setting the context
  `(do
     (when ~(other-thread-sexpr m)
       ;; compiler code running in unit tests should use the *out*
       ;; and *err* bound by ptest:
       (clojure.lang.Var/resetThreadBindingFrame
        (.binding-frame (tl-ctx* ~(local-context-sexpr m)))))
     
     ~@body)
  #_
  `(let [prev-ctx# (.get ctx)]
     (try
       (.set ctx ~local-ctx)
       ~@body
       (finally
         (.set ctx prev-ctx#)))))

(defmacro with-fork-or-on-thread [m & body]
  `(let [task# (fn ^Callable task [] (with-log-task ~m ~@body))]
     (if ~(other-thread-sexpr m)
       (.submit ~(executor-sexpr m) task#)
       ^Future (CompletableFuture/completedFuture (.call task#)))))

(defmacro with-fork [m & body]
  `(let [exc# ~(executor-sexpr m)
         other-thread?# (some? exc#)]
     (with-fork-or-on-thread
       {:executor exc#
        :other-thread? other-thread?#
        :label ~(label-sexpr m)}
       ~@body)))

(defmacro with-fork+context [m & body]
  ;; force context computation in outside thread
  `(let [local-ctx# ~(local-context-sexpr m)
         exc# ~(executor-sexpr m)
         other-thread?# (and (some? exc#) ~(other-thread-sexpr m))]
     (with-fork-or-on-thread
       {:executor exc#
        :other-thread? other-thread?#
        :label ~(label-sexpr m)}
       (with-context {:local-context local-ctx#, :other-thread? other-thread?#}
         ~@body))))


(defmacro start-solo-thread [m & body]
  `(let [frame# (.binding-frame (tl-ctx* ~(local-context-sexpr m)))]
     (-> (fn ^Runnable task-with-ctx []
           ;; compiler code running in unit tests should use the *out*
           ;; and *err* bound by ptest:
           (clojure.lang.Var/resetThreadBindingFrame frame#)
           (with-log-task ~m
             ~@body))
         (Thread/startVirtualThread))))
