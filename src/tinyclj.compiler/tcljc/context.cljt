;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.context ;note: this namespace cannot be required by tcljc.expr
  (:require
   [tcljc.config :as cfg]
   [tcljc.javabase :as jb]
   [tcljc.wrong :as wrong]
   [tcljc.runtime :as rt]
   [tcljc.expr :as x]
   [tcljc.io :as io]
   [tinyclj.string :as str])
  (:import
   (tcljc.expr BindingRef FnForm)
   (tcljc.io CompileIO)
   (clojure.lang Symbol Keyword IPersistentVector IPersistentMap ExceptionInfo)
   (java.lang.constant ClassDesc)
   (java.lang.invoke MethodHandles$Lookup)
   (java.util.concurrent Future BlockingQueue ArrayBlockingQueue
                         CompletableFuture TimeUnit ExecutorService)))

;;; See ptest/get-future: Do *NOT* call wait-for-result as part of a
;;; map.
(defn wait-for-result
  ([x]
   ;; Assumption: Nothing takes longer than this many seconds.  Right
   ;; now, a timeout probably means a program error instead of a large
   ;; program.
   (wait-for-result 5 x)) 
  ([^int seconds x]
   (if (instance? Future x)
     (try
       (.get ^Future x seconds TimeUnit/SECONDS)
       (catch java.util.concurrent.ExecutionException e ;unwrap
         (throw (or (.getCause e) ^Throwable e))))
     x)))

(defn get-result-now [x]        ;pre: computation of `x` has completed
  (wait-for-result 1 x))


(defn wait-for-fn-body ^"[Ltcljc.expr.ArityCode;" [^FnForm fn-form]
  (wait-for-result (.body-fut fn-form)))
(defn fn-body-now ^"[Ltcljc.expr.ArityCode;" [^FnForm fn-form]
  (.resultNow (.body-fut fn-form)))

;;; ------------------------------------------------------------------------

(definterface ICtx
  ;; `known-ns` maps a namespace name (a string) to a map of the
  ;; public globals of the namespace (a map string -> BindingRef).  It
  ;; is the transitive closure over all directly and indirectly
  ;; required namespaces.
  (get-known-ns ^IPersistentMap [])
  (merge-into-known-ns ^void [^IPersistentMap other-known-ns])
  
  (get-ns-alias-map ^IPersistentMap [])
  (put-ns-alias ^void [^String alias ^String ns-str])
  
  ;; If there is a def with the given name in this namespace, then
  ;; this map has an entry mapping its name to the BindingRef.
  (get-globals ^IPersistentMap [])
  ;; Define global `nm` as `x`.  The new name is immediatly visible,
  ;; but it can be shadowed by any local binding, even one that was
  ;; established before the def.  For example, ```(let [] (def y 1)
  ;; y)``` evaluates to `1`, while ```(let [x 2] (def x 1)
  ;; x)```. evaluates to `2`.
  (put-global ^void [^String nm ^BindingRef x])
  
  (get-imports ^IPersistentMap [])
  (put-import ^void [^Symbol nm ^Class cl])
  
  ;; Top-level forms are assigned consecutive index values.  This
  ;; enables synchronization of macro operations across forms, as well
  ;; as between compilation and bytecode emit threads.
  (get-tlf-idx ^int [])
  (increment-tlf-idx ^void []))

;;; ------------------------------------------------------------------------

(def msg-fatal-error -5)
;;; Contains the exception that killed the sending thread.  The
;;; receiving end should re-raise it.  This message is always followed
;;; by a `msg-close-queue`.

(def msg-close-queue -4)
;;; Send when the compile thread is exiting.  Usually this means
;;; compilation is done, but this message is also send after
;;; exceptional completion.

(def msg-flush-macro-definitions -3)
;;; Flushes macro definitions from completed top-level forms to class
;;; files.  No effect if there are no delayed but ready macros in the
;;; current segment.  Only works in deterministic mode.

(def msg-emit-tlf -2)
;;; Emit top-level form.  The `s` queue waits for the function bodies'
;;; futures before passing this message on to the `q` queue.  That is,
;;; once in `q` all compilation tasks of this top-level form have
;;; completed.

(def msg-macro-of-next-tlf -1)
;;; Registers a DelayedMacroFn that is part of the next `msg-emit-tlf`
;;; top-level form.  This tasks the emitter thread to deliver the
;;; macro's value eventually.  Messages of this type are sequenced
;;; with respect to `msg-emit-tlf`: the macro is defined after the
;;; previous message's top-level form, and is contained in the next
;;; message's top-level form.

(def req-define-class 1)
;;; Issued after compiling a `definterface*` or a `deftype*`.  Returns
;;; the class instance, although other classes it depends on may not
;;; be defined at this point.  Type descriptors like array types may
;;; reference the newly created class immediately.

(def req-flush-namespace-segment 3)
;;; Unconditionally flushes the current namespace segment's top-level
;;; forms and returns an expression that forces the namespace's
;;; initialization up to this point.  All macro values up to this
;;; point will be delivered eventually.


(deftype Msg [^int task ^Object x ^CompletableFuture promise])

(defn close-queue? ^boolean [^Msg msg]
  (= (.task msg) msg-close-queue))
(defn needs-response? ^boolean [^int task]
  (>= task 0))
(defn task-id* ^String [^int task]
  (case task
    #_msg-fatal-error -5 "msg-fatal-error"
    #_msg-close-queue -4 "msg-close-queue"
    #_msg-flush-macro-definitions -3 "msg-flush-macro-definitions"
    #_msg-emit-tlf -2 "msg-emit-tlf"
    #_msg-macro-of-next-tlf -1 "msg-macro-of-next-tlf"
    #_req-define-class 1 "req-define-class"
    #_req-flush-namespace-segment 3 "req-flush-namespace-segment"))
(defn task-id ^String [^Msg msg]
  (task-id* (.task msg)))

(defn send-msg ^Object [^BlockingQueue q ^int task ^Object x]
  (if (needs-response? task)
    (let [fut (CompletableFuture.)]
      (.put q (Msg. task x fut))
      (let [resp (wait-for-result fut)]
        (if (instance? Throwable resp)
          (throw ^Throwable resp)       ;receiving thread is in trouble
          resp)))
    (.put q (Msg. task x nil))))

;;; ------------------------------------------------------------------------

;;; The mutable (unlocked) namespace context is private to the
;;; namespace thread.  All updates and reads are confined to this
;;; single thread.  The immutable (locked) namespace context is shared
;;; across function-level compilation threads.  It isolates its users
;;; from concurrent or reordered updates in the namespace environment,
;;; effectively freezing the environment.
(deftype Ctx [^:unsynchronized-mutable ^IPersistentMap _known-ns
              ^:unsynchronized-mutable ^IPersistentMap _ns-alias
              ^:unsynchronized-mutable ^IPersistentMap _globals
              ^:unsynchronized-mutable ^IPersistentMap _imports
     
              ^String ns-str
              ^CompileIO compile-io
              
              ^BlockingQueue emit-q
     
              ^ExecutorService arity-task-scope
              ;; The executor for futures compiling an fn* arity (or
              ;; reify* method, or deftype method).

              ^boolean locked?
              ^:unsynchronized-mutable ^int _macro-count
              ^:unsynchronized-mutable ^int _tlf-idx]
  ICtx
  (get-known-ns [_]
    _known-ns)
  (merge-into-known-ns [_ other-known-ns]
    (if locked?
      (throw (IllegalStateException.))
      (set! _known-ns
            (reduce-kv (fn [acc k v]
                         (assert (string? k))
                         (assert (map? v))
                         (cond-> acc
                           (not (or (= ns-str k) (contains? acc k)))
                           (assoc k v)))
                       other-known-ns _known-ns))))
  
  (get-ns-alias-map [_]
    _ns-alias)
  (put-ns-alias [_ alias ns-str]
    (if locked?
      (throw (IllegalStateException.))
      (set! _ns-alias (assoc _ns-alias alias ns-str))))
    
  (get-globals [_]
    _globals)
  (put-global [_ nm x]
    (if locked?
      (throw (IllegalStateException.))
      (set! _globals (assoc _globals nm x))))
    
  (get-imports [_]
    _imports)
  (put-import [_ nm x]
    (if locked?
      (throw (IllegalStateException.))
      (set! _imports (assoc _imports nm x))))
  
  (get-tlf-idx [_]
    _tlf-idx)
  (increment-tlf-idx [_]
    (set! _tlf-idx (inc _tlf-idx))))

(defn mk-ctx* ^Ctx [^IPersistentMap initial-globals
                    ^IPersistentMap initial-imports
                    
                    ^String ns-str ^CompileIO compile-io
                                  
                    ^ExecutorService arity-task-scope]
  (let [known-ns {}
        ns-alias {}
        capacity-q 16 ;prevent compilation from reaching too far ahead
        emit-q (ArrayBlockingQueue. capacity-q)]
    (Ctx. known-ns ns-alias initial-globals initial-imports
          ns-str compile-io
          emit-q arity-task-scope false 0 0)))

(defn locked ^Ctx [^Ctx ctx]
  (if (.locked? ctx)
    ctx
    (Ctx. (.get-known-ns ctx) (.get-ns-alias-map ctx) (.get-globals ctx)
          (.get-imports ctx)
          (.ns-str ctx) (.compile-io ctx)
          (.emit-q ctx)
          (.arity-task-scope ctx) true 0
          (.get-tlf-idx ctx))))

(defn locked-in-class ^Ctx [^Ctx ctx ^Class ephemeral-class]
  (let [short-sym (jb/import-symbol-short ephemeral-class)
        imports (assoc (.get-imports ctx) short-sym ephemeral-class)]
    (Ctx. (.get-known-ns ctx) (.get-ns-alias-map ctx) (.get-globals ctx)
          imports (.ns-str ctx)
          (.compile-io-in (.compile-io ctx) ephemeral-class)
          (.emit-q ctx)
          (.arity-task-scope ctx) true 0
          (.get-tlf-idx ctx))))


#_(def ^:private ^ThreadLocal ctx (ThreadLocal.)) ;FIXME... want ExtentLocal
(defn tl-ctx* ^Ctx [tl-ctx] tl-ctx)

(defn global? ^boolean [tl-ctx]
  (not (.locked? (tl-ctx* tl-ctx))))

(defn this-ns ^String [tl-ctx]
  (.ns-str (tl-ctx* tl-ctx)))

(defn dyn-ld ^ClassLoader [tl-ctx]
  (.getClassLoader
   (-> (tl-ctx* tl-ctx) .compile-io .lookup-in-pkg .lookupClass)))

(defn compile-io ^CompileIO [tl-ctx]
  (.compile-io (tl-ctx* tl-ctx)))



;; Given a simple symbol or a string in type tag syntax, return the
;; imported class or the type instance from the dynamic class loader
;; of the application under construction.  Return nil if the type does
;; not exist.
(defn lookup-type ^Class [tp tl-ctx]
  (if (class? tp)
    tp
    (let [tl-ctx (tl-ctx* tl-ctx)]
      (or (.valAt (.get-imports tl-ctx) tp) ;symbols only
          (try
            (.resolveConstantDesc
             (if (symbol? tp)
               (ClassDesc/of (str tp))
               (rt/str-to-cld tp))
             (-> tl-ctx .compile-io .lookup-in-pkg))
            (catch ClassNotFoundException _
              nil))))))

(defn get-type ^Class [tp tl-ctx]
  (or (lookup-type tp tl-ctx)
      (wrong/class-not-found tp)))

;; Look up namespace qualified name resolved via `known-ns`.  If the
;; namespace part refers to a known namespace, then the simple name
;; must exist -- an error is signaled otherwise.  Nil is returned if
;; the namespace part is unknown.
(letfn [(lookup-global* [^Ctx ctx ^String ns ^String nm]
          (let [resolved-ns-nm (.valAt (.get-ns-alias-map ctx) ns ns)]
            (if (.equals (.ns-str ctx) resolved-ns-nm)
              (or (.valAt (.get-globals ctx) nm nil) ;same as for (nil? ns)
                  (wrong/unresolved resolved-ns-nm (symbol ns nm)))
              (when-some [publics (.valAt (.get-known-ns ctx) resolved-ns-nm nil)]
                (or (.valAt ^IPersistentMap publics nm nil)
                    (wrong/unresolved resolved-ns-nm (symbol ns nm)))))))]
  (defn lookup-sname-global ^BindingRef [^Symbol nm tl-ctx]
    (.valAt (.get-globals (tl-ctx* tl-ctx)) (name nm) nil))
  (defn lookup-qname-global ^BindingRef [^Symbol nm tl-ctx]
    (lookup-global* (tl-ctx* tl-ctx) (namespace nm) (name nm))))

(defn put-global ^BindingRef [^String nm ^BindingRef x tl-ctx]
  (.put-global (tl-ctx* tl-ctx) nm x))
