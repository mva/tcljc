(ns tcljc.emitter
  (:require
   [tcljc.config :as cfg]
   [tcljc.classfile :as cf]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.wrong :as wrong]   
   [tcljc.reader :as rd]
   [tcljc.context :as ctx]
   [tcljc.expr :as x]
   [tcljc.predefined :as predefined]
   [tcljc.publics :as publics]
   [tcljc.emitter.beachhead :as beachhead]
   [tcljc.emitter.namespace :as nmsp]
   [tcljc.emitter.prepare :as prepare]
   [tcljc.emitter.bytecode :as bytecode]
   [tcljc.emitter.emitfn :as emitfn]
   [tcljc.emitter.classes :as classes]
   [tcljc.emitter.export :as export]
   [tinyclj.string :as str])
  (:import
   (tcljc.classfile CHR ClassDef)
   (tcljc.expr FnCode DeftypeDef MethodDef)
   (tcljc.compiler DelayedMacroFn)
   (tcljc.emitter.namespace Namespace)
   (tcljc.emitter.emitfn FnSpec)
   (tcljc.emitter.prepare TopLevelForm)
   (tcljc.context FnRequireNamespace Ctx Msg)
   (tcljc.expr Expr Binding BindingRef FnForm)
   (clojure.lang ISeq IPersistentMap IPersistentVector)
   (jdk.incubator.concurrent StructuredTaskScope)
   (jdk.classfile Classfile ClassBuilder CodeBuilder TypeKind)
   (java.nio.file Path)
   (java.lang.constant ClassDesc MethodTypeDesc)
   (java.lang.invoke MethodHandles MethodHandles$Lookup MethodHandle)
   (java.time Instant)
   (java.util Map HashMap HashSet ArrayDeque)
   (java.util.concurrent Future CompletableFuture ConcurrentHashMap
                         BlockingQueue)
   (java.util.function Consumer)))

(deftype BuildEnv
    [^ClassLoader app-ld
     ;; Source files are obtained from this loader via
     ;; `.getResource`.  If the parent classloader is
     ;; :system, then `app-ld` also provides ahead-of-time
     ;; compiled class files.  It must never return classes
     ;; from the destination directory, or compilation of
     ;; modified classes will silently stop.

     ^MethodHandles$Lookup rt-lookup
     ;; Classes and methods from module tinyclj.rt are
     ;; accessed via this lookup.

     ^IPersistentMap builtin-nmsp
     ;; Builtin namespaces that can be required directly from
     ;; any namespace (maps string -> Namespace).

     ^Path dest-dir
     ;; When set, then class files are also written to this
     ;; directory.
              
;;; Lifetime of single build run of "watch mode":
     ^ClassLoader dyn-ld
     ^CHR dyn-chr
              
;;; For unit tests:
     binding-frame            ;to carry *out* and *err* into threads
     injected-file-forms      ;forms used in lieu of reading from file
     arender-to               ;maps class owner string to class data
     ]
  tcljc.emitter.namespace.IBuildEnv
  (rt-lookup [_]
    rt-lookup)
  (resolve-rpath [_ rpath]
    (if injected-file-forms
      (cfg/path-url rpath)
      (.getResource app-ld (str rpath))))
  (forms-reader [_ rurl]
    (if-some [xs (get injected-file-forms rurl)]
      (rd/mk-seq-reader xs)
      (rd/mk-reader (rd/tokenize rurl)))))

(defn mk-build-env
  (^BuildEnv [^ClassLoader app-ld  ^Path dest-dir ^ClassLoader dyn-ld
              ^IPersistentMap builtin-nmsp]
   (mk-build-env app-ld dest-dir dyn-ld builtin-nmsp nil nil))
  (^BuildEnv [^ClassLoader app-ld  ^Path dest-dir ^ClassLoader dyn-ld
              ^IPersistentMap builtin-nmsp injected-file-forms arender-to]
   (BuildEnv. app-ld (cfg/get-rt-lookup app-ld) builtin-nmsp dest-dir
              dyn-ld (cf/mk-chr dyn-ld)
              (ctx/clone-thread-binding-frame) injected-file-forms arender-to)))

(def first-segm-id 100)
(def ns-class-name "__ns")

(deftype SegmState [^BuildEnv env
                    ^Ctx ctx
                    ^String source-file
                    
                    ^int segm-id
                    ^ClassDesc segm-cld
                    ^IPersistentVector tlfv ;of TopLevelForm
                    ^ArrayDeque !delayed-macros ;shared across SegmState
                    ^HashSet !private-names ;shared across SegmState
                    
                    ^IPersistentVector bytesv ;nil if bytes are not tracked
                    fn-class-futv])     ;vector of Future of bytes

(defn- segment-lookup ^MethodHandles$Lookup [^SegmState segm]
  (-> segm .ctx .lookup-in-pkg))
(defn- segment-ns-str ^String [^SegmState segm]
  (-> segm .ctx .ns-str))
(defn- segment-name ^String [^SegmState segm ^int id-delta]
  (str (segment-ns-str segm) "." ns-class-name (+ (.segm-id segm) id-delta)))
(defn- segment-cld ^ClassDesc [^SegmState segm ^int id-delta]
  (if (zero? id-delta)
    (.segm-cld segm)
    (ClassDesc/of (segment-name segm id-delta))))
(defn- segment-chr ^CHR [^SegmState segm]
  (-> segm .env .dyn-chr))

(defn with-tlf ^SegmState [^SegmState segm ^TopLevelForm tlf]
  (SegmState. (.env segm) (.ctx segm) (.source-file segm)
              (.segm-id segm) (.segm-cld segm) (conj (.tlfv segm) tlf)
              (.!delayed-macros segm) (.!private-names segm)
              (.bytesv segm) (.fn-class-futv segm)))
(defn with-bytes ^SegmState [^SegmState segm ^int id-delta
                             ^boolean clear-tlfv? ^bytes bs ^Class segm-cl]
  (let [bytesv' (when-some [bsv (.bytesv segm)]
                  (conj bsv bs))]
    (SegmState. (.env segm) (.ctx segm) (.source-file segm)
                (+ (.segm-id segm) id-delta) (segment-cld segm id-delta)
                (if clear-tlfv? [] (.tlfv segm))
                (.!delayed-macros segm) (.!private-names segm) bytesv'
                (.fn-class-futv segm))))
(defn- with-fn-class-fut ^SegmState [^SegmState segm ^Future fut]
  (SegmState. (.env segm) (.ctx segm) (.source-file segm)
              (.segm-id segm) (.segm-cld segm) (.tlfv segm)
              (.!delayed-macros segm) (.!private-names segm)
              (.bytesv segm) (conj (.fn-class-futv segm) fut)))
(defn- with-collect-fn-classes ^SegmState [^SegmState segm]
  (let [bytesv' (if-some [bytesv (.bytesv segm)]
                  (into (.bytesv segm) (map ctx/wait-for-result)
                        (.fn-class-futv segm))
                  (run! ctx/wait-for-result (.fn-class-futv segm)))]
    (SegmState. (.env segm) (.ctx segm) (.source-file segm)
                (.segm-id segm) (.segm-cld segm) (.tlfv segm)
                (.!delayed-macros segm) (.!private-names segm) bytesv' [])))

(defn- capstone-cld ^ClassDesc [^SegmState segm]
  (ClassDesc/of (-> segm .ctx .ns-str) ns-class-name))

(defn with-force-clinit ^ClassBuilder [^ClassBuilder cb]
  ;; static method with zero parameters, cannot clash with a
  ;; regular function's method name because of the suffix "~1";
  ;; FIXME... drop this and use requires~1 instead?
  (.withMethodBody cb rt/name-force-clinit rt/mtd-void-void
                   (bit-or Classfile/ACC_PUBLIC Classfile/ACC_STATIC
                           Classfile/ACC_FINAL)
                   (cf/with-xbh [xb] (.return_ xb))))

(defn- build-segment ^bytes [^SegmState segm ^boolean force-clinit?]
  (let [clinit (fn []
                 (let [ns-str (segment-ns-str segm)]
                   (-> []
                       (cond-> (= (.segm-id segm) first-segm-id)
                         (conj (x/invoke-xref
                                jb/void [(x/const String ns-str)]
                                rt/mhd-createNamespace)))
                       (into (map #(.top-level-form ^TopLevelForm %))
                             (.tlfv segm))
                       (cond-> (cfg/core-lib? ns-str)
                         (conj (x/invoke-xref
                                jb/void [(x/const String (segment-name segm 0))]
                                rt/mhd-markCoreInitialization)))
                       (x/progn*))))
        segm-cld (segment-cld segm 0)]
    (cf/build
     segm-cld
     (cf/with-cbh [cb]
       (when-not (= (.segm-id segm) first-segm-id)
         (.withSuperclass cb (segment-cld segm -1)))
       (doseq [^TopLevelForm tlf (.tlfv segm)]
         ;; emit fields and methods of all global bindings, delivering
         ;; their loads in order
         (doseq [^Binding global-b (.global-bs tlf)]
           (bytecode/emit-global-b cb segm-cld global-b))
         (doseq [^FnSpec fspec (.fn-specs tlf)]
           (.fn-methods (-> fspec .fn-form .!fnc .emit-plan) cb)))
       (-> (.withFlags cb Classfile/ACC_PUBLIC)
           (cf/with-source-file (.source-file segm))
           (cond-> force-clinit? (with-force-clinit))
           (.withMethodBody cf/class-initializer-name rt/mtd-void-void
                            (bit-or Classfile/ACC_PUBLIC Classfile/ACC_STATIC)
                            (cf/with-xbh [xb]
                              (bytecode/emit-body xb (clinit))))))
     (segment-chr segm))))

(defn with-main ^ClassBuilder [^ClassBuilder cb ^SegmState segm]
  (letfn [(main-function ^BindingRef []
            (let [globals (.get-globals (.ctx segm))]
              (when-some [bref (get globals "-main" nil)]
                (when (some? (x/root-fn-form bref))
                  bref))))]
    (when-some [bref (main-function)]
      (let [main-mtd (MethodTypeDesc/of rt/void (.arrayType rt/String))
            flags (bit-or Classfile/ACC_PUBLIC Classfile/ACC_STATIC
                          Classfile/ACC_FINAL)
            xbh (cf/with-xbh [xb]
                  (let [mtd (MethodTypeDesc/of rt/object rt/IFn rt/object)]
                    (-> (cf/ld-insn xb (x/deref-load bref))
                        (.aload 0)
                        (.invokestatic rt/RT "apply" mtd)
                        (.pop)
                        (.return_))))]
        (.withMethodBody cb "main" main-mtd flags xbh)))))

(defn- build-capstone ^bytes [^SegmState segm ^Namespace nmsp]
  (let [requires-xb (cf/with-xbh [xb]
                      (let [s (if (nmsp/core-lib? nmsp)
                                "" ;suppress internal details of core lib
                                (str/join "," (sort (.req-strs nmsp))))]
                        (-> xb (.constantInstruction s) (.areturn))))]
    (cf/build
     (capstone-cld segm)
     (cf/with-cbh [cb]
       (-> (.withFlags cb Classfile/ACC_PUBLIC)
           (.withSuperclass (segment-cld segm -1))
           (cf/with-source-file (.source-file segm))
           (with-force-clinit)
           (.withMethodBody rt/name-requires rt/mtd-String-void
                            (bit-or Classfile/ACC_PUBLIC Classfile/ACC_STATIC
                                    Classfile/ACC_FINAL)
                            requires-xb)
           (with-main segm)))
     (segment-chr segm))))

(defn- build-class ^bytes [^ClassDef cdef ^String source-file ^CHR dyn-chr]
  (.register! dyn-chr (.ch-info cdef))
  (cf/build
   (-> cdef .ch-info .thisClass)
   (cf/with-cbh [cb]
     (-> (.withFlags cb (.flags cdef))
         (.withSuperclass (-> cdef .ch-info .superClass))
         (.withInterfaceSymbols (.itfs cdef))
         (cf/with-source-file source-file))
     (run! #(.accept ^Consumer % cb) (.cb-handlerv cdef)))
   dyn-chr))

(defn- build-deftype ^ClassDef [^DeftypeDef dtdef]
  (letfn [(method-cbh [^MethodDef mdef]
            (cf/with-cbh [cb]
              (let [at (.at mdef)
                    this-class (-> dtdef .cdef .ch-info .thisClass)
                    ld-this (cf/ld-st-receiver this-class
                                               (name (.this-name at)))
                    xbh (cf/with-xbh [xb]
                          (.deliver-load (.this-bref mdef) ld-this)
                          (cf/st-insn xb ld-this true) ;emit LocalVariable entry
                          (bytecode/emit-body xb ld-this at 0
                                              (.body-expr mdef)))]
                (.withMethodBody cb (.method-name at) (x/at-mtd at)
                                 (.flags mdef) xbh))))]
    (let [cdef (.cdef dtdef)]
      (cf/with-methods cdef (map method-cbh (.method-defs dtdef))))))

(defn- mk-first-segm ^SegmState [^BuildEnv env ^Ctx ctx ^boolean collect-bytesv?]
  (let [rurl (ctx/this-rurl ctx)
        source-file (when (and cfg/enable-line-numbers (some? rurl))
                      (let [s (.getPath rurl)]
                        (subs s (inc (.lastIndexOf s "/")))))
        cld (ClassDesc/of (.ns-str ctx)
                          (str ns-class-name first-segm-id))]
    (SegmState. env ctx source-file first-segm-id cld
                [] (ArrayDeque.) (HashSet.) (when collect-bytesv? []) [])))

(defn- emit-segments ^Namespace [^SegmState segm
                                 ^StructuredTaskScope nmsp-task-scope]
  (letfn [(take-msg ^Msg [^BlockingQueue q]
            (.take q))
          (fn-class-future ^Future [^SegmState segm ^FnCode fnc ^Consumer cbh]
            (let [f-fn (^Callable fn []
                        (when cfg/fork-work?
                          (ctx/reset-thread-binding-frame (.ctx segm)))
                        (let [this-class ^ClassDesc (.ld-clx fnc)
                              bs (cf/build this-class cbh (segment-chr segm))]
                          (cfg/write-and-define-class (-> segm .env .dest-dir)
                                                      (segment-lookup segm)
                                                      this-class bs)
                          ;; return bytes (not class!) once the class has been
                          ;; defined into the classloader
                          bs))]
              (if cfg/fork-work?
                (.fork nmsp-task-scope f-fn)
                (CompletableFuture/completedFuture (.call f-fn)))))
          (schedule-fn-class ^SegmState [^SegmState segm ^FnCode fnc]
            (if-some [cbh (.fn-cbh (.emit-plan fnc))]
              (with-fn-class-fut segm (fn-class-future segm fnc cbh))
              segm))
          (schedule-fn-classes ^SegmState [^SegmState segm ^TopLevelForm tlf]
            (let [segm (with-tlf segm tlf)
                  dyn-chr (segment-chr segm)
                  fncs (map #(-> ^FnSpec % .fn-form .!fnc) (.fn-specs tlf))]
              (doseq [^FnCode fnc fncs :let [ep (.emit-plan fnc)]]
                (when-some [ch-info (.fn-class-hierarchy-info ep)]
                  (.register! dyn-chr ch-info)))
              (reduce schedule-fn-class segm fncs)))
          (delayed-but-ready ^DelayedMacroFn [^SegmState segm]
            (when-some [mfn ^DelayedMacroFn (.peekFirst (.!delayed-macros segm))]
              (when (.realized? (.bref mfn))
                mfn)))
          (load-bref ^Object [^Ctx ctx ^BindingRef bref]
            (let [global-mh (.mh-if-global (x/deref-load bref)
                                           (.lookup-in-pkg ctx))]
              (if (nil? (.apply-mh ctx))
                ;; compiler and application share runtime?
                ;; careful, this is a very brittle method type!
                ^tinyclj.lang.StaticFnMh (.invokeExact global-mh)
                (.invoke global-mh))))
          (write-segment ^SegmState [^SegmState segm ^boolean force-clinit?]
            (if (and (not force-clinit?) (zero? (count (.tlfv segm))))
              segm                    ;nothing to do for empty segment
              ;; Note: There is no point to move the segment class into
              ;; a future, because it is immediately required -- either
              ;; for a macro value or for namespace completion.
              (let [bs (build-segment segm force-clinit?)
                    ;; macros from this segment class can be invoked
                    ;; once it is defined: make sure there are no
                    ;; pending dependencies
                    segm (with-collect-fn-classes segm)
                    cl (cfg/write-and-define-class (-> segm .env .dest-dir)
                                                   (segment-lookup segm)
                                                   (segment-cld segm 0) bs)]
                (loop []
                  (when-some [mfn (delayed-but-ready segm)]
                    (when-not (.complete (.value-promise mfn)
                                         (load-bref (.ctx segm) (.bref mfn)))
                      (throw (IllegalStateException.)))
                    (.removeFirst (.!delayed-macros segm))
                    (recur)))
                (with-bytes segm +1 true bs cl))))
          (write-and-define ^SegmState [^SegmState segm ^ClassDef cdef
                                        ^CompletableFuture promise]
            (let [bs (build-class cdef (.source-file segm) (segment-chr segm))
                  this-class (-> cdef .ch-info .thisClass)
                  cl (cfg/write-and-define-class (-> segm .env .dest-dir)
                                                 (segment-lookup segm)
                                                 this-class bs)]
              (.complete promise cl)
              (with-bytes segm 0 false bs nil)))
          (write-capstone ^Namespace [^SegmState segm ^Namespace nmsp]
            (let [bs (build-capstone segm nmsp)
                  cl (cfg/write-and-define-class
                      (-> segm .env .dest-dir)
                      (segment-lookup segm)
                      (capstone-cld segm) bs)
                  segm (with-bytes segm 0 true bs cl)]
              (nmsp/with-capstone nmsp cl (.bytesv segm))))
          
          (fn-specs-from-methods ^IPersistentVector [mdefs ^SegmState segm]
            (reduce
             (fn collect-fn-specs [acc ^MethodDef mdef]
               (let [body (.body-expr mdef)
                     tlf (prepare/collect-fn-info (.!private-names segm) body)]
                 (into acc (.fn-specs tlf))))
             [] mdefs))
          (complete-req! ^SegmState [^SegmState segm ^int task x
                                     ^CompletableFuture promise]
            (condp = task
              ctx/msg-emit-tlf
              (let [tlf (prepare/collect-fn-info (.!private-names segm) x)]
                (prepare/prepare-fns! (.segm-cld segm) (.source-file segm)
                                      (.fn-specs tlf))
                (prepare/prepare-globals! (.segm-cld segm)
                                          (.global-bs tlf))
                (cond-> (schedule-fn-classes segm tlf)
                  (and (not (cfg/collect-macro-definitions?))
                       (some? (delayed-but-ready segm)))
                  (write-segment false)))

              ctx/msg-macro-of-next-tlf
              (do (.addLast (.!delayed-macros segm) x)
                  segm)

              ctx/msg-flush-macro-definitions
              (do (assert (cfg/collect-macro-definitions?))
                  (cond-> segm
                    (delayed-but-ready segm) (write-segment false)))
              
              ctx/req-define-class
              (if (instance? ClassDef x)
                (write-and-define segm ^ClassDef x promise)
                (let [dtdef ^DeftypeDef x
                      fn-specs (fn-specs-from-methods (.method-defs dtdef) segm)
                      tlf (TopLevelForm. fn-specs nil x/expr-empty)]
                  (prepare/prepare-fns! (.segm-cld segm) (.source-file segm)
                                        fn-specs)
                  (-> (schedule-fn-classes segm tlf)
                      (write-and-define (build-deftype dtdef) promise))))
              
              ctx/req-flush-namespace-segment
              (do (.complete promise (x/invoke-force-clinit (.segm-cld segm)))
                  (write-segment segm true))
              
              ctx/msg-fatal-error
              (throw ^Throwable x)
              
              #_else (throw (IllegalStateException. (str task)))))]

    (let [msg (take-msg (-> segm .ctx .emit-q))]
      (if (= (.task msg) ctx/msg-close-queue)
        (-> segm (write-segment false) (write-capstone (.x msg)))
        (recur (complete-req! segm (.task msg) (.x msg) (.promise msg))
               nmsp-task-scope)))))

(defn mk-provided-nmsp
  ([]
   (reduce-kv nmsp/assoc-provided {} predefined/implicit-known-ns))
  ([^String ns-str ^IPersistentMap publics]
   (nmsp/assoc-provided (mk-provided-nmsp) ns-str publics)))

(defn- init-known-ns ^void [^Ctx ctx ^IPersistentMap provided-nmsp]
  (doseq [[ns-str nmsp] provided-nmsp]
    (assert (string? ns-str))
    (assert (instance? Namespace nmsp)))
  (let [primitive-publics (-> (get provided-nmsp cfg/primitive-ns-str)
                              (nmsp/publics-of cfg/primitive-ns-str))]
    (doto ctx
      ;; primitive namespace can be used without require-ing it
      (.merge-into-known-ns {cfg/primitive-ns-str primitive-publics})
      (.put-ns-alias cfg/primitive-ns-str cfg/primitive-ns-str))))

;; Note: Exceptions are reported in the order in which they occur in
;; the emitter thread.  The "compile namespace" thread can fork of an
;; arbitrary number of futures of its own, and the emitter retrieves
;; their result/exception in emit order.
(defn- emit-namespace ^Namespace [^SegmState segm ^IPersistentMap provided-nmsp
                                  ^StructuredTaskScope nmsp-task-scope]
  (init-known-ns (.ctx segm) provided-nmsp)
  (cfg/prepare-class-directory (.dest-dir (.env segm))
                               (ctx/this-ns (.ctx segm)))
  (let [env (.env segm)
        ctx (.ctx segm)
        c-fn (^Callable fn []
              (ctx/reset-thread-binding-frame (.ctx segm))
              (try
                (let [nsd (nmsp/compile-thread env provided-nmsp ctx)]
                  ;; regular completion: pass back result in first
                  ;; `close-queue` message
                  (ctx/send-msg (.emit-q ctx) ctx/msg-close-queue nsd))
                (catch Throwable t ;no re-raise and wait for close-queue
                  (ctx/send-msg (.emit-q ctx) ctx/msg-fatal-error t))
                (finally              ;there is always a `close-queue`
                  (ctx/send-msg (.emit-q ctx) ctx/msg-close-queue nil))))]
    (let [c-thread (.fork nmsp-task-scope c-fn)
          nmsp (emit-segments segm nmsp-task-scope)]
      (.get c-thread)                   ;pick up any exceptions
      nmsp)))

;;; ------------------------------------------------------------------------

(defn- try-load-capstone ^Class [^BuildEnv env ^String ns-str]
  (try
    (Class/forName (str ns-str "." ns-class-name) false (.dyn-ld env))
    (catch ClassNotFoundException _
      nil)))

(letfn [(extract-req-strs ^"[Ljava.lang.String;" [^Class cl]
          (let [s (-> (.getDeclaredMethod cl rt/name-requires)
                      ^String (.invoke nil))]
            (if (= s "")
              (new "[Ljava.lang.String;" 0)
              (into-array String (str/split s #",")))))]
  (defn- import-from-capstone ^Namespace [^Namespace nmsp ^Class capstone]
    (init-known-ns (.ctx nmsp) (.provided-nmsp nmsp))
    
    ;; keep in sync with namespace/add-require-deps
    (let [ns-str (.getPackageName capstone)
          req-strs (extract-req-strs capstone)
          n (count req-strs)
          a (new objects n)
          apublics (new "[Lclojure.lang.IPersistentMap;" n)
          provide-nmsp (.provided-nmsp nmsp)]
      ;; schedule namespaces in parallel
      (dotimes [i n]
        (let [req-str (aget req-strs i)]
          (aset a i (or (get (.provided-nmsp nmsp) req-str)
                        (-> (.require-namespace (.ctx nmsp))
                            (.schedule req-str provide-nmsp))))))
      ;; wait for and pick up namespace outcomes
      (dotimes [i n]                    ;avoid stack frame spamming
        (let [ns-str (aget req-strs i)]
          (aset apublics i (-> (nmsp/nmsp-of (aget a i) ns-str)
                               (nmsp/publics-of ns-str)))))
      ;; collect all "require"d globals and then add any new globals
      ;; to this namespace
      (loop [publics-map {}, i 0]
        (if (= i n)
          (.merge-into-known-ns (.ctx nmsp) publics-map)
          (let [ns-str (aget req-strs i)
                ekns (.exported-known-ns (nmsp/nmsp-of (aget a i) ns-str))]
            (recur (merge publics-map ekns) (inc i)))))
      (nmsp/with-capstone nmsp capstone nil))))

;;; ------------------------------------------------------------------------

(defn- get-apply-mh ^MethodHandle [^MethodHandles$Lookup l]
  (let [compiler-rt-witness tinyclj.lang.AFnMh
        app-rt-witness (.resolveConstantDesc rt/AFn l)
        shared-runtime? (identical? compiler-rt-witness app-rt-witness)]
    (if shared-runtime?
      nil
      (ctx/resolve-mh l rt/mhd-applyMacroMapped))))

(defn mk-ctx ^Ctx [^BuildEnv env
                   ^FnRequireNamespace require-namespace
                                 
                   ^IPersistentMap initial-globals
                   ^String ns-str
                                 
                   ^StructuredTaskScope arity-task-scope]
  (let [rpath (cfg/nmsp-rpath ns-str)
        rurl (or (.resolve-rpath env rpath)
                 (wrong/file rpath))
        ;; the namespace context needs a lookup into the package of
        ;; the namespace
        l (.rt-lookup env)
        lookup-in-pkg (beachhead/mk-lookup-in-pkg l (.dyn-ld env) ns-str)]
    (ctx/mk-ctx* initial-globals ns-str rpath rurl 
                 lookup-in-pkg require-namespace (get-apply-mh l)
                 arity-task-scope (.binding-frame env))))

(defn- mk-ctx-import ^Ctx [^BuildEnv env
                           ^FnRequireNamespace require-namespace
                           ^Class capstone]
  (let [ns-str (.getPackageName capstone)
        rpath (cfg/nmsp-rpath ns-str)
        l (.rt-lookup env)
        lookup-in-pkg (.in (MethodHandles/publicLookup) capstone)]
    (ctx/mk-ctx* {} ns-str rpath nil
                 lookup-in-pkg require-namespace (get-apply-mh l) nil
                 (.binding-frame env))))

(defn compile-and-emit
  (^Namespace [^BuildEnv env ^String ns-str ^FnRequireNamespace require-fn
               ^boolean collect-bytesv? ^IPersistentMap provided-nmsp
               ^IPersistentMap globals]
   (let [nmsp-task-scope (StructuredTaskScope.)]
     (try
       (let [arity-task-scope (when-not cfg/deterministic-namespace-compile?
                                nmsp-task-scope)
             tl-ctx (mk-ctx env require-fn globals ns-str arity-task-scope)]
         (-> (mk-first-segm env tl-ctx collect-bytesv?)
             (emit-namespace provided-nmsp nmsp-task-scope)))
       (catch Throwable t
         (.shutdown nmsp-task-scope)    ;make join return immediately
         (throw t))
       (finally
         (.joinUntil nmsp-task-scope (-> (Instant/now) (.plusSeconds 5)))
         (.close nmsp-task-scope)))))
  (^Namespace [^BuildEnv env ^String ns-str ^FnRequireNamespace require-fn
               ^boolean collect-bytesv? ^IPersistentMap provided-nmsp]
   (let [globals (predefined/initial-globals-for (.rt-lookup env) ns-str)]
     (compile-and-emit env ns-str require-fn collect-bytesv? provided-nmsp
                       globals))))

(defn- emit-namespaces-mt ^IPersistentMap [^BuildEnv env ns-strs
                                           ^StructuredTaskScope build-task-scope]
  (let [namespaces-q (java.util.concurrent.LinkedBlockingQueue.)
        !futs (ConcurrentHashMap.)      ;updated by this thread only
        require-fn (^FnRequireNamespace fn [ns-str provided-nmsp]
                    (or
                     ;; First peek into the current namespace map, and
                     ;; return a known namespace immediately.
                     (.get !futs ns-str)
                     ;; For an unregistered namespace, delegate via message
                     ;; exchange/promise to the top-level thread's
                     ;; `namespace-loop`.
                     (let [cf (CompletableFuture.)]
                       (.put namespaces-q [ns-str provided-nmsp cf])
                       (ctx/wait-for-result 1 cf))))]
    (letfn [(fork-namespace ^Future [^String ns-str provided-nmsp]
              (.fork
               build-task-scope
               (^Callable fn []
                (ctx/reset-thread-binding-frame (.binding-frame env))
                (or            ;import from dyn-ld or compile and emit
                 (when-some [cl (try-load-capstone env ns-str)]
                   (try
                     (-> (mk-ctx-import env require-fn cl)
                         (nmsp/mk-imported provided-nmsp)
                         (import-from-capstone cl))
                     (finally     ;signal completion to namespace loop
                       (.put namespaces-q [ns-str]))))
                 
                 (do #_(prn :namespace-start ns-str)
                     (try
                       (compile-and-emit env ns-str require-fn false
                                         provided-nmsp)
                       (finally   ;signal completion to namespace loop
                         (.put namespaces-q [ns-str]))))))))
            
            (fork-all! ^int [ns-strs] ;returns number of new namespaces
              ;; this thread owns !futs and there are no concurrent
              ;; updates; using size() is ok, and test followed by
              ;; put as well
              (let [n (.size !futs)]
                (doseq [ns-str ns-strs
                        :when (not (.containsKey !futs ns-str))
                        :let [fut (fork-namespace ns-str (.builtin-nmsp env))]]
                  (.put !futs ns-str fut))
                (- (.size !futs) n)))]
      
      ;; In the first phase, force discovery of core library.  Only
      ;; after it has completed handle all namespaces from `ns-strs`
      ;; -- until the new namespaces have completed as well.
      (loop [n (fork-all! [cfg/core-lib])] ;`n` counts in-progress tasks
        (if (zero? n)                ;all pending tasks have completed
          (let [d (fork-all! ns-strs)] ;(re-)add all top-level namespace tasks
            (when (pos? d)       ;exit loop if no new tasks were added
              (recur d)))
          (let [[^String ns-str provided-nmsp ^CompletableFuture cf] (.take namespaces-q)]
            (if (some? cf)
              (if-some [fut (.get !futs ns-str)]
                (do (.complete cf fut)
                    (recur n))
                (let [fut (fork-namespace ns-str provided-nmsp)]
                  (.put !futs ns-str fut)
                  (.complete cf fut)
                  (recur (inc n))))
              (do #_(prn :namespace-end ns-str)
                  (recur (dec n))))))))
    
    ;; If any namespace failed, then throw the first exception in
    ;; depth-first traversal order.  This should be deterministic,
    ;; even if there are errors in multiple namespaces and the
    ;; original exceptions are reported in arbitrary order.  It should
    ;; also report the same error in multi-threaded mode as in
    ;; single-threaded mode.
    (let [a ^"[Ljava.lang.String;" (into-array ns-strs)]
      ;; loop over array to avoid stack frame spamming
      (dotimes [i (alength a)]
        (ctx/get-result-now (.get !futs (aget a i))))) ;forces exception
    (into {} !futs)))

(defn- emit-namespaces-st ^IPersistentMap [^BuildEnv env ns-strs]
  (let [!futs (java.util.HashMap.)      ;single-threaded!
        require-fn
        (reify FnRequireNamespace
          (schedule [this ns-str provided-nmsp]
            (or (.get !futs ns-str)

                (when-some [cl (try-load-capstone env ns-str)]
                  (.put !futs ns-str nmsp/marker-depth-first-path)
                  (let [x (-> (mk-ctx-import env this cl)
                              (nmsp/mk-imported provided-nmsp)
                              (import-from-capstone cl))]
                    (.put !futs ns-str x)
                    x))
                 
                (do (.put !futs ns-str nmsp/marker-depth-first-path)
                    #_(prn :namespace-start ns-str)
                    (let [x (compile-and-emit env ns-str this false
                                              provided-nmsp)]
                      #_(prn :namespace-end ns-str)
                      (.put !futs ns-str x)
                      x)))))]
    ;; first, force discovery of core library
    (.schedule require-fn cfg/core-lib (.builtin-nmsp env))
    ;; then handle all namespaces from `ns-strs`
    (let [a ^"[Ljava.lang.String;" (into-array ns-strs)]
      ;; loop over array to avoid stack frame spamming
      (dotimes [i (alength a)]
        (.schedule require-fn (aget a i) (.builtin-nmsp env))))
    (into {} !futs)))

(defn emit-namespaces ^IPersistentMap [^BuildEnv env ns-strs]
  (if cfg/deterministic-namespace-compile?
    (emit-namespaces-st env ns-strs)
    (let [build-task-scope (StructuredTaskScope.)]
      (try
        (emit-namespaces-mt env ns-strs build-task-scope)
        (catch Throwable t
          (.shutdown build-task-scope)      ;make join return immediately
          (throw t))
        (finally
          (.joinUntil build-task-scope (-> (Instant/now) (.plusSeconds 5)))
          (.close build-task-scope))))))

(defn summary ^IPersistentMap [^IPersistentMap ns-futs]
  (into {}
        (map (fn [^java.util.Map$Entry e]
               [(.getKey e) (ctx/get-result-now (.getValue e))]))
        ns-futs))

(defn success? ^boolean [^IPersistentMap ns-futs ns-strs]
  (letfn [(nmsp-exists? ^boolean [^String ns-str]
            (when-some [x (get ns-futs ns-str)]
              (not (instance? Throwable x))))]
    (every? nmsp-exists? ns-strs)))

