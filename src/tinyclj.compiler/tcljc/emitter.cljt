;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.emitter
  (:require
   [tcljc.config :as cfg]
   [tcljc.classfile :as cf]
   [tcljc.io :as io]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.wrong :as wrong]   
   [tcljc.context :as ctx]
   [tcljc.expr :as x]
   [tcljc.predefined :as predefined]
   [tcljc.emitter.namespace :as nmsp]
   [tcljc.emitter.prepare :as prepare]
   [tcljc.emitter.bytecode :as bytecode]
   [tcljc.emitter.emitfn :as emitfn]
   [tcljc.emitter.classes :as classes]
   [tinyclj.string :as str])
  (:import
   (tcljc.classfile ClassDef)
   (tcljc.expr FnCode DeftypeDef MethodDef)
   (tcljc.io BuildIO NmspIO CompileIO NmspBuilder Msg)
   (tcljc.compiler DelayedMacroFn)
   (tcljc.emitter.namespace Namespace)
   (tcljc.emitter.emitfn FnSpec)
   (tcljc.emitter.prepare TopLevelForm)
   (tcljc.context Ctx)
   (tcljc.expr Expr Binding BindingRef FnForm)
   (clojure.lang ISeq IPersistentMap IPersistentVector IPersistentSet
                 ExceptionInfo)
   (java.lang.classfile ClassFile ClassBuilder CodeBuilder TypeKind)
   (java.lang.constant ClassDesc MethodTypeDesc ConstantDescs)
   (java.util HashMap HashSet ArrayDeque)
   (java.util.concurrent Future CompletableFuture)
   (java.util.function Consumer)))

(def first-segm-id 10)
(def capstone-class-name "___")
(def segment-class-prefix "_") ;followed by number: not parsed as symbol if empty


(deftype SegmState [^Ctx ctx
                    ^NmspIO nmsp-io
                    
                    ^int segm-id
                    ^ClassDesc segm-cld
                    ^IPersistentVector tlfv ;of TopLevelForm
                    ^ArrayDeque !delayed-macros ;shared across SegmState
                    
                    fn-class-futv])     ;vector of Future

(defn- segment-ns-str ^String [^SegmState segm]
  (-> segm .ctx .ns-str))
(defn- segment-name ^String [^SegmState segm ^int id-delta]
  (str (segment-ns-str segm) "." segment-class-prefix (+ (.segm-id segm) id-delta)))
(defn- segment-cld ^ClassDesc [^SegmState segm ^int id-delta]
  (if (zero? id-delta)
    (.segm-cld segm)
    (ClassDesc/of (segment-name segm id-delta))))

(defn with-tlf ^SegmState [^SegmState segm ^TopLevelForm tlf]
  (SegmState. (.ctx segm) (.nmsp-io segm)
              (.segm-id segm) (.segm-cld segm) (conj (.tlfv segm) tlf)
              (.!delayed-macros segm) (.fn-class-futv segm)))
(defn with-next-segm ^SegmState [^SegmState segm]
  (SegmState. (.ctx segm) (.nmsp-io segm)
              (inc (.segm-id segm)) (segment-cld segm +1)
              []                        ;clear tlfv
              (.!delayed-macros segm) (.fn-class-futv segm)))
(defn- with-fn-class-fut ^SegmState [^SegmState segm ^Future fut]
  (SegmState. (.ctx segm) (.nmsp-io segm)
              (.segm-id segm) (.segm-cld segm) (.tlfv segm)
              (.!delayed-macros segm) (conj (.fn-class-futv segm) fut)))
(defn- with-collect-fn-classes ^SegmState [^SegmState segm]
  (run! io/wait-for-result (.fn-class-futv segm))
  (SegmState. (.ctx segm) (.nmsp-io segm)
              (.segm-id segm) (.segm-cld segm) (.tlfv segm)
              (.!delayed-macros segm) []))

(defn capstone-cld ^ClassDesc [^String ns-str]
  (ClassDesc/of ns-str capstone-class-name))

(defn invoke-force-clinit ^Expr [^ClassDesc owner]
  (x/invoke-xref x/x-env-no-ln jb/void [(x/const Class owner)]
                 rt/mhd-RT-ensureInitialized))

(defn- builder-segment ^Consumer [^SegmState segm ^ClassDesc segm-cld]
  (let [clinit (fn []
                 (let [ns-str (segment-ns-str segm)]
                   (-> []
                       (cond-> (= (.segm-id segm) first-segm-id)
                         (conj (x/invoke-xref
                                x/x-env-no-ln
                                jb/void [(x/const String ns-str)]
                                rt/mhd-createNamespace)))
                       (into (map #(.top-level-form ^TopLevelForm %))
                             (.tlfv segm))
                       (cond-> (cfg/core-lib? ns-str)
                         (conj (x/invoke-xref
                                x/x-env-no-ln
                                jb/void [(x/const String (segment-name segm 0))]
                                rt/mhd-markCoreInitialization)))
                       (x/progn*))))]
    (cf/with-cbh [cb]
      (when-not (= (.segm-id segm) first-segm-id)
        (.withSuperclass cb (segment-cld segm -1)))
      (doseq [^TopLevelForm tlf (.tlfv segm)]
        ;; emit fields and methods of all global bindings, delivering
        ;; their loads in order
        (doseq [^Binding global-b (.global-bs tlf)]
          (bytecode/emit-global-b cb segm-cld global-b))
        (doseq [^FnSpec fspec (.fn-specs tlf)]
          (.fn-methods (-> fspec .fn-form .!fnc .emit-plan) cb)))
      (-> (.withFlags cb ClassFile/ACC_PUBLIC)
          (.withMethodBody ConstantDescs/CLASS_INIT_NAME rt/mtd-void-void
                           (bit-or ClassFile/ACC_PUBLIC ClassFile/ACC_STATIC)
                           (cf/with-xbh [xb]
                             (bytecode/emit-body xb (clinit))))))))

(defn with-main ^ClassBuilder [^ClassBuilder cb ^SegmState segm]
  (letfn [(main-function ^BindingRef []
            (let [globals (.get-globals (.ctx segm))]
              (when-some [bref (get globals "-main" nil)]
                (when (some? (x/root-fn-form bref))
                  bref))))]
    (when-some [bref (main-function)]
      (let [main-mtd (rt/mtd-of* rt/void (.arrayType rt/String))
            flags (bit-or ClassFile/ACC_PUBLIC ClassFile/ACC_STATIC
                          ClassFile/ACC_FINAL)
            xbh (cf/with-xbh [xb]
                  (let [mtd (MethodTypeDesc/of rt/object rt/IFn rt/object)]
                    (-> (cf/ld-insn xb (x/deref-load bref))
                        (.aload 0)
                        (.invokestatic rt/RT "apply" mtd)
                        (.pop)
                        (.return_))))]
        (.withMethodBody cb "main" main-mtd flags xbh)))))

(defn- builder-capstone ^Consumer [^SegmState segm ^Namespace nmsp]
  (let [requires-xb (cf/with-xbh [xb]
                      (let [s (if (nmsp/core-lib? nmsp)
                                "" ;suppress internal details of core lib
                                (str/join "," (sort (.req-strs nmsp))))]
                        (-> xb (.constantInstruction s) (.areturn))))]
    (cf/with-cbh [cb]
      (-> (.withFlags cb ClassFile/ACC_PUBLIC)
          (.withSuperclass (segment-cld segm -1))
          (.withMethodBody rt/name-requires rt/mtd-String-void
                           (bit-or ClassFile/ACC_PUBLIC ClassFile/ACC_STATIC
                                   ClassFile/ACC_FINAL)
                           requires-xb)
          (with-main segm)))))

(defn- build-deftype ^ClassDef [^DeftypeDef dtdef]
  (letfn [(method-cbh [^MethodDef mdef]
            (cf/with-cbh [cb]
              (let [at (.at mdef)
                    this-class (-> dtdef .cdef .this-class)
                    ld-this (cf/ld-st-receiver this-class
                                               (name (.this-name at)))
                    xbh (cf/with-xbh [xb]
                          (.deliver-load (.this-bref mdef) ld-this)
                          (cf/st-insn xb ld-this true) ;emit LocalVariable entry
                          (bytecode/emit-body xb ld-this at 0
                                              (.body-expr mdef)))]
                (.withMethodBody cb (.method-name at) (x/at-mtd at)
                                 (.flags mdef) xbh))))]
    (let [cdef (.cdef dtdef)]
      (cf/with-methods cdef (map method-cbh (.method-defs dtdef))))))

(defn- mk-capstone ^Namespace [^NmspIO nmsp-io ^Ctx ctx
                               ^IPersistentMap provided-nmsp
                               ^IPersistentSet req-strs ^Class capstone
                               ^boolean imported?]
  (let [publics (.extract-publics nmsp-io (.get-known-ns ctx) capstone)
        ;; do not re-export namespaces from `provided-nmsp`, because
        ;; this would cause obsoleted versions of the core namespace
        ;; to reach downstream namespaces like tinyclj.java.io
        kns (-> (reduce dissoc (.get-known-ns ctx) (keys provided-nmsp))
                (assoc (.ns-str ctx) publics))]
    (Namespace. nil nil nmsp-io         ;clear `provided-nmsp` & `ctx`
                req-strs capstone kns imported?)))

(defn- mk-first-segm ^SegmState [^NmspIO nmsp-io ^Ctx ctx]
  (let [cld (ClassDesc/of (.ns-str ctx)
                          (str segment-class-prefix first-segm-id))]
    (SegmState. ctx nmsp-io first-segm-id cld [] (ArrayDeque.) [])))

(defn- delayed-but-ready ^DelayedMacroFn [^SegmState segm]
  (when-some [mfn ^DelayedMacroFn (.peekFirst (.!delayed-macros segm))]
    (when (x/realized? (.bref mfn))
      mfn)))

(defn- write-segment ^SegmState [^SegmState segm ^String source-file-attribute]
  (letfn [(load-bref ^Object [^CompileIO compile-io ^BindingRef bref]
            (.invoke-global-mh compile-io
                               (.mh-if-global (x/deref-load bref)
                                              (.lookup-in-pkg compile-io))))]
    
    (if (zero? (count (.tlfv segm)))
      segm ;nothing to do for empty segment
      ;; Note: There is no point to move the segment class into a
      ;; future, because it is immediately required -- either for a
      ;; macro value or for namespace completion.
      (let [segm-cld (segment-cld segm 0)
            cbh (builder-segment segm segm-cld)
            ;; macros from this segment class can be invoked once it is
            ;; defined: make sure there are no pending dependencies
            segm (with-collect-fn-classes segm)
            cbd (.produce-class (.nmsp-io segm) segm-cld source-file-attribute
                                cbh)]
        (loop []
          (when-some [mfn (delayed-but-ready segm)]
            (when-not (.complete (.value-promise mfn)
                                 (load-bref (-> segm .ctx .compile-io)
                                            (.bref mfn)))
              (throw (IllegalStateException.)))
            (.removeFirst (.!delayed-macros segm))
            (recur)))
        (with-next-segm segm)))))

(defn- complete-req! ^SegmState [^SegmState segm ^Msg msg]
  (letfn [(schedule-fn-class ^SegmState [^SegmState segm ^FnCode fnc]
            (if-some [cbh (.fn-cbh (.emit-plan fnc))]
              (with-fn-class-fut segm
                (.fork-worker (.nmsp-io segm) cfg/fork-work?
                              (^Callable fn []
                               (.produce-class (.nmsp-io segm)
                                               ^ClassDesc (.ld-clx fnc)
                                               (.source-file-attribute msg)
                                               cbh))))
              segm))
          (schedule-fn-classes ^SegmState [^SegmState segm ^TopLevelForm tlf]
            (let [segm (with-tlf segm tlf)
                  fncs (map #(-> ^FnSpec % .fn-form .!fnc) (.fn-specs tlf))]
              (doseq [^FnCode fnc fncs]
                (.register-ch-info! (.emit-plan fnc) (.nmsp-io segm)))
              (reduce schedule-fn-class segm fncs)))
          
          (write-and-define ^SegmState [^SegmState segm ^ClassDef cdef
                                        ^CompletableFuture promise]
            (.register-ch-info! (.nmsp-io segm) (.this-class cdef)
                                (cf/ch-info cdef))
            (let [cbh (cf/with-cbh [cb]
                        (-> (.withFlags cb (.flags cdef))
                            (.withSuperclass (cf/super-class cdef))
                            (.withInterfaceSymbols (.itfs cdef)))
                        (run! #(.accept ^Consumer % cb) (.cb-handlerv cdef)))
                  this-class (.this-class cdef)
                  cl (.produce-class (.nmsp-io segm) this-class
                                     (.source-file-attribute msg) cbh)]
              (.complete promise cl)
              segm))
          
          (fn-specs-from-methods ^IPersistentVector [mdefs ^SegmState segm]
            (reduce
             (fn collect-fn-specs [acc ^MethodDef mdef]
               (let [body (.body-expr mdef)
                     tlf (prepare/collect-fn-info body)]
                 (into acc (.fn-specs tlf))))
             [] mdefs))]

    (try
      (condp = (.task msg)
        io/msg-emit-tlf
        (let [tlf (prepare/collect-fn-info (.x msg))]
          (prepare/prepare-fns! (.segm-cld segm) (.fn-specs tlf))
          (prepare/prepare-globals! (.segm-cld segm) (.global-bs tlf))
          (cond-> (schedule-fn-classes segm tlf)
            (and (not (.collect-macro-definitions? msg))
                 (some? (delayed-but-ready segm)))
            (write-segment (.source-file-attribute msg))))

        io/msg-macro-of-next-tlf
        (do (.addLast (.!delayed-macros segm) (.x msg))
            segm)

        io/msg-flush-macro-definitions
        (cond-> segm
          (and (.collect-macro-definitions? msg)
               (some? (delayed-but-ready segm)))
          (write-segment (.source-file-attribute msg)))
        
        io/req-define-class
        (if (instance? ClassDef (.x msg))
          (write-and-define segm ^ClassDef (.x msg) (.promise msg))
          (let [dtdef ^DeftypeDef (.x msg)
                fn-specs (fn-specs-from-methods (.method-defs dtdef) segm)
                tlf (TopLevelForm. fn-specs nil x/expr-empty)]
            (prepare/prepare-fns! (.segm-cld segm) fn-specs)
            (-> (schedule-fn-classes segm tlf)
                (write-and-define (build-deftype dtdef) (.promise msg)))))
        
        io/req-flush-namespace-segment
        (let [cl (-> (with-tlf segm (TopLevelForm. [] [] x/expr-empty))
                     (write-segment (.source-file-attribute msg)))]
          ;; segment class `cl` exists and can now be looked up
          (.complete (.promise msg) (invoke-force-clinit (.segm-cld segm)))
          cl)
        
        io/msg-fatal-error
        (throw ^Throwable (.x msg))
        
        #_else (throw (IllegalStateException. (str (.task msg)))))

      (catch Throwable t
        (when-some [p (.promise msg)] ;compile thread blocking on `p`?
          (.complete p t))
        (throw t)))))

(defn- emit-segments ^Namespace [^SegmState segm]
  (let [msg (.recv-from-compile (.nmsp-io segm))]
    (if (io/close-queue? msg)
      (let [segm (write-segment segm (.source-file-attribute msg))
            nmsp ^Namespace (.x msg)
            nmsp-io (.nmsp-io segm)
            cl (.produce-class nmsp-io (-> segm .ctx .ns-str (capstone-cld))
                               (.source-file-attribute msg)
                               (builder-capstone segm nmsp))]
        (mk-capstone nmsp-io (.ctx nmsp) (.provided-nmsp nmsp)
                     (.req-strs nmsp) cl false))
      (recur (complete-req! segm msg)))))

(defn- complete-any-req-exceptionally ^void [^SegmState segm ^Throwable t]
  (letfn [(complete-macro-fn ^void [^DelayedMacroFn mfn]
            (.completeExceptionally (.value-promise mfn) t))]
    (loop []
      (when-some [mfn (.pollFirst (.!delayed-macros segm))]
        (complete-macro-fn mfn)
        (recur)))
    (loop []
      (let [msg (.recv-from-compile (.nmsp-io segm))]
        (when-not (io/close-queue? msg)
          (when (instance? DelayedMacroFn (.x msg))
            ;; complete instead of adding to !delayed-macros
            (complete-macro-fn (.x msg)))
          (when-some [p (.promise msg)]
            ;; if there are still compile threads sending requests, make
            ;; sure that they get *something* back instead of letting
            ;; their gets timeout
            (.complete p t))
          (recur))))))

(defn mk-provided-nmsp
  ([]
   (reduce-kv nmsp/assoc-provided {} predefined/implicit-known-ns))
  ([^String ns-str ^IPersistentMap publics]
   (nmsp/assoc-provided (mk-provided-nmsp) ns-str publics)))

(defn- init-known-ns ^void [^Ctx ctx ^IPersistentMap provided-nmsp]
  (doseq [[ns-str nmsp] provided-nmsp]
    (assert (string? ns-str))
    (assert (instance? Namespace nmsp)))
  (let [primitive-publics (-> (get provided-nmsp cfg/primitive-ns-str)
                              (nmsp/publics-of cfg/primitive-ns-str))]
    (doto ctx
      ;; primitive namespace can be used without require-ing it
      (.merge-into-known-ns {cfg/primitive-ns-str primitive-publics})
      (.put-ns-alias cfg/primitive-ns-str cfg/primitive-ns-str))))

;; Writes this namespace's bytecode to class files.  Assumes that
;; somewhere up in the call chain (i.e. tclj0 or tclj1) any classes in
;; this namespace's output package directory have been deleted.  The
;; output directory is created if it does not exist.
;;
;; Note: Exceptions are reported in the order in which they occur in
;; the emitter thread.  The "compile namespace" thread can fork of an
;; arbitrary number of futures of its own, and the emitter retrieves
;; their result/exception in emit order.
(defn- emit-namespace ^Namespace [^SegmState segm ^IPersistentMap provided-nmsp]
  (let [ctx (.ctx segm)]
    (init-known-ns ctx provided-nmsp)
    
    (let [c-fn (^Callable fn []
                (try
                  (let [nmsp-io (.enter-source-file (.nmsp-io segm) (.ns-str ctx) true)
                        nmsp (nmsp/mk-nmsp provided-nmsp nmsp-io ctx)
                        nsd (nmsp/compile-thread nmsp ctx)]
                    ;; regular completion: pass back result in first
                    ;; `close-queue` message
                    (.send-to-emit (.compile-io nmsp-io)
                                   io/msg-close-queue nsd))
                  (catch java.lang.InterruptedException _
                    ;; emitter thread is shutting down and is not taking
                    ;; any more messages: exit without sending anything
                    nil)
                  (catch Throwable t
                    (.send-to-emit (-> segm .nmsp-io .compile-io)
                                   io/msg-fatal-error t))
                  (finally
                    ;; make sure that there is always a `close-queue`
                    ;; entry for the cleanup loop to terminate on in
                    ;; `complete-any-req-exceptionally`
                    (.send-to-emit (-> segm .nmsp-io .compile-io)
                                   io/msg-close-queue nil))))
          c-thread (.fork-worker (.nmsp-io segm) true c-fn)
          nmsp (try
                 (emit-segments segm)
                 (catch Throwable t
                   (complete-any-req-exceptionally segm t)
                   (throw t)))]
      (.get c-thread)                   ;pick up any exceptions
      nmsp)))

;;; ------------------------------------------------------------------------

(letfn [(extract-req-strs ^String* [^Class cl]
          (let [s (-> (.getDeclaredMethod cl rt/name-requires)
                      ^String (.invoke nil))]
            (if (= s "")
              (new String* 0)
              (into-array String (str/split s #",")))))]
  (defn import-from-capstone ^Namespace [^BuildIO env
                                         ^NmspBuilder nmsp-builder
                                         ^IPersistentMap provided-nmsp
                                         ^Class capstone]
    (let [nmsp-io (.start-nmsp-io-for env capstone nil)
          ctx (ctx/mk-ctx* {} {} (.getPackageName capstone)
                           (.compile-io nmsp-io))]
      (init-known-ns ctx provided-nmsp)
      
      ;; keep in sync with namespace/add-require-deps
      (let [ns-str (.getPackageName capstone)
            req-strs (extract-req-strs capstone)
            n (count req-strs)
            a (new Object* n)
            apublics (new IPersistentMap* n)]
        ;; schedule namespaces in parallel
        (dotimes [i n]
          (let [req-str (aget req-strs i)]
            (aset a i (or (get provided-nmsp req-str)
                          (.schedule nmsp-builder req-str provided-nmsp)))))
        ;; wait for and pick up namespace outcomes
        (dotimes [i n]                  ;avoid stack frame spamming
          (let [ns-str (aget req-strs i)]
            (aset apublics i (-> (nmsp/nmsp-of (aget a i) ns-str)
                                 (nmsp/publics-of ns-str)))))
        ;; collect all "require"d globals and then add any new globals
        ;; to this namespace
        (loop [publics-map {}, i 0]
          (if (= i n)
            (.merge-into-known-ns ctx publics-map)
            (let [ns-str (aget req-strs i)
                  ekns (.exported-known-ns (nmsp/nmsp-of (aget a i) ns-str))]
              (recur (merge publics-map ekns) (inc i)))))
        (mk-capstone nmsp-io ctx provided-nmsp (into #{} req-strs) capstone
                     true)))))

;;; ------------------------------------------------------------------------

(defn compile-and-emit ^Namespace [^NmspIO nmsp-io ^String ns-str
                                   ^IPersistentMap provided-nmsp]
  (try
    (let [ctx (ctx/mk-ctx* (.initial-globals nmsp-io) (.initial-imports nmsp-io)
                           ns-str (.compile-io nmsp-io))
          nmsp (-> (mk-first-segm nmsp-io ctx)
                   (emit-namespace provided-nmsp))]
      (.stop nmsp-io false)
      nmsp)
    (catch Throwable t
      (.stop nmsp-io true)
      (throw t))))
