;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.emitter.classes
  (:require
   [tcljc.util :as util]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.expr :as x]
   [tcljc.classfile :as cf]
   [tcljc.emitter.bytecode :as bytecode])
  (:import
   (tcljc.expr Arity Expr Binding BindingRef)
   (clojure.lang Symbol)
   (java.lang.classfile ClassFile ClassBuilder CodeBuilder TypeKind)
   (java.lang.constant MethodTypeDesc DirectMethodHandleDesc ClassDesc)))

(defn member-mtd ^MethodTypeDesc [^ClassDesc rtype member-lds]
  (rt/mtd-of rtype (map #(-> ^tcljc.classfile.LdStMember %
                             .ld-mhd .invocationType .returnType)
                        member-lds)))

;;; ------------------------------------------------------------------------

(letfn [(bridge-body ^CodeBuilder [^CodeBuilder xb ^boolean virtual?
                                   ^MethodTypeDesc mtd
                                   ^DirectMethodHandleDesc mhd-to]
          (when virtual?
            (.aload xb (.receiverSlot xb)))
          (dotimes [i (.parameterCount mtd)]
            (.loadInstruction xb (TypeKind/from (.parameterType mtd i))
                              (.parameterSlot xb i)))
          (-> (cf/invoke xb rt/mhd-array-to-iseq)
              (cf/invoke mhd-to)
              (.returnInstruction (TypeKind/from (.returnType mtd)))))]
  
  (defn bridge-method ^ClassBuilder [^ClassBuilder cb
                                     ^DirectMethodHandleDesc mhd-from
                                     ^DirectMethodHandleDesc mhd-to]
    (when-not (identical? mhd-from mhd-to)
      (let [virtual? (identical? (.kind mhd-from) rt/mhk-virtual)
            access (bit-or (if virtual?
                             bytecode/acc-virtual
                             bytecode/acc-static)
                           ClassFile/ACC_BRIDGE
                           ClassFile/ACC_VARARGS)
            mtd (cond-> (.invocationType mhd-from)
                  virtual? (.dropParameterTypes 0 1))]
        (.withMethodBody cb (.methodName mhd-from) mtd access
                         (cf/with-xbh [xb]
                           (bridge-body xb virtual? mtd mhd-to)))))))
