;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.emitter.namespace
  (:require
   [tcljc.config :as cfg]
   [tcljc.wrong :as wrong]
   [tcljc.runtime :as rt]
   [tcljc.grammar :as grammar]
   tcljc.reader
   [tcljc.context :as ctx]
   [tcljc.expr :as x]
   [tcljc.exprfold :as xf]
   [tcljc.compiler :as compiler]
   [tcljc.io :as io]
   [tcljc.publics :as publics]
   [tinyclj.string :as str])
  (:import
   (tcljc.context Ctx)
   (tcljc.expr BindingRef)
   (tcljc.io NmspIO)
   (clojure.lang Symbol ISeq IPersistentMap IPersistentSet IPersistentVector
                 ExceptionInfo)
   (java.lang.invoke MethodHandles$Lookup)
   (java.util HashSet)
   (java.util.concurrent Future TimeoutException)))

(deftype Namespace [^IPersistentMap provided-nmsp ;string -> Namespace
                    ^Ctx ctx
                    ^NmspIO top-level-nmsp-io ;nil if imported
                    
                    ^IPersistentSet req-strs
                    ^Class capstone     ;for invoke after build
                    ^IPersistentMap exported-known-ns])

(defn mk-nmsp ^Namespace [^IPersistentMap provided-nmsp ^NmspIO nmsp-io
                          ^Ctx ctx]
  (assert (some? nmsp-io))
  (Namespace. provided-nmsp ctx nmsp-io #{} nil nil))

(defn mk-capstone ^Namespace [^NmspIO nmsp-io ^Ctx ctx
                              ^IPersistentMap provided-nmsp
                              ^IPersistentSet req-strs ^Class capstone]
  (let [publics (publics/extract nmsp-io ctx capstone)
        ;; do not re-export namespaces from `provided-nmsp`, because
        ;; this would cause obsoleted versions of the core namespace
        ;; to reach downstream namespaces like tinyclj.java.io
        kns (-> (reduce dissoc (.get-known-ns ctx) (keys provided-nmsp))
                (assoc (.ns-str ctx) publics))]
    (Namespace. nil nil nil ;clear `provided-nmsp`, `ctx`, `top-level-nmsp-io`
                req-strs capstone kns)))

(defn imported? ^boolean [^Namespace nmsp]
  (nil? (.top-level-nmsp-io nmsp)))

(defn mk-provided ^Namespace [^String ns-str ^IPersistentMap publics]
  (Namespace. nil nil nil #{} nil {ns-str publics}))

(defn assoc-provided [provided-nmsp ^String ns-str ^IPersistentMap publics]
  (assoc provided-nmsp ns-str (mk-provided ns-str publics)))

(def ^:private compile-namespace-in-progress
  (Namespace. nil nil nil #{} nil nil))

(defn- with-requires ^Namespace [^Namespace nmsp ns-strs]
  (Namespace. (.provided-nmsp nmsp) (.ctx nmsp)
              (.top-level-nmsp-io nmsp) (into (.req-strs nmsp) ns-strs)
              (.capstone nmsp) (.exported-known-ns nmsp)))

(defn core-lib? ^boolean [^Namespace nmsp]
  (cfg/core-lib? (-> nmsp .ctx .ns-str)))


(def marker-depth-first-path (Object.))

(defn publics-of ^IPersistentMap [^Namespace nmsp ^String ns-str]
  (-> (.exported-known-ns nmsp)
      (get ns-str)
      (java.util.Objects/requireNonNull)))

(defn nmsp-of ^Namespace [x ^String ns-str]
  (cond
    (identical? marker-depth-first-path x)
    (wrong/other (str "cyclic require via " (wrong/q (symbol nil ns-str))
                      " and this namespace"))
    
    (instance? Future x)
    (let [fut ^Future x]
      (try
        (.get fut cfg/wait-cyclic-ms java.util.concurrent.TimeUnit/MILLISECONDS)
        (catch java.util.concurrent.ExecutionException e ;unwrap
          (throw (or (.getCause e) ^Throwable e)))
        (catch TimeoutException e     ;may not be repeatable!
          (wrong/mk-e (str "Wait for require " (wrong/q (symbol nil ns-str))
                           " timed out.  Maybe a cyclic import?  "
                           "Use --deterministic for better feedback.")))))

    :else x))

(defn- put-required-globals ^void [^Ctx ctx publics-map require-map]
  (assert (identical? :require (:tag require-map)))
  (let [{:keys [ns-sym]} require-map
        req-str (name ns-sym)
        req-defs (get publics-map req-str)
        
        incl (:refer-include require-map)
        excl (:refer-exclude require-map)
        rename (or (:rename require-map) {})
        put-req (fn ^void [^Symbol nm ^BindingRef bref]
                  (let [nm-sym (get rename nm nm)
                        nm* (name nm-sym)]
                    (if (contains? (.get-globals ctx) nm*)
                      (wrong/other (str "required name already defined by this "
                                        "namespace: " (wrong/q nm-sym)))
                      (.put-global ctx nm* bref))))]
    (if (or (identical? :all incl) (some? excl))
      (if (some? excl)
        (let [excl-set (set excl)]
          (doseq [[nm-str def] req-defs
                  :when (string? nm-str)
                  :let [nm (symbol nil nm-str)]
                  :when (not (contains? excl-set nm))]
            (put-req nm def)))
        (doseq [[nm-str def] req-defs
                :when (string? nm-str)]
          (put-req (symbol nil nm-str) def)))
      (doseq [nm incl]
        (if-some [bref (get req-defs (name nm))]
          (put-req nm bref)
          (wrong/unresolved ns-sym nm))))))

(defn- put-ns-alias ^void [^Ctx ctx ^String ns-str ^Symbol opt-alias]
  (let [ns-alias (.get-ns-alias-map ctx)]
    (when (= ns-str (.ns-str ctx))
      (wrong/other (str "namespace cannot require itself: "
                        (wrong/q ns-str))))
    (when-some [prev (.valAt ns-alias ns-str)]
      (when (not= prev ns-str)
        (wrong/other (str "namespace alias already exists: "
                          (wrong/q prev)))))
    (.put-ns-alias ctx ns-str ns-str)
    (when (some? opt-alias)
      (let [alias (name opt-alias)]
        (when (some? (.valAt ns-alias alias))
          (wrong/other (str "namespace alias already exists: "
                            (wrong/q opt-alias))))
        (.put-ns-alias ctx alias ns-str)))))

(defn- add-namespace-deps ^void [^Ctx ctx publics-map deps]
  (doseq [dep deps]
    (case (:tag dep)
      :import (compiler/add-imports dep ctx)
      :require (do (put-ns-alias ctx (name (:ns-sym dep)) (:as dep))
                   (put-required-globals ctx publics-map dep)))))

(letfn [(ns-str ^String [^Namespace nmsp]
          (-> nmsp .ctx .ns-str))
        (core-provided-nmsp ^IPersistentMap [^Namespace nmsp ^boolean require?]
          (if (and require? (core-lib? nmsp))
            (let [force-x (ctx/send-msg (-> nmsp .ctx .emit-q)
                                        ctx/req-flush-namespace-segment nil)
                  globals (-> (-> nmsp .ctx .get-globals)
                              (assoc cfg/key-force-clinit force-x))]
              (assoc-provided (.provided-nmsp nmsp) cfg/core-lib globals))
            (.provided-nmsp nmsp)))
        (conj-force-clinit [statmv globals]
          (conj statmv (-> (get globals cfg/key-force-clinit)
                           (java.util.Objects/requireNonNull))))
        (add-require-deps ^Namespace [^Namespace nmsp deps]
          ;; keep this in sync with emitter/import-from-capstone
          (let [req-strs (grammar/required-ns-strs deps)
                n (alength req-strs)
                a (new objects n)
                apublics (new "[Lclojure.lang.IPersistentMap;" n)
                provide-nmsp (core-provided-nmsp nmsp (some? deps))]
            ;; schedule namespaces in parallel
            (dotimes [i n]
              (let [req-str (aget req-strs i)]
                (aset a i (or (get (.provided-nmsp nmsp) req-str)
                              (-> (.top-level-nmsp-io nmsp)
                                  (.schedule-namespace req-str provide-nmsp))))))
            ;; wait for and pick up namespace outcomes
            (dotimes [i n]              ;avoid stack frame spamming
              (let [ns-str (aget req-strs i)]
                (aset apublics i (-> (nmsp-of (aget a i) ns-str)
                                     (publics-of ns-str)))))
            ;; collect all "require"d globals and then add any new
            ;; globals to this namespace
            (loop [publics-map {}, i 0]
              (if (= i n)
                (doto (.ctx nmsp)
                  (.merge-into-known-ns publics-map)
                  (add-namespace-deps publics-map deps))
                (let [ns-str (aget req-strs i)
                      ekns (.exported-known-ns (nmsp-of (aget a i) ns-str))]
                  (recur (merge publics-map ekns) (inc i)))))
            ;; ensure that all required namespace classes are
            ;; initialized at this point
            (ctx/send-msg (-> nmsp .ctx .emit-q) ctx/msg-emit-tlf
                          (-> (reduce conj-force-clinit [] apublics)
                              (xf/progn-expr x/expr-empty)))
            (with-requires nmsp req-strs)))
        (top-level-list-form ^Namespace [^Namespace nmsp ^NmspIO file-nmsp-io
                                         ^ISeq form]
          (let [op (first form)]
            (case op
              ns
              (let [ns-str (ns-str nmsp)
                    [ns-sym & deps] (grammar/parse-ns-form form ns-str)]
                (add-require-deps nmsp deps))

              require
              (let [deps (grammar/parse-require-specs (rest form))]
                (add-require-deps nmsp deps))
           
              load
              (do (when (and (core-lib? nmsp) (= (fnext form) "core_print"))
                    ;; hack for dependency chain core_print.cljt
                    ;; -> MultiFn.java -> tinyclj.core fns
                    (ctx/send-msg (-> nmsp .ctx .emit-q)
                                  ctx/req-flush-namespace-segment nil))
                  (reduce
                   (fn ^Namespace [^Namespace nmsp ^String path-str]
                     (top-level-file nmsp (.enter-source-file
                                           file-nmsp-io path-str true)))
                   nmsp (next form)))
           
              in-ns
              (let [[arg & argr] (grammar/strip-quotes (rest form))
                    ns-sym (symbol nil (ns-str nmsp))]
                (if (and (nil? argr) (= arg ns-sym))
                  nmsp
                  (wrong/other (str "in-ns argument does not match current "
                                    "namespace " (wrong/q ns-sym)))))
           
              #_else
              (do (compiler/top-level-form form (.ctx nmsp))
                  nmsp))))
        (top-level-file ^Namespace [^Namespace nmsp ^NmspIO file-nmsp-io]
          (try
            (let [rdr (.forms-reader file-nmsp-io)]
              (loop [nmsp nmsp]
                (let [form (.read-1 rdr (.ctx nmsp) ::eof)]
                  (cond
                    (identical? ::eof form) nmsp
                    (seq? form) (recur
                                 (wrong/with-list-context form
                                   (top-level-list-form nmsp file-nmsp-io form)))
                    :else (do (compiler/top-level-form form (.ctx nmsp))
                              (recur nmsp))))))
            (catch ExceptionInfo e
              (throw (.assoc-source-file file-nmsp-io e)))))]
  
  (defn compile-thread [^Namespace nmsp ^Ctx ctx]
    (let [l (-> ctx .compile-io .lookup-in-pkg)]
      (-> (.resolveConstantDesc rt/mhd-pushFileContext l)
          ^void (.invokeExact (.ns-str ctx)))
      (try
        (top-level-file nmsp (.top-level-nmsp-io nmsp))
        (finally
          (-> (.resolveConstantDesc rt/mhd-popFileContext l)
              ^void (.invokeExact)))))))
