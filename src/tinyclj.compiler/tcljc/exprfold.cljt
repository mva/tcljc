;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.exprfold         ;constant folding Expr factories
  (:require                ;note: must not require tcljc.type
   [tcljc.config :as cfg]
   [tcljc.classfile :as cf]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.expr :as x]
   [tinyclj.string :as str])
  (:import
   (tcljc.expr Expr Insn Const Progn Block Setter BindingRef
               LoopBody Branch SplitJoin Switch TryCatchFinally)
   (clojure.lang IPersistentVector)
   (java.lang.classfile ClassFile Opcode))
  (:refer-clojure :exclude [pop type]))

(defn typed-opcode
  (^int [^Class tp]
   (condp jb/same-class? tp
     jb/int 0                           ;iadd
     jb/long 1                          ;ladd
     jb/float 2                         ;fadd
     jb/double 3))                      ;dadd
  (^Opcode [^Opcode base-opcode ^Class tp]
   (cf/bc2opc base-opcode (typed-opcode tp))))

(defn pop ^Expr [^Expr arg]        ;returns `arg` if it is a statement
  (letfn [(pop* ^Expr [^Expr arg]
            (Insn. cfg/no-line-number jb/void [arg]
                   (x/empty-when (.safe-to-discard? arg))
                   (-> (cf/by-slot-size (x/type arg) Opcode/POP Opcode/POP2)
                       (java.lang.classfile.instruction.StackInstruction/of))))
          (undup ^Expr [^Expr x]
            (x/with-code x jb/void (tinyclj.core/pop (x/argv x))))]
    (cond
      (x/void? arg) arg
      (x/dup? (peek (x/argv arg))) (undup arg) 
      :else (pop* arg))))

(defn checkcast ^Expr [^Expr x ^Class to-tp]
  (let [from-tp (x/type x)]
    (cond
      (jb/same-class? to-tp from-tp) x
      (identical? x/expr-nil-object x) (x/const to-tp nil)
      (.isAssignableFrom to-tp from-tp) (x/identity to-tp x)
      (x/identity? x) (recur (x/first-arg x) to-tp)
      :else (x/type-check x Opcode/CHECKCAST to-tp))))

(defn conv ^Expr [^Class type ^Expr arg ^Opcode opc]
  (letfn [(conv-1 ^Object [^int bytecode ^Number arg]
            (case bytecode
              (#_l2i 136 #_f2i 139 #_d2i 142) (object (.intValue arg))
              (#_i2l 133 #_f2l 140 #_d2l 143) (object (.longValue arg))
              (#_i2f 134 #_l2f 137 #_d2f 144) (object (.floatValue arg))
              (#_i2d 135 #_l2d 138 #_f2d 141) (object (.doubleValue arg))

              #_i2b 145 (object (int (.byteValue arg)))
              #_i2c 146 (object (int (char (.intValue arg))))
              #_i2s 147 (object (int (.shortValue arg)))))]
    (let [c (when-some [c0 (.const-value arg)]
              (conv-1 (.bytecode opc) c0))]
      (if (x/const? arg)         ;e.g. (float 1.0) is the same as 1.0f
        (Const. cfg/no-line-number type [] c)
        (Insn. cfg/no-line-number type [arg] c
               (java.lang.classfile.instruction.ConvertInstruction/of opc))))))


;;; Note: XDIV and XREM can cause an division by zero exception, so
;;; x-env should provide a line number.
(defn- arith-2* ^Expr [^long x-env ^Class type ^Expr arg0 ^Expr arg1
                       ^Opcode opc]
  (letfn [(arith-int-2 ^int [^int bytecode ^Number arg0 ^Number arg1]
            (let [a0 (.intValue arg0), a1 (.intValue arg1)]
              (case bytecode
                #_iadd 96 (+ a0 a1)
                #_isub 100 (- a0 a1)
                #_imul 104 (* a0 a1)
                #_idiv 108 (quot a0 a1)
                #_irem 112 (rem a0 a1))))
          (arith-long-2 ^long [^int bytecode ^Number arg0 ^Number arg1]
            (let [a0 (.longValue arg0), a1 (.longValue arg1)]
              (case bytecode
                #_ladd 97 (+ a0 a1)
                #_lsub 101 (- a0 a1)
                #_lmul 105 (* a0 a1)
                #_ldiv 109 (quot a0 a1)
                #_lrem 113 (rem a0 a1))))
          (arith-float-2 ^float [^int bytecode ^Number arg0 ^Number arg1]
            (let [a0 (.floatValue arg0), a1 (.floatValue arg1)]
              (case bytecode
                #_fadd 98 (+ a0 a1)
                #_fsub 102 (- a0 a1)
                #_fmul 106 (* a0 a1)
                #_fdiv 110 (/ a0 a1)
                #_frem 114 (rem a0 a1))))
          (arith-double-2 ^double [^int bytecode ^Number arg0 ^Number arg1]
            (let [a0 (.doubleValue arg0), a1 (.doubleValue arg1)]
              (case bytecode
                #_dadd 99 (+ a0 a1)
                #_dsub 103 (- a0 a1)
                #_dmul 107 (* a0 a1)
                #_ddiv 111 (/ a0 a1)
                #_frem 115 (rem a0 a1))))
          (arith-const ^Object []
            (when-some [c0 (.const-value arg0)]
              (when-some [c1 (.const-value arg1)]
                (let [bytecode (.bytecode opc)]
                  (case (bit-and bytecode 0x3)
                    #_int 0 (object (arith-int-2 bytecode c0 c1))
                    #_long 1 (object (arith-long-2 bytecode c0 c1))
                    #_float 2 (object (arith-float-2 bytecode c0 c1))
                    #_double 3 (object (arith-double-2 bytecode c0 c1)))))))]
    
    (if (and (x/const? arg0) ;constant literal like 1.0f or (float 1.0)
             (zero? (.doubleValue ^Number (.const-value arg0))) ;and zero
             (cf/between ClassFile/ISUB opc ClassFile/IMUL)) ;and XSUB opcode
      (let [opc-neg (cf/bc2opc opc 16)] ;recover XNEG from XSUB
        (Insn. (x/x-ln x-env) type [arg1] (arith-const)
               (java.lang.classfile.instruction.OperatorInstruction/of opc-neg)))
      (Insn. (x/x-ln x-env) type [arg0 arg1] (arith-const)
             (java.lang.classfile.instruction.OperatorInstruction/of opc)))))

(defn arith-2 ^Expr [^long x-env ^Expr arg0 ^Expr arg1 ^Opcode base-opc]
  (let [result-tp (x/type arg0)]
    (arith-2* x-env result-tp arg0 arg1 (typed-opcode base-opc result-tp))))

(defn- bits-2* ^Expr [^Class type ^Expr arg0 ^Expr arg1 ^Opcode opc]
  (letfn [(bits-int-2 ^int [^int bytecode ^Number arg0 ^Number arg1]
            (let [a0 (.intValue arg0), a1 (.intValue arg1)]
              (case bytecode
                #_ishl 120 (bit-shift-left a0 a1)
                #_ishr 122 (bit-shift-right a0 a1)
                #_iushr 124 (unsigned-bit-shift-right a0 a1)
                #_iand 126 (bit-and a0 a1)
                #_ior 128 (bit-or a0 a1)
                #_ixor 130 (bit-xor a0 a1))))
          (bits-long-2 ^long [^int bytecode ^Number arg0 ^Number arg1]
            (let [a0 (.longValue arg0), a1 (.longValue arg1)]
              (case bytecode
                #_lshl 121 (bit-shift-left a0 (int a1))
                #_lshr 123 (bit-shift-right a0 (int a1))
                #_lushr 125 (unsigned-bit-shift-right a0 (int a1))
                #_land 127 (bit-and a0 a1)
                #_lor 129 (bit-or a0 a1)
                #_lxor 131 (bit-xor a0 a1))))
          (bits-const ^Object []
            (when-some [c0 (.const-value arg0)]
              (when-some [c1 (.const-value arg1)]
                (let [bytecode (.bytecode opc)]
                  (case (bit-and bytecode 0x1)
                    #_int 0 (object (bits-int-2 bytecode c0 c1))
                    #_long 1 (object (bits-long-2 bytecode c0 c1)))))))]
    
    (Insn. cfg/no-line-number type [arg0 arg1] (bits-const)
           (java.lang.classfile.instruction.OperatorInstruction/of opc))))

(defn bits-2 ^Expr [^Expr arg0 ^Expr arg1 ^Opcode base-opc]
  (let [result-tp (x/type arg0)]
    (bits-2* result-tp arg0 arg1 (typed-opcode base-opc result-tp))))

(defn acmp ^Branch [^Expr arg0 ^Expr arg1 ^int cmp-opcd]
  (let [c (when-some [c0 (rt/null-value-pred (.const-value arg0))]
            (when-some [c1 (rt/null-value-pred (.const-value arg1))]
              (let [c0 ^boolean c0, c1 ^boolean c1]
                (when (or c0 c1)     ;both non-null means "don't know"
                  (rt/boolean-desc (not= (= cmp-opcd cf/ne) (and c0 c1)))))))]
    (Branch. cfg/no-line-number jb/boolean [arg0 arg1] c
             Opcode/IF_ACMPEQ cmp-opcd)))

(defn icmp ^Branch [^Expr arg0 ^Expr arg1 ^int cmp-opcd]
  (let [c (when-some [c0 (.const-value arg0)]
            (when-some [c1 (.const-value arg1)]
              (let [n0 ^int c0, n1 ^int c1]
                (rt/boolean-desc (case cmp-opcd
                                   #_eq 0 (= n0 n1)
                                   #_ne 1 (not= n0 n1)
                                   #_lt 2 (< n0 n1)
                                   #_ge 3 (>= n0 n1)
                                   #_gt 4 (> n0 n1)
                                   #_le 5 (<= n0 n1))))))]
    (Branch. (x/line-number arg0) jb/boolean [arg0 arg1] c
             Opcode/IF_ICMPEQ cmp-opcd)))

(defn- xcmp-signum ^Expr [^Expr arg0 ^Expr arg1 ^Opcode opc]
  (let [signum #(object (Integer/signum ^int %))
        c (when-some [c0 (.const-value arg0)]
            (when-some [c1 (.const-value arg1)]
              ;; Never constant fold if a NaN is involved; this avoids
              ;; the subleties of [fd]cmpl vs [fd]cmpg.  A floating
              ;; point comparison of -0.0 to 0.0 must return zero --
              ;; don't use `compare` in this case.
              (case (.bytecode opc)
                #_lcmp 148
                (signum (Long/compare ^long c0 ^long c1))
                    
                (#_fcmpl 149 #_fcmpg 150)
                (let [n0 ^float c0, n1 ^float c1]
                  (when-not (or (Float/isNaN n0) (Float/isNaN n1))
                    (signum (if (== n0 n1) 0 (Float/compare n0 n1)))))
                    
                (#_dcmpl 151 #_dcmpg 152)
                (let [n0 ^double c0, n1 ^double c1]
                  (when-not (or (Double/isNaN n0) (Double/isNaN n1))
                    (signum (if (== n0 n1) 0 (Double/compare n0 n1))))))))]
    (Insn. cfg/no-line-number jb/int [arg0 arg1] c
           (java.lang.classfile.instruction.OperatorInstruction/of opc))))

(defn xcmp ^Expr [^Expr arg0 ^Expr arg1 ^int cmp-opcd]
  ;; pre: `arg0` and `arg1` are of computational type
  (let [tp0 (x/type arg0)]
    (if (jb/same-class? jb/int tp0)
      (icmp arg0 arg1 cmp-opcd)
      (letfn [(nan-opcode ^Opcode [^Opcode g ^Opcode l]
                (case cmp-opcd (#_lt 2 #_le 5) g #_else l))]
        (-> (xcmp-signum arg0 arg1
                         (condp jb/same-class? tp0
                           Double/TYPE (nan-opcode Opcode/DCMPG Opcode/DCMPL)
                           Float/TYPE (nan-opcode Opcode/FCMPG Opcode/FCMPL)
                           #_else Opcode/LCMP))
            (icmp x/expr-zero-int cmp-opcd))))))

(def ^:private dyn-mark "\u0001")
(def ^:private const-mark "\u0002")
(def ^:private re-marks #"[\u0001\u0002]") ;note: hash of Pattern is not stable
(defn string-concat [^long x-env argv]     ;aka `str`
  (loop [rparts nil, dyn-args nil, const-args nil, i 0]
    (if (= i (count argv))
      (let [rstr (str/join "" (reverse rparts))
            recipe (x/const jb/String rstr)]
        (cond
          (and (nil? const-args) (nil? dyn-args))
          recipe
          
          (and (= rstr dyn-mark) (x/reference? (first dyn-args)))
          (first dyn-args)       ;output of mhd-Objects-toString call
          
          (= rstr const-mark)
          (first const-args)

          :else
          (x/invoke-dynamic x-env jb/String (vec (reverse dyn-args))
                            rt/bsm-concat
                            (into [recipe] (reverse const-args)))))
      
      (let [x (nth argv i)]
        (if (x/const-value? x)
          (let [c (x/recover-primitive-const x)
                s (if (seq? c)
                    (str (list* c))    ;wrap LazySeq
                    (str c))
                x-str (x/const String s)]
            (if (re-find re-marks s)
              (recur (cons const-mark rparts) dyn-args (cons x-str const-args)
                     (inc i))
              (recur (cons s rparts) dyn-args const-args (inc i))))
          (let [x-non-nil (if (x/reference? x)
                            (x/invoke-xref x-env jb/String
                                           [x x/expr-empty-string]
                                           rt/mhd-Objects-toString)
                            x)]
            (recur (cons dyn-mark rparts) (cons x-non-nil dyn-args) const-args
                   (inc i))))))))
