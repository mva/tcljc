;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.io
  (:import (clojure.lang ExceptionInfo IPersistentMap IPersistentSet)
           (jdk.internal.classfile ClassHierarchyResolver$ClassHierarchyInfo)
           (java.lang.constant ClassDesc)
           (java.lang.invoke MethodHandles$Lookup MethodHandle)
           (java.net URL)
           (java.nio.file Path)
           (java.util HashSet)
           (java.util.concurrent Future ExecutorService)
           (java.util.function Consumer)))

;;; General framework for interfacing to file system (source input &
;;; class file output), running JVM (resolve & define class), console
;;; output (error messages), and possibly other downstream sinks of
;;; compiler generated data.
;;;
;;; Minimal usage scenarios are one-shot compilation, watch loop
;;; compilation, and unit tests.

(definterface Reader
  (read-1 [#_Ctx form-ctx eof-value]))

(definterface NmspBuilder
  ;; If true, then namespaces are visited in depth first order, and
  ;; each namespace is compiled sequentially.  In particular, macro
  ;; and syntax quote expansions happen in deterministic order, which
  ;; in turn means that emitted class files are identical across
  ;; builds.
  (deterministic-namespace-compile? ^boolean [])
  
  ;; Schedule the namespace `ns-str` for compilation, passing it
  ;; `provided-nmsp` as its map of known namespaces (string ->
  ;; Namespace).  Returns the Namespace instance for `ns-str`,
  ;; possible via a future.
  (schedule [^String ns-str ^IPersistentMap provided-nmsp])

  (build-all []))

(definterface CompileIO
  ;; The Lookup instance corresponding to this namespace's package
  ;; name.
  (lookup-in-pkg ^MethodHandles$Lookup [])
  
  (invoke-global-mh ^Object [^MethodHandle global-mh])
  
  ;; Generates unique names for fn* and reify* instances within a
  ;; given namespace.  `dflt-nm` of nil means function or interface
  ;; function
  (pick-unique-mnm ^String [^String mnm-path-env ^clojure.lang.Symbol dflt-nm
                            form])
  
  (apply-macro [f form env])

  
  ;; When true, try to collect multiple macro definitions into a
  ;; namespace segment, instead of starting a new one after each
  ;; macro.  Only works in deterministic mode, because the emit thread
  ;; deadlocks when a function thread thread sends it any tasks.
  (collect-macro-definitions? ^boolean [])
  
  (fork-function ^Future [^ExecutorService sts ^Callable f])
  
  (compile-io-in ^CompileIO [^Class cl]))

(definterface BuildFiles
  ;; Returns the resource URL of `rpath`, or signals an error.
  (resource-url ^URL [^Path rpath])

  ;; Source files are obtained from `app-ld` loader via
  ;; `.getResource`.
  (forms-reader ^Reader [^URL rurl])

  (prepare-package-directory ^void [^String ns-str])
  (write-class-file ^void [^String owner-nm ^bytes bs]))

;;; Holds mutable state for the namespace thread, which means that the
;;; corresponding methods must *not* be called from other threads.
(definterface NmspIO
  (compile-io ^CompileIO [])
  (with-build-files ^NmspIO [^BuildFiles build-files]) ;for stubbing

  ;; Initial set of class imports when compiling this namespace.
  (initial-imports ^IPersistentMap [])
  ;; Initial set of globals definitions of this namespace.
  (initial-globals ^IPersistentMap [])

  (schedule-namespace [^String ns-str ^IPersistentMap provided-nmsp])
  
;;; restricted to namespace thread:
  
  ;; `nmsp-or-path` is interpreted as a namespace name when this
  ;; instance is blank, and as a (absolute or relative) path when it
  ;; is associated with a source file.  If `compile-resource?` is
  ;; true, then the path's resource URL is obtained.  Note: The
  ;; returned object shares mutable state with its parent.
  (enter-source-file ^NmspIO [^String nmsp-or-path
                              ^boolean compile-resource?])
  (assoc-source-file ^ExceptionInfo [^ExceptionInfo e])
  (forms-reader ^Reader [])
  (collect-rpaths ^IPersistentSet [])

  (register-ch-info! ^void [^ClassDesc this-class
                            ^ClassHierarchyResolver$ClassHierarchyInfo ch-info])
  ;; Builds, writes, and defines class `this-class` from `cbh`.  Sets
  ;; this instance's source file and the default classfile version.
  (produce-class ^Class [^ClassDesc this-class ^Consumer cbh])

  ;; Given the class file `capstone`, extract its map of public globals.
  (extract-publics ^IPersistentMap [^IPersistentMap known-ns ^Class capstone])
  
  ;; Called for the namespace's top-level compile thread, and to write
  ;; out a namespace segment's class file.
  (fork-task ^Future [^ExecutorService sts ^Callable f ^boolean fork-work?]))

(definterface BuildIO
  ;; Creates a new `NmspIO` instance for a fresh namespace.  Must be
  ;; called at most once per namespace.
  (nmsp-io ^NmspIO [str-or-class ^NmspBuilder nmsp-builder])
  
  ;; Returns the capstone class for `ns-str` if it is part of the
  ;; dynamic class loader, and nil otherwise.
  (try-load-capstone ^Class [^String ns-str])

  ;; Called for every namespace in multi-threaded compilation mode.
  ;; NmspIO also delegates to this method.
  (fork-task ^Future [^ExecutorService sts ^Callable f]))
