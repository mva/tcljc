;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.javabase     ;supporting code for stuff from java.base & JVM
  (:require
   [tcljc.config :as config])
  (:import
   (clojure.lang Symbol)
   (jdk.internal.classfile Opcode)
   (java.lang.invoke MethodHandle)
   (java.lang.constant ClassDesc DirectMethodHandleDesc$Kind
                       ConstantDesc ConstantDescs))
  (:refer-clojure
   :exclude [int long float double boolean char byte short void]))

;;; primitive operand types
(def void Void/TYPE)
(def int Integer/TYPE)
(def long Long/TYPE)
(def float Float/TYPE)
(def double Double/TYPE)
;;; the other "computational int" types
(def boolean Boolean/TYPE)
(def char Character/TYPE)
(def byte Byte/TYPE)
(def short Short/TYPE)

;;; ------------------------------------------------------------------------

(defn same-class? ^boolean [^Class a ^Class b]
  (identical? a b))
(defn same-classname? ^boolean [^String clnm ^Class a]
  (= clnm (.getName a)))

;; Note: `void` is also considered a primitive.  Result is undefined
;; for `no-return`.
(defn primitive? ^boolean [^Class tp]
  (.isPrimitive tp))

(defn statement? ^boolean [^Class tp]
  (same-class? void tp))

(defn numeric? ^boolean [^Class tp]
  (and (.isPrimitive tp)
       ;; FIXME... once inline classes are available, replace this
       ;; with something like (.isAssignableFrom Number tp)
       (not (same-class? boolean tp))
       (not (same-class? void tp))
       (not (same-class? char tp))))    ;not numeric in Clojure

(defn character? ^boolean [^Class tp]
  (same-class? char tp))


;; Note: `cl-null` is considered a reference.  Result is undefined for
;; `no-return`.
(defn reference? ^boolean [^Class tp]
  (not (primitive? tp)))

(defn array? ^boolean [^Class tp]
  (.isArray tp))

(defn interface? ^boolean [^Class tp]
  (.isInterface tp))


(defn jvm-assignable-to? ^boolean [^Class a ^Class b]
  ;; Technically we use the more restrictive Java point of view here.
  ;; For type checking, the JVM itself treats an interface class
  ;; similar to java.lang.Object.
  (.isAssignableFrom b a))

;;; ------------------------------------------------------------------------

(def jvm-null ConstantDescs/NULL)
(def jvm-int-zero (Integer/valueOf 0))
(def jvm-int-one (Integer/valueOf 1))
(def jvm-float-one (Float/valueOf 1))

(defn in-short? ^boolean [^int n]
  (<= Short/MIN_VALUE n Short/MAX_VALUE))

(def Object java.lang.Object)
(def ObjectArray (.arrayType Object))
(def String java.lang.String)
(def Class java.lang.Class)
(def Pattern java.util.regex.Pattern)
(def Exception java.lang.Exception)
(def MethodHandle MethodHandle)
(def MethodHandleArray (.arrayType MethodHandle))

(defn object? ^boolean [^Class tp]      ;exact match
  (same-class? Object tp))

;;; ------------------------------------------------------------------------

;;; This type is used to mark macro and primitive function values.
(def ^Class cl-compile-time-entity nil)

(defn compile-time-entity? ^boolean [^Class cl]
  (identical? cl-compile-time-entity cl))


;;; Special type indicating that the source or destination of an
;;; operand can be of arbitrary type.
;;;
;;; For the destination of an operand (parameter, return value, or
;;; field) this type indicates that the destination's type is that of
;;; the operand.
;;;
;;; As the return type of an expression, this type is short lived.  If
;;; some path of `compile-form` translates a form into such an
;;; expression, then the type tag processing at the end of
;;; `compile-form` replaces it with a proper class.
;;;
;;; Another short lived use is as marker of the still unknown return
;;; type of an `auto-return-type arity`.  This is an implementation
;;; detail private to `fn*-form`, `letfn*-form`, and `call-fn-def`.
(deftype PolymorphicType [])
(def cl-polymorphic-type PolymorphicType)

(defn polymorphic? ^boolean [^Class cl]
  (identical? cl-polymorphic-type cl))


;;; Returns true if the instruction either pushes a result onto the
;;; operand stack, or leaves the result of its last argument on the
;;; stack.
(defn pushes-result? ^boolean [^Class tp]
  (not (statement? tp)))

(defn throwable? ^boolean [^Class tp]   ;Throwable or subclass of it
  (.isAssignableFrom Throwable tp))

;;; ------------------------------------------------------------------------

(defn import-symbol-short ^Symbol [^Class cl]
  (let [s (.getName cl), i (.lastIndexOf s (tinyclj.core/int \.))]
    (symbol nil (.substring s (inc i)))))

(def jvm-imports
  (let [m (java.util.HashMap.)]
    ;; by default, import certain java.lang.* classes using their
    ;; short name; references using the long name are resolved on
    ;; demand and refer to the same JVM-level class instance
    (doseq [^Class cl config/java-lang-classes]
      (.put m (import-symbol-short cl) cl))
    
    ;; pseudo-import of primitive and primitive array types types by
    ;; their lower-case Java name; technically, `^object` should not
    ;; exist, but for symmetry it does
    (.put m 'object Object)
    (.put m 'objects (.arrayType Object))
    ;; type `void` is treated specially (the JVM considers it to be a
    ;; primitive as well), and null_type does not exist as a named
    ;; entity
    (.put m 'void Void/TYPE)
    (doseq [^Class cl [boolean byte short char int float long double]
            :let [nm (.getSimpleName cl)]]
      (.put m (symbol nil nm) cl)
      (.put m (symbol nil (str nm "s")) (.arrayType cl)))
    (into {} m)))

(defn computational-const ^Object [^Object x]
  (cond
    (nil? x) jvm-null
    (true? x) jvm-int-one
    (false? x) jvm-int-zero
    (instance? Character x) (object (tinyclj.core/int (.charValue ^Character x)))
    (instance? Byte x) (object (.intValue ^Byte x))
    (instance? Short x) (object (.intValue ^Short x))
    :else x))

(defn int-value-of ^int [^Object x]     ;pre: `x` is computational int
  (cond (instance? Number x) (.intValue ^Number x)
        (instance? Character x) (tinyclj.core/int (.charValue ^Character x))
        (instance? Boolean x) (if ^boolean x 1 0)
        :else (throw (IllegalArgumentException. (str (class x))))))
