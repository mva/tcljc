;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.main.efmt
  (:require
   [tcljc.wrong :as wrong]
   [tcljc.expr :as x]
   [tinyclj.string :as str]
   [tinyclj.alpha.ptest__term :as term])
  (:import
   (tcljc.expr FnForm Arity)
   (clojure.lang ExceptionInfo)
   (java.lang.constant ClassDesc ConstantDescs)
   (java.lang.reflect Method Constructor Executable Field Member Modifier)
   (java.util.regex Pattern)))

(letfn [(skip-over ^int [^CharSequence cs ^int start ^int end ^char c]
          (cond
            (= start end) start
            (= (.charAt cs start) c) (inc start)
            :else (recur cs (inc start) end c)))]
  
  (defn- ansi-width
    (^int [^CharSequence cs]
     (ansi-width cs 0 (.length cs)))
    (^int [^CharSequence cs ^int start ^int end]
     (assert (<= 0 start end (.length cs)))
     (loop [cnt 0, i start]
       (cond
         (= i end) cnt
         (= (.charAt cs i) term/esc) (recur cnt (skip-over cs (inc i) end
                                                           term/terminator))
         :else (recur (inc cnt) (inc i)))))))


(defn- file-line-column ^String [emap]
  (if-some [ln (or (:reader/line emap) (:form/line-number emap))]
    (str ":" (term/highlight (str ln))
         (if-some [column (:reader/column emap)]
           (str ":" column)
           ""))
    ""))

(defn- relative-path ^String [^java.net.URL url] ;relative to working directory
  (if (some? url)
    (let [path (java.nio.file.Path/of (.toURI url))
          wd (-> (java.nio.file.Paths/get "")
                 (.toAbsolutePath))]
      (try
        (str (.relativize wd path))
        (catch IllegalArgumentException _
          (str path))))
    "<unknown-file>"))

(defn- fit-indent* ^String [^StringBuilder sb ^int indent parts]
  (letfn [(read-width ^int []
            (if-some [s (System/getenv "COLUMNS")]
              (try
                (Integer/parseInt s)
                (catch NumberFormatException _
                  -1))
              -1))
          (guess-width ^int []
            (let [w (read-width)] (if (pos? w) w 80)))]
    (let [width (guess-width)
          indent (if (< indent (quot width 2))
                   indent
                   1)]
      (loop [[^String p & pr :as parts] (seq parts)
             col (ansi-width sb)]
        (if (nil? parts)
          (.toString sb)
          (let [colp (+ col 1 (ansi-width p))]
            (if (or (<= colp width) (= col indent))
              (do (.append sb " ")
                  (.append sb p)
                  (recur pr colp))
              (do (.append sb (System/lineSeparator))
                  (.repeat sb " " indent)
                  (recur parts indent)))))))))

(defn- fit-indent ^String [^String prefix parts]
  (fit-indent* (StringBuilder. prefix) (ansi-width prefix) parts))

(defn- fit-string ^String [^String prefix ^String s]
  (if (some? s)
    (fit-indent prefix (str/split s #" +"))
    prefix))

(defn- type-str ^String [clx]
  (cond
    (nil? clx) "<nil>"              ;nil must not crash the build loop
    (instance? Class clx) (recur (.get (.describeConstable ^Class clx)))
    :else (.displayName ^ClassDesc clx)))


(defn- style-parameters [^Class* ptypes ^boolean varargs?]
  (letfn [(pstr ^String [^int i]
            (let [cl (aget ptypes i)]
              (if (and varargs? (= (inc i) (alength ptypes)))
                (str (type-str (.componentType cl)) "...")
                (type-str cl))))]
    (let [sb (StringBuilder. "(")]
      (loop [i 0]
        (if (= i (alength ptypes))
          (do (.append sb ")")
              (str sb))
          (do (when (pos? i) (.append sb " "))
              (.append sb (pstr i))
              (recur (inc i))))))))

(defn- print-sig [^String prefix ^Class* ptypes ^boolean varargs?
                  ^int arg-count]
  (let [matching-count? (if varargs?
                          (>= arg-count (dec (alength ptypes)))
                          (= arg-count (alength ptypes)))]
    (println (fit-string (if matching-count?
                           prefix       ;or term/highlight?
                           (term/dim prefix))
                         (style-parameters ptypes varargs?)))))

(defn print-member [^Member x ^int arg-count]
  (letfn [(static-indicator ^String [^int mods]
            (if (Modifier/isStatic mods)
              "s"
              "v"))
          (print-executable [^Executable x]
            (let [constr? (instance? Constructor x)]
              (print-sig (str "  " (if constr?
                                     " "
                                     (static-indicator (.getModifiers x)))
                              (if constr? "c" "m"))
                         (.getParameterTypes x) (.isVarArgs x) arg-count)))

          (print-field [^Field f]
            (let [mods (.getModifiers f)]
              (print-sig (str "  " (static-indicator mods) "f")
                         (new Class* 0) false arg-count)))]
    (if (instance? Executable x)
      (print-executable ^Executable x)
      (print-field ^Field x))))

(defn print-arity [^Arity at  ^Class* arg-types]
  (let [ptypes (into-array Class (x/at-parameter-types at))]
    (print-sig (String/format "%4d" (x/at-n at)) ptypes
               (some? (x/at-extern-vararg-type at)) (alength arg-types))))

(defn print-compiler-emap [^ExceptionInfo e]
  (let [msg (ex-message e)
        data (ex-data e)]
    (println)
    (println (fit-string (term/error "###") msg))
    (println (term/error "@@@")
             (str (relative-path (:file/resource-url data))
                  (file-line-column data)))
    (when-some [t (ex-cause e)]
      (if (and (instance? IllegalArgumentException t)
               (some? (ex-message t))
               (not= (ex-message t) ""))
        (println (fit-string "cause:" (ex-message t))) ;expansion of let etc.
        (.printStackTrace t)))
    
    (when-some [owner ^Class (:invoke/owner data)]
      (let [nm ^String (:invoke/name data)
            ms (concat (when (= nm ConstantDescs/INIT_NAME)
                         (.getConstructors owner))
                       (->> (concat (.getMethods owner) (.getFields owner))
                            (filter #(= nm (.getName ^Member %)))))]
        (println (str "members " (term/highlight nm) " of "
                      (term/highlight (type-str owner)) ":"))
        (when-some [arg-types ^Class* (:invoke/arg-types data)]
          (doseq [m ms]
            (print-member m (alength arg-types))))
        (when-not (seq ms)
          (println "  <none>")))
      (println (term/dim "args") (map type-str (:invoke/arg-types data))))

    (when-some [fn-form ^FnForm (:invoke/fn-form data)]
      (println "arities:")
      (let [arg-types ^Class* (:invoke/arg-types data)]
        (doseq [at (sort-by x/at-n (.at-sigs fn-form))]
          (print-arity at arg-types)))
      (println "args" (map type-str (:invoke/arg-types data))))
    
    (doseq [[k v] (sort-by key (dissoc data
                                       :file/resource-url
                                       :reader/line :reader/column
                                       :emitter/namespaces
                                       :form/line-number
                                       :invoke/owner :invoke/name
                                       :invoke/arg-types :invoke/fn-form))]
      (println k v))))

(defn print-emap [^ExceptionInfo e]
  (try
    (print-compiler-emap e)
    (catch Throwable t*
      (.printStackTrace (Exception. "error while formatting error message" t*))
      (println)
      (throw e))))
