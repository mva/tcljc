;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.main.tclj0
  (:require
   [tcljc.config :as cfg]
   [tcljc.classfile :as cf]
   [tcljc.wrong :as wrong]
   [tcljc.macro :as macro]
   [tcljc.reader :as rd]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.emitter :as em]
   [tcljc.io :as io]
   [tcljc.predefined :as predefined]
   [tcljc.emitter :as emitter]
   [tcljc.emitter.beachhead :as beachhead]
   [tcljc.main.options :as options]
   [tcljc.main.efmt :as efmt]
   [tcljc.main.invoke :as invoke]
   [tcljc.main.publics :as publics]
   [tcljc.main.builder :as builder]
   [tinyclj.string :as str])
  (:import
   (tcljc.io BuildFiles BuildIO NmspIO CompileIO NmspBuilder)
   (tcljc.main.options Options)
   (clojure.lang IPersistentMap IPersistentSet ExceptionInfo)
   (java.lang.invoke MethodHandles MethodHandles$Lookup MethodHandle)
   (java.net URL)
   (java.nio.file Path Files)
   (java.util HashSet)
   (java.util.concurrent ConcurrentHashMap)
   (java.util.concurrent.atomic AtomicBoolean)))

;;; Implementation of in/out infrastructure when running the compiler
;;; from the command line, either in one-shot or watch loop mode.

(deftype CompileIOImpl [^MethodHandles$Lookup lookup-in-pkg 
                        ^MethodHandle apply-mh
                        ^ConcurrentHashMap private-name-map
                        ^Object binding-frame
                        ^boolean collect-macro-definitions?]
  CompileIO
  (lookup-in-pkg [_]
    lookup-in-pkg)
  (invoke-global-mh [_ global-mh]
    (if (nil? apply-mh)
      ;; compiler and application share runtime?  careful, this is a
      ;; very brittle method type!
      ^tinyclj.lang.StaticFnMh (.invokeExact global-mh)
      (.invoke global-mh)))
    
  (pick-unique-mnm [_ mnm-path-env dflt-nm form]
    (let [candidate-nm (second form)
          nm (if (symbol? candidate-nm)
               candidate-nm
               (or dflt-nm
                   (when-some [tag (-> form (first) (meta) :tag)]
                     (when (symbol? tag)
                       (let [s (name tag), i (.lastIndexOf s (int \.))]
                         ;; interface function: pick up tag of `fn*`,
                         ;; but drop any package name
                         (symbol nil (.substring s (inc i))))))
                   'fn))
          mnm (str mnm-path-env (when (some? mnm-path-env) "$")
                   (cfg/munge-name nm))
          s (if (.containsKey private-name-map mnm)
              (loop [n (hash (cons mnm form))]
                (let [tag (.toHexDigits (java.util.HexFormat/of) n 4)
                      s* (str mnm "^" tag)]
                  (if (.containsKey private-name-map s*)
                    (recur (inc n))     ;linear probing
                    s*)))
              mnm)]
      (.put private-name-map s Boolean/TRUE)
      s))
  (apply-macro [_ f form env]
    (assert (nil? env))
    (if (nil? apply-mh)
      (macro/apply-macro-direct f form env)
      (macro/apply-macro-mapped apply-mh f form env)))
  (collect-macro-definitions? [_]
    collect-macro-definitions?)
  (fork-function [_ sts f]
    (if (some? sts)
      ;; Carry *out* and *err* into threads.  Compiler code running
      ;; in unit tests should use the *out* and *err* bound by
      ;; ptest.
      (.submit sts (^Callable fn []
                    (clojure.lang.Var/resetThreadBindingFrame binding-frame)
                    (.call f)))
      (java.util.concurrent.CompletableFuture/completedFuture (.call f))))
  (compile-io-in [_ cl]
    (CompileIOImpl. (.in lookup-in-pkg cl) apply-mh
                    private-name-map binding-frame collect-macro-definitions?)))

(defn- mk-compile-io ^CompileIO [binding-frame
                                 ^MethodHandles$Lookup rt-lookup
                                 ^MethodHandles$Lookup lookup-in-pkg
                                 ^boolean collect-macro-definitions?]
  (CompileIOImpl.
   lookup-in-pkg
   (let [compiler-rt-witness tinyclj.lang.AFnMh
         app-rt-witness (.resolveConstantDesc rt/AFn rt-lookup)
         shared-runtime? (identical? compiler-rt-witness app-rt-witness)]
     (if shared-runtime?
       nil                           ;can use macro/apply-macro-direct
       (.resolveConstantDesc rt/mhd-applyMacroMapped rt-lookup)))
   (ConcurrentHashMap.) binding-frame collect-macro-definitions?))

;; `!rpath-set` is created by the emitted thread, then handed over to
;; the namespace thread to accumulate the names of visited files, and
;; read only after the namespace's compilation has completed.
(deftype NmspIOImpl [^BuildFiles build-files
                     ^CompileIO compile-io
                     ^MethodHandles$Lookup rt-lookup
                     ^IPersistentMap initial-imports
                     ^IPersistentMap initial-globals
                     
                     ^Path rpath
                     ^URL rurl
                     ^HashSet !rpath-set ;owned by emitter thread
                     ^String source-file-attribute

                     ^NmspBuilder nmsp-builder
                     
                     ^AtomicBoolean pkg-dir-prepared
                     ^tcljc.classfile.CHR dyn-chr
                     ^Object binding-frame]
  NmspIO
  (compile-io [_]
    compile-io)
  (with-build-files [_ build-files]
    (NmspIOImpl. build-files compile-io rt-lookup
                 initial-imports initial-globals
                 rpath rurl !rpath-set source-file-attribute
                 nmsp-builder pkg-dir-prepared dyn-chr
                 binding-frame))
  
  (initial-imports [_]
    initial-imports)
  (initial-globals [_]
    initial-globals)
  
  (enter-source-file [_ nmsp-or-path compile-resource?]
    (let [rpath (if (nil? rpath)
                  (cfg/nmsp-rpath nmsp-or-path)
                  (let [s (str nmsp-or-path cfg/source-suffix)]
                    (if (str/starts-with? s "/")
                      (cfg/path-of s)
                      (.resolve (.getParent rpath) s))))
          rurl (when compile-resource?
                 (.resource-url build-files rpath))
          src-file-attr (when (and cfg/enable-line-numbers (some? rurl))
                          (let [s (.getPath ^URL rurl)]
                            (subs s (inc (.lastIndexOf s "/")))))]
      (.add !rpath-set rpath)
      (NmspIOImpl. build-files compile-io rt-lookup
                   initial-imports initial-globals
                   rpath rurl !rpath-set src-file-attr
                   nmsp-builder pkg-dir-prepared dyn-chr
                   binding-frame)))
  (assoc-source-file [_ ^ExceptionInfo e]
    (wrong/assoc-if-new e :file/resource-url rurl))
  (forms-reader [_]
    (.forms-reader build-files rurl))
  (collect-rpaths [_]
    (into #{} !rpath-set))

  (schedule-namespace [_ ns-str provided-nmsp]
    (.schedule nmsp-builder ns-str provided-nmsp))
  
  (register-ch-info! [_ ch-info]
    (.register! dyn-chr ch-info))
  (produce-class [_ this-class cbh]
    (let [bs (cf/build this-class
                       (cf/with-cbh [cb]
                         (cf/with-version cb)
                         (.accept cbh cb)
                         (cf/with-source-file cb source-file-attribute))
                       dyn-chr)]
      (when-not (.getPlain pkg-dir-prepared)
        ;; the package directory must haven been created before the
        ;; first class is written for this package
        (.prepare-package-directory build-files (.packageName this-class))
        (.setPlain pkg-dir-prepared true))
      (.write-class-file build-files (cfg/internal-name this-class) bs)

      (let [l (.lookup-in-pkg compile-io)]
        (-> (try
              (.defineClass l bs)
              (catch NoClassDefFoundError _
                ;; happens for example with "pkg/ns0/n2$n2-n1$n2-n1-n0" from
                ;; test case tcljc.closure-test/nested
                (.findClass l (str/replace (cfg/internal-name this-class) "/" "."))))
            (cfg/validate-defined-class)))))

  (extract-publics [this known-ns capstone]
    (publics/extract rt-lookup this known-ns capstone))
  
  (fork-task [_ sts f fork-work?]
    (if fork-work?
      (.submit sts (^Callable fn []
                    (clojure.lang.Var/resetThreadBindingFrame binding-frame)
                    (.call f)))
      (java.util.concurrent.CompletableFuture/completedFuture (.call f)))))

;; Source files are obtained from `app-ld` via `.getResource`.  If the
;; parent classloader is :system, then `app-ld` also provides
;; ahead-of-time compiled class files.  It must never return classes
;; from the destination directory, or compilation of modified classes
;; will silently stop.
(deftype BuildFilesImpl [^ClassLoader app-ld
                         ^Path dest-dir] ;`dest-dir` may be nil
  BuildFiles
  (resource-url [_ rpath]
    (or (.getResource app-ld (str rpath))
        (wrong/file rpath)))
  (forms-reader [_ rurl]
    (rd/mk-reader (slurp rurl)))

  (prepare-package-directory [_ ns-str]
    (when (some? dest-dir)
      (cfg/create-directories (cfg/package-directory dest-dir ns-str))))
  (write-class-file [_ owner-nm bs]
    (when (some? dest-dir)          ;expects output directory to exist
      (with-open [w (-> dest-dir
                        (.resolve (Path/of (str owner-nm cfg/class-suffix)))
                        (Files/newOutputStream))]
        (.write w bs)))))

(deftype BuildIOImpl
    [^BuildFiles build-files
     ^MethodHandles$Lookup rt-lookup    ;to access module tinyclj.rt

     ^IPersistentMap initial-imports
     ^ClassLoader dyn-ld
     ^tcljc.classfile.CHR dyn-chr
     binding-frame              ;to carry *out* and *err* into threads
     ^boolean collect-macro-definitions?]
    tcljc.io.BuildIO
    (nmsp-io [build-io str-or-class nmsp-builder]
      (let [ns-str (if (string? str-or-class)
                     ^String str-or-class
                     (.getPackageName ^Class str-or-class))
            initial-globals (if (cfg/core-lib? ns-str)
                              (predefined/core-ns-globals rt-lookup)
                              {})
            lookup-in-pkg (if (string? str-or-class)
                            (beachhead/mk-lookup-in-pkg rt-lookup dyn-ld ns-str)
                            (.in (MethodHandles/publicLookup) ^Class str-or-class))
            compile-io (mk-compile-io binding-frame rt-lookup lookup-in-pkg
                                      collect-macro-definitions?)
            !rpath-set (HashSet.)
            pdp (java.util.concurrent.atomic.AtomicBoolean. false)]
        (NmspIOImpl. build-files compile-io rt-lookup initial-imports initial-globals
                     nil nil !rpath-set nil nmsp-builder pdp dyn-chr
                     binding-frame)))
  
    (try-load-capstone [_ ns-str]
      (try
        (Class/forName (str ns-str "." emitter/capstone-class-name) false dyn-ld)
        (catch ClassNotFoundException _
          nil)))

    (fork-task [_ sts f]
      (.submit sts (^Callable fn []
                    (clojure.lang.Var/resetThreadBindingFrame binding-frame)
                    (.call f)))))

(defn mk-build-io ^BuildIO [^ClassLoader app-ld ^Path dest-dir ^ClassLoader dyn-ld
                            ^boolean collect-macro-definitions?]
  (let [rt-lookup (cfg/get-rt-lookup app-ld)
        initial-imports (reduce-kv (fn [acc nm-sym clnm]
                                     (let [cl (.findClass rt-lookup clnm)]
                                       (assoc acc nm-sym cl)))
                                   jb/jvm-imports
                                   {'symbol rt/clnm-symbol
                                    'keyword rt/clnm-keyword
                                    'vector rt/clnm-vector
                                    'map rt/clnm-map
                                    'set rt/clnm-set
                                    'list rt/clnm-list
                                    'seq rt/clnm-seq})]
    (BuildIOImpl. (BuildFilesImpl. app-ld dest-dir)
                  rt-lookup initial-imports dyn-ld (cf/mk-chr dyn-ld)
                  (clojure.lang.Var/cloneThreadBindingFrame)
                  collect-macro-definitions?)))

;;; ------------------------------------------------------------------------

(defn- class-file? ^boolean [^Path x]
  (str/ends-with? (.toString x) cfg/class-suffix))

(defn wipe-dest-dir [^Options opts]     ;only deletes class files
  (when (.dest-dir opts)
    (doseq [^Path x (cfg/file-seq (.dest-dir opts))
            :when (class-file? x)]
      #_(prn :wipe-dest-dir (.toString x))
      (Files/delete x))))

(defn build-all ^IPersistentMap [^Options opts ^boolean load-from-dest-dir?]
  (let [app-ld (cfg/app-class-loader (.parent-classloader opts) (.sourcev opts))
        all-nmsps (options/target-ns-strs opts)

        rt-lookup (cfg/get-rt-lookup app-ld)
        dyn-sourcev (if (and load-from-dest-dir? (some? (.dest-dir opts)))
                      [(.dest-dir opts)]
                      [])
        dyn-ld (cfg/dyn-class-loader app-ld dyn-sourcev)
        builtin-nmsp (em/mk-provided-nmsp)
        env (mk-build-io app-ld (.dest-dir opts) dyn-ld (.deterministic? opts))]
    (.build-all (if (.deterministic? opts)
                  (builder/single-threaded env builtin-nmsp all-nmsps)
                  (builder/multi-threaded env builtin-nmsp all-nmsps)))))

(defn run ^boolean [^Options opts]
  (options/print-options opts)
  (wipe-dest-dir opts)       ;wipe before any classloaders are created
  (try
    (-> (time (build-all opts false))
        (invoke/invoke-and-report opts))
    (catch ExceptionInfo e
      (efmt/print-emap e)
      (println)
      false)))
