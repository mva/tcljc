;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.main.tclj1
  (:require
   [tcljc.config :as cfg]
   [tcljc.wrong :as wrong]
   [tcljc.emitter :as em]
   [tcljc.main.watcher :as watcher]
   [tcljc.main.options :as options]
   [tcljc.main.efmt :as efmt]
   [tcljc.main.invoke :as invoke]
   [tcljc.main.tclj0 :as tclj0])
  (:import
   (tcljc.main.options Options)
   (clojure.lang IPersistentMap ExceptionInfo)
   (java.util Optional)
   (java.util.function Consumer)))

;;; Transitively remove all namespaces from `dep-map` for which
;;; `pred-good` returns false, and delete all of their associated
;;; class files.
(defn- drop-bad-namespaces! ^IPersistentMap [^IPersistentMap dep-map
                                             ^Options opts pred-good]
  (let [!known-good (java.util.HashMap.)]
    (letfn [(known-good? [ns-str]
              (if-some [x (.get !known-good ns-str)] ;do not use `or` here
                x                        
                (let [dep-info (get dep-map ns-str)
                      good? (object (and ^boolean (pred-good dep-info)
                                         (every? known-good?
                                                 (:req-strs dep-info))))]
                  ;; note: imported class files have no req-strs and
                  ;; are implicitly "good"
                  (.put !known-good ns-str good?)
                  good?)))]
      (reduce-kv (fn [acc ns-str _]
                   (if (known-good? ns-str)
                     acc
                     (do (cfg/delete-package-classes (.dest-dir opts) ns-str)
                         (dissoc acc ns-str))))
                 dep-map dep-map))))

;; Returns the dependency map of all completed(!) namespaces.  On
;; return, there is no class file output from namespaces that were not
;; compiled successfully.
(defn build-pass ^IPersistentMap [^Options opts ^Consumer on-completion
                                  ^IPersistentMap prior-completed-map]
  (letfn [(report-success ^IPersistentMap [^IPersistentMap nmsp-map]
            ;; returns `dep-map` or throws an ExceptionInfo with
            ;; embedded `dep-map`
            (let [dep-map (em/dependency-map ^java.util.Map nmsp-map)]
              (try
                (.accept on-completion (Optional/of nmsp-map)) ;not dep-map!
                dep-map
                (catch Throwable t
                  (throw (wrong/assoc-dep-map t dep-map))))))
          (report-failure ^void []
            (.accept on-completion (Optional/empty)))
          (try-build-and-report ^IPersistentMap []
            (try
              (-> (tclj0/build-all opts true)
                  (time)
                  (report-success))
              (catch ExceptionInfo e
                (report-failure)
                (efmt/print-emap e)
                (:emitter/namespaces (ex-data e)))
              (catch Throwable t
                (report-failure)
                (throw t))
              (finally                 ;use finally to preserve result
                (println))))
          (keep-across-import [prior build]
            ;; preserve old rpaths and req-strs info if this namespace
            ;; was imported from class files instead of being compiled
            (if (em/imported-namespace? build)
              (or prior {})  ;we may already know about this namespace
              build))]
    (let [dep-map (try-build-and-report)]
      (-> (merge-with keep-across-import prior-completed-map dep-map)
          (drop-bad-namespaces! opts em/completed-namespace?)))))

(defn run
  (^boolean [^Options opts]
   (run opts
     (^Consumer fn [opt-nmsp-map]
      (when (.isPresent ^Optional opt-nmsp-map)
        (let [nmsp-map (.get ^Optional opt-nmsp-map)
              resultv (invoke/invoke-until-failure nmsp-map opts true)]
          (println (invoke/completion-report opts resultv)))))))
  (^boolean [^Options opts ^Consumer on-completion]
   (options/print-options opts)
   (when (nil? (.dest-dir opts))
     (options/abort "error: mode `--watch` requires a destination directory"))
   (tclj0/wipe-dest-dir opts)
   (loop [w (watcher/new-watcher (.sourcev opts))
          dep-map (build-pass opts on-completion {})]
     (let [w (watcher/wait-for-changes w (.wait-after-change-ms opts))
           pred-modified (watcher/mk-modified? w)
           dep-map (->> (fn ^boolean [dep-info]
                          (not (some pred-modified (:rpaths dep-info))))
                        (drop-bad-namespaces! dep-map opts))]
       (recur w (build-pass opts on-completion dep-map))))
   false))                                ;unreachable
