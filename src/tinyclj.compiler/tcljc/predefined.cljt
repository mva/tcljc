;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.predefined
  (:require
   [tcljc.classfile :as cf]
   [tcljc.config :as cfg]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.wrong :as wrong]
   [tcljc.expr :as x]
   [tcljc.compiler :as compiler])
  (:import
   (tcljc.classfile ILdStInstr)
   (tcljc.expr Expr BindingRef FnPrimitiveFn FnMacroFn)
   (tcljc.context Ctx)
   (clojure.lang Symbol IPersistentMap)
   (jdk.classfile Opcode)
   (java.lang.invoke MethodHandles$Lookup)
   (java.util HashMap)
   (java.util.regex Pattern PatternSyntaxException)))

(defn- globals-ns-primitive []
  (letfn [(put-prim [m ^Symbol nm ^FnPrimitiveFn pfn]
            (.put ^HashMap m (name nm)
                  (x/primitive-fn-ref nm cfg/primitive-ns-str pfn))
            m)
          (put-macro [m ^Symbol nm ^FnMacroFn mfn]
            (.put ^HashMap m (name nm)
                  (x/macro-ref nm cfg/primitive-ns-str mfn nil nil))
            m)
          (put-nary [m ^Symbol nm ^FnPrimitiveFn pfn ^Expr id ^int min-argc]
            (let [nm* (symbol nil (str (name nm) "-nary"))
                  pfn* (compiler/nary-numeric min-argc id pfn)]
              (-> (put-prim m nm pfn)
                  (put-prim nm* pfn*))))
          (put-nary-cmp [m ^Symbol nm ^FnPrimitiveFn pfn]
            (-> (put-prim m nm pfn)
                (put-prim (symbol nil (str (name nm) "-nary"))
                          (compiler/nary-cmp pfn))))]
    (-> (HashMap.)

        ;; primitive conversion functions
        (put-prim 'object compiler/object-primitive)
        (put-prim 'boolean compiler/boolean-primitive)
        (put-prim 'byte (compiler/primitive-conv-to jb/byte))
        (put-prim 'short (compiler/primitive-conv-to jb/short))
        (put-prim 'char (compiler/primitive-conv-to jb/char))
        (put-prim 'int (compiler/primitive-conv-to jb/int))
        (put-prim 'float (compiler/primitive-conv-to jb/float))
        (put-prim 'long (compiler/primitive-conv-to jb/long))
        (put-prim 'double (compiler/primitive-conv-to jb/double))
        
        ;; arithmetics
        (put-nary 'xadd (compiler/arith-2 Opcode/IADD) x/expr-zero-int 0)
        (put-nary 'xsub (compiler/arith-2 Opcode/ISUB) x/expr-zero-int 1)
        (put-nary 'xmul (compiler/arith-2 Opcode/IMUL) x/expr-one-int 0)
        (put-nary 'xdiv-float (compiler/arith-2-float Opcode/IDIV)
                  x/expr-one-int 1)
        (put-prim 'xdiv-int compiler/arith-2-xdiv-int)
        (put-prim 'xrem (compiler/arith-2 Opcode/IREM))
        
        ;; bitset operations
        (put-prim 'xdefault compiler/xdefault)
        (put-prim 'xand (compiler/bits-2 Opcode/IAND))
        (put-prim 'xor (compiler/bits-2 Opcode/IOR))
        (put-prim 'xxor (compiler/bits-2 Opcode/IXOR))
        (put-prim 'xshl (compiler/shift-2 Opcode/ISHL))
        (put-prim 'xshr (compiler/shift-2 Opcode/ISHR))
        (put-prim 'xushr (compiler/shift-2 Opcode/IUSHR))
        
        ;; comparisons -- also provide nary variants as primitives,
        ;; because the macro equivalents are somewhat cumbersome do
        ;; implement early in tinyclj.core
        (put-nary-cmp 'equiv compiler/equiv)
        (put-nary-cmp 'eq (compiler/binary-cmp cf/eq))
        (put-nary-cmp 'lt (compiler/binary-cmp cf/lt))
        (put-nary-cmp 'ge (compiler/binary-cmp cf/ge))
        (put-nary-cmp 'gt (compiler/binary-cmp cf/gt))
        (put-nary-cmp 'le (compiler/binary-cmp cf/le))
        (put-prim 'acmpeq (compiler/binary-cmp-ref cf/eq))
        (put-prim 'acmpne (compiler/binary-cmp-ref cf/ne))

        ;; arrays
        (put-prim 'alength compiler/alength-form)
        (put-prim 'xaload compiler/xaload-form)
        (put-prim 'xastore compiler/xastore-form)

        ;; misc
        (put-prim 'list compiler/list-primitive)
        (put-prim 'not compiler/not-primitive)
        (put-prim 'str compiler/concat-primitive)
        (put-prim 'identity compiler/identity-primitive)
        (put-macro 'macroexpand-1 compiler/macroexpand-1-form)
        (put-macro 'macroexpand compiler/macroexpand-form)
        (put-macro 'read-string compiler/read-string-form))))

(def implicit-known-ns
  (let [globals (-> {cfg/key-force-clinit x/expr-empty}
                    (into (globals-ns-primitive)))]
    {cfg/primitive-ns-str globals}))

(def macro-regex-literal
  (^FnMacroFn fn [ctx form]
   (try
     (Pattern/compile (second form))
     (catch PatternSyntaxException e
       (wrong/other (str "invalid regex: " e) form)))))

(letfn [(assoc-predef-macro [m ^Symbol sym ^FnMacroFn mfn]
          (let [nm (name sym)]
            (assoc m nm
                   (x/macro-ref (symbol nil nm) cfg/core-lib mfn nil nil))))
        (mk-ld ^ILdStInstr [^String field-nm]
          (cf/ld-st-static rt/ClojureRT field-nm rt/Var))
        (conj-var! [acc ^String field-nm ^Class tp ^Symbol nm]
          (let [bref (x/global-ref nm cfg/core-lib tp false true nil)]
            (.deliver-load bref (mk-ld field-nm))
            (conj! acc [(name nm) bref])))]
  
  (defn core-ns-globals [^java.lang.invoke.MethodHandles$Lookup l]
    (let [tp-Namespace (.findClass l "clojure.lang.Namespace")
          tp-Agent (.findClass l "clojure.lang.Agent")
          tp-Writer (.findClass l "java.io.Writer")]
      (-> {}
          (assoc-predef-macro cfg/sym-regex-literal macro-regex-literal)
          (transient)
          (conj-var! "CURRENT_NS" tp-Namespace '*ns*)
          (conj-var! "AGENT" tp-Agent '*agent*)
          (conj-var! "OUT" tp-Writer '*out*)
          (conj-var! "IN" jb/Object '*in*)
          (conj-var! "ERR" jb/Object '*err*)
          (conj-var! "FLUSH_ON_NEWLINE" jb/Object '*flush-on-newline*)
          (conj-var! "PRINT_META" jb/Object '*print-meta*)
          (conj-var! "PRINT_DUP" jb/Object '*print-dup*)
          (conj-var! "PRINT_READABLY" jb/Object '*print-readably*)
          (conj-var! "ASSERT" jb/Object '*assert*)
          (persistent!)))))

(defn initial-globals-for ^IPersistentMap [^MethodHandles$Lookup l
                                           ^String ns-str]
  (if (cfg/core-lib? ns-str)
    (core-ns-globals l)
    {}))
