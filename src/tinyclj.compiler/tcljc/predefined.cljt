;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.predefined
  (:require
   [tcljc.classfile :as cf]
   [tcljc.config :as cfg]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.wrong :as wrong]
   [tcljc.expr :as x]
   [tcljc.exprfold :as xf]
   [tcljc.type :as tp]
   [tcljc.compiler.adapt :as adapt]
   [tcljc.compiler.conv :as conv]
   [tcljc.compiler :as compiler])
  (:import
   (tcljc.expr Expr BindingRef FnPrimitiveFn FnMacroFn)
   (clojure.lang Symbol)
   (java.lang.classfile Opcode)
   (java.lang.constant MethodTypeDesc MethodHandleDesc)
   (java.util HashMap)))

(defn- type-conversion-to ^FnPrimitiveFn [^tcljc.type.Wrapper tp]
  (^FnPrimitiveFn fn [form argv x-env compile-io]
   (let [arg (adapt/arg form argv adapt/any-to-identity)]
     (.adapt (if (x/primitive? arg) (.primitive-to tp) (.reference-to tp))
             arg))))

(def ^:private identity-primitive
  (^FnPrimitiveFn fn [form argv x-env compile-io]
   (x/identity (adapt/arg form argv adapt/any-to-identity))))

(def ^:private not-primitive
  (^FnPrimitiveFn fn [form argv x-env compile-io]
   (-> (adapt/arg form argv adapt/to-clojure-logical)
       (xf/icmp x/expr-false cf/eq))))

(def ^:private concat-primitive
  (^FnPrimitiveFn fn [form argv x-env compile-io]
   (xf/string-concat x-env argv)))


(defn- arith-2 ^FnPrimitiveFn [^int spec ^Opcode int-opc]
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (let [args (adapt/numeric-2-args spec form args)]
     (xf/arith-2 x-env (aget args 0) (aget args 1) int-opc))))

(defn- bits-2 ^FnPrimitiveFn [^Opcode int-opc]
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (let [args (adapt/numeric-2-args adapt/numeric-to-integral form args)]
     (xf/bits-2 (aget args 0) (aget args 1) int-opc))))

(defn- shift-2 ^FnPrimitiveFn [^Opcode int-opc]
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (wrong/check-argc 2 form)
   (let [arg0 (adapt/checked adapt/numeric-to-integral (nth args 0))
         arg1 (adapt/checked adapt/numeric-to-int (nth args 1))]
     (xf/bits-2 arg0 arg1 int-opc))))

(def ^:private arith-2-xdiv-int
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (let [args (adapt/numeric-2-args adapt/numeric-to-computational form args)
         x (xf/arith-2 x-env (aget args 0) (aget args 1) Opcode/IDIV)]
     ;; FIXME... this does not work if the result is out of range of
     ;; long; maybe better: truncate with something along the line of
     ;; `(if (neg? x) (Math/ceil x) (Math/floor x))` (or put this into
     ;; a static method that first checks if the division result is in
     ;; range for long, and only falls back to the ceil/floor variant
     ;; if out of range)
     (condp x/type? x
       jb/float
       (->> x (.adapt (.primitive-to tp/long)) (.adapt (.primitive-to tp/float)))
       jb/double
       (->> x (.adapt (.primitive-to tp/long)) (.adapt (.primitive-to tp/double)))
       #_else x))))

(defn- nary-numeric ^FnPrimitiveFn [^int min-argc ^Expr id ^FnPrimitiveFn pfn]
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (wrong/check-argc-min min-argc form)
   (case (bounded-count 3 args)
     0 id
     1 (.assemble pfn nil (list id (first args)) x-env compile-io)
     2 (.assemble pfn form args x-env compile-io)
     (reduce #(.assemble pfn nil (list %1 %2) x-env compile-io)
             (first args) (rest args)))))

(def ^:private xdefault
  (^FnPrimitiveFn fn [form [arg0] x-env compile-io] ;discards argument!
   (wrong/check-argc 1 form)
   (tp/default-value-of (x/type arg0))))


(defn- binary-cmp ^FnPrimitiveFn [^int cmp-opcd]
  (^FnPrimitiveFn fn [form [arg0 arg1] x-env compile-io]
   (let [args (adapt/numeric-2 adapt/numeric-to-computational arg0 arg1)]
     (xf/xcmp (aget args 0) (aget args 1) cmp-opcd))))

(defn- binary-cmp-ref ^FnPrimitiveFn [^int cmp-opcd]
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (let [args (adapt/reference-2-args form args)]
     (xf/acmp (aget args 0) (aget args 1) cmp-opcd))))

;;; Note: Clojure's equiv does not follow Java's equals with regard to
;;; e.g. negative zero -- (= -0.0 0.0) is true like Util/equiv, at
;;; least with Clojure 1.11.1.  To match this, both (hash -0.0) and
;;; (hash 0.0) map to zero.  This means that `=` can be lowered to
;;; `==` for floating point types as well.
(def ^:private equiv
  (^FnPrimitiveFn fn [form [arg0 arg1] x-env compile-io]
   (letfn [(equiv-if-identical? ^boolean [^Expr x]
             (let [tp (x/type x)]
               (or (jb/same-class? Class tp)
                   (.isAssignableFrom java.lang.Enum tp)
                   (jb/same-classname? rt/clnm-keyword tp))))]
     (wrong/check-argc 2 form)
     (let [tp0 (tp/of-expr arg0), tp1 (tp/of-expr arg1)]
       (cond
         (and (.computational-int? tp0) (x/same-type? arg0 arg1))
         ;; includes boolean/boolean & char/char
         (xf/icmp arg0 arg1 cf/eq)
         
         (or (tp/primitive? tp0) (tp/primitive? tp1))
         (let [args (adapt/numeric-2 adapt/numeric-to-computational arg0 arg1)]
           (xf/xcmp (aget args 0) (aget args 1) cf/eq))

         (or (equiv-if-identical? arg0) (equiv-if-identical? arg1))
         (xf/acmp arg0 arg1 cf/eq)
         
         :else
         (x/invoke-xref x-env jb/boolean [arg0 arg1] rt/mhd-equiv))))))


(def ^:private alength-form
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (let [args (adapt/args form args adapt/array-to-identity)]
     (x/array-length (aget args 0)))))

(def ^:private array-copy-of-form
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (let [a (adapt/arg form args adapt/array-to-identity)
         atp (x/type a)
         param-tp (if (jb/reference? (.getComponentType atp))
                    jb/ObjectArray
                    atp)
         param-cd (rt/describe-class param-tp)
         mtd (MethodTypeDesc/of param-cd param-cd rt/int)
         mhd (MethodHandleDesc/ofMethod rt/mhk-static
                                        (rt/describe-class java.util.Arrays)
                                        "copyOf" mtd)]
     (-> (x/invoke-xref x-env param-tp
                        [a (x/array-length (x/dup atp))] nil mhd false)
         (xf/checkcast atp)))))

(def ^:private xaload-form
  (^FnPrimitiveFn fn [form args x-env compile-io]
   (let [args (adapt/args form args adapt/array-to-identity
                          adapt/numeric-to-int)
         a (aget args 0), i (aget args 1)
         ccl (.componentType (x/type a))
         opc (cf/bc2opc Opcode/IALOAD (cf/opcode-delta ccl))]
     (x/insn* x-env ccl [a i]
              (java.lang.classfile.instruction.ArrayLoadInstruction/of opc)))))

(def ^:private xastore-form
  (^FnPrimitiveFn fn [form args x-env compile-io]
   ;; Unlike the xASTORE bytecode, this primitive returns the stored
   ;; value.  If passed to `pop`, then the final "DUP*" argument can
   ;; be dropped in favour of doing the matching "POP*".
   (let [args (adapt/args form args adapt/array-to-identity
                          adapt/numeric-to-int adapt/any-to-identity)
         a (aget args 0), i (aget args 1)
         ccl (.componentType (x/type a))
         v (conv/consume (nth args 2) ccl "array component")
         opc (cf/bc2opc Opcode/IASTORE (cf/opcode-delta ccl))]
     (x/insn* x-env ccl [a i v (x/dup-x2 ccl)]
              (java.lang.classfile.instruction.ArrayStoreInstruction/of opc)))))

;;; ------------------------------------------------------------------------

(defn- globals-ns-primitive []
  (letfn [(put-prim [m ^Symbol nm ^FnPrimitiveFn pfn]
            (.put ^HashMap m (name nm)
                  (x/primitive-fn-ref nm cfg/primitive-ns-str pfn))
            m)
          (put-macro [m ^Symbol nm ^FnMacroFn mfn]
            (.put ^HashMap m (name nm)
                  (x/macro-ref nm cfg/primitive-ns-str mfn nil nil))
            m)
          (put-nary [m ^Symbol nm ^FnPrimitiveFn pfn ^Expr id ^int min-argc]
            (let [nm* (symbol nil (str (name nm) "-nary"))
                  pfn* (nary-numeric min-argc id pfn)]
              (-> (put-prim m nm pfn)
                  (put-prim nm* pfn*))))
          (put-nary-cmp [m ^Symbol nm ^FnPrimitiveFn pfn]
            (-> (put-prim m nm pfn)
                (put-prim (symbol nil (str (name nm) "-nary"))
                          (compiler/nary-cmp pfn))))]
    (-> (HashMap.)

        ;; primitive conversion functions
        (put-prim 'object (type-conversion-to tp/generic-reference))
        (put-prim 'boolean (type-conversion-to tp/logical))
        (put-prim 'byte (type-conversion-to tp/byte))
        (put-prim 'short (type-conversion-to tp/short))
        (put-prim 'char (type-conversion-to tp/char))
        (put-prim 'int (type-conversion-to tp/int))
        (put-prim 'float (type-conversion-to tp/float))
        (put-prim 'long (type-conversion-to tp/long))
        (put-prim 'double (type-conversion-to tp/double))
        
        ;; arithmetics
        (put-nary 'xadd (arith-2 adapt/numeric-to-computational Opcode/IADD)
                  x/expr-zero-int 0)
        (put-nary 'xsub (arith-2 adapt/numeric-to-computational Opcode/ISUB)
                  x/expr-zero-int 1)
        (put-nary 'xmul (arith-2 adapt/numeric-to-computational Opcode/IMUL)
                  x/expr-one-int 0)
        (put-nary 'xdiv-float (arith-2 adapt/numeric-to-floating-point Opcode/IDIV)
                  x/expr-one-int 1)
        (put-prim 'xdiv-int arith-2-xdiv-int)
        (put-prim 'xrem (arith-2 adapt/numeric-to-computational Opcode/IREM))
        
        ;; bitset operations
        (put-prim 'xdefault xdefault)
        (put-prim 'xand (bits-2 Opcode/IAND))
        (put-prim 'xor (bits-2 Opcode/IOR))
        (put-prim 'xxor (bits-2 Opcode/IXOR))
        (put-prim 'xshl (shift-2 Opcode/ISHL))
        (put-prim 'xshr (shift-2 Opcode/ISHR))
        (put-prim 'xushr (shift-2 Opcode/IUSHR))
        
        ;; comparisons -- also provide nary variants as primitives,
        ;; because the macro equivalents are somewhat cumbersome do
        ;; implement early in tinyclj.core
        (put-nary-cmp 'equiv equiv)
        (put-nary-cmp 'eq (binary-cmp cf/eq))
        (put-nary-cmp 'lt (binary-cmp cf/lt))
        (put-nary-cmp 'ge (binary-cmp cf/ge))
        (put-nary-cmp 'gt (binary-cmp cf/gt))
        (put-nary-cmp 'le (binary-cmp cf/le))
        (put-prim 'acmpeq (binary-cmp-ref cf/eq))
        (put-prim 'acmpne (binary-cmp-ref cf/ne))

        ;; arrays
        (put-prim 'alength alength-form)
        (put-prim 'xaload xaload-form)
        (put-prim 'xastore xastore-form)
        (put-prim 'array-copy-of array-copy-of-form)

        ;; misc
        (put-prim 'list compiler/list-primitive)
        (put-prim 'not not-primitive)
        (put-prim 'str concat-primitive)
        (put-prim 'identity identity-primitive)
        (put-macro 'macroexpand-1 compiler/macroexpand-1-form)
        (put-macro 'macroexpand compiler/macroexpand-form)
        (put-macro 'read-string compiler/read-string-form))))

(def implicit-known-ns
  (let [globals (-> {cfg/key-force-clinit x/expr-empty}
                    (into (globals-ns-primitive)))]
    {cfg/primitive-ns-str globals}))

(def macro-regex-literal
  (^FnMacroFn fn [ctx form]
   (try
     (java.util.regex.Pattern/compile (second form))
     (catch java.util.regex.PatternSyntaxException e
       (wrong/other (str "invalid regex: " e))))))

(letfn [(assoc-predef-macro [m ^Symbol sym ^FnMacroFn mfn]
          (let [nm (name sym)]
            (assoc m nm
                   (x/macro-ref (symbol nil nm) cfg/core-lib mfn nil nil))))
        (mk-ld ^tcljc.classfile.ILdStInstr [^String field-nm]
          (cf/ld-st-static rt/ClojureRT field-nm rt/Var))
        (conj-var! [acc ^String field-nm ^Class tp ^Symbol nm]
          (let [bref (x/global-ref nm cfg/core-lib tp false true nil)]
            (.deliver-load bref (mk-ld field-nm))
            (conj! acc [(name nm) bref])))]
  
  (defn core-ns-globals [^java.lang.invoke.MethodHandles$Lookup l]
    (let [tp-Namespace (.findClass l "clojure.lang.Namespace")
          tp-Agent (.findClass l "clojure.lang.Agent")
          tp-Writer (.findClass l "java.io.Writer")]
      (-> {}
          (assoc-predef-macro cfg/sym-regex-literal macro-regex-literal)
          (transient)
          (conj-var! "CURRENT_NS" tp-Namespace '*ns*)
          (conj-var! "AGENT" tp-Agent '*agent*)
          (conj-var! "OUT" tp-Writer '*out*)
          (conj-var! "IN" jb/Object '*in*)
          (conj-var! "ERR" jb/Object '*err*)
          (conj-var! "FLUSH_ON_NEWLINE" jb/Object '*flush-on-newline*)
          (conj-var! "PRINT_META" jb/Object '*print-meta*)
          (conj-var! "PRINT_DUP" jb/Object '*print-dup*)
          (conj-var! "PRINT_READABLY" jb/Object '*print-readably*)
          (conj-var! "ASSERT" jb/Object '*assert*)
          (persistent!)))))
