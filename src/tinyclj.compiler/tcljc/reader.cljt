;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.reader
  (:require
   [tcljc.config :as cfg]
   [tcljc.wrong :as wrong]
   [tcljc.parser :as p]
   tcljc.io
   tcljc.context
   [tcljc.synquote :as sq]
   [tinyclj.string :as str])
  (:import
   (tcljc.context Ctx)
   (clojure.lang Symbol Keyword IPersistentMap IPersistentSet ISeq IMeta IObj
                 ExceptionInfo)
   (java.util ArrayList LinkedList)
   (java.util.regex Matcher)))

(defn- wrong [& msg-parts]
  (throw (wrong/mk-e (str/join " " msg-parts))))

(defn- mk-arg-env ^ArrayList []
  (doto (ArrayList.) (.add nil)))

(def ^:private fnlit-param-pat #"(?:(rest)|p(\d+))__fnlit__")
(def ^:private max-fnlit-param 255)

(defn- replacement-sym [^int idx]
  (symbol nil (str (if (zero? idx) "rest" (str "p" idx)) "__fnlit__")))

(defn- update-tag-count ^void [^ArrayList arg-env ^int idx tag ^int delta]
  (let [m (-> (.get arg-env idx)
              (update tag #(+ (if (nil? %) 0 (int %)) delta)))]
    (.set arg-env idx m)))

(defn- register-arg! ^Symbol [^ArrayList arg-env ^int idx]
  ;; pre: `idx` is not negative, with zero meaning "rest parameter"
  (while (<= (.size arg-env) idx)
    (.add arg-env {}))
  (update-tag-count arg-env idx nil +1)
  (replacement-sym idx))

(defn- replacement-idx ^int [x] ;-1 if `x` is not a replacement for a fnlit arg
  (if (and (symbol? x) (nil? (namespace x)))
    (let [m (.matcher fnlit-param-pat (name x))]
      (if (.matches m)
        (if (some? (.group m 1))
          0
          (let [n (Integer/parseInt (.group m 2))]
            (if (<= 1 n max-fnlit-param) n -1)))
        -1))
    -1))

(defn- merge-meta [^IPersistentMap m dm]
  (cond
    (symbol? dm) (assoc m :tag dm)
    (keyword? dm) (assoc m dm (object true))
    (string? dm) (assoc m :tag dm)
    (map? dm) (merge m dm)
    :else (wrong "metadata must be symbol, keyword, string or map")))

(defn- register-meta! [^IMeta x ^IPersistentMap m ^ArrayList arg-env]
  (when (some? arg-env)
    (let [idx (replacement-idx x)]
      (when (>= idx 0)
        (update-tag-count arg-env idx (get (meta x) :tag) -1)
        (update-tag-count arg-env idx (get m :tag) +1))))
  (with-meta x m))

(deftype Accumulator [^int nl-count-at-open, ^ArrayList elements])
(defn- mk-acc ^Accumulator [^int nl-count]
  (Accumulator. nl-count (ArrayList.)))
(defn- add-element ^void [^Accumulator acc element]
  (.add (.elements acc) element))
(defn- push+mk-acc ^Accumulator [^LinkedList parents acc ^int nl-count]
  (.addFirst parents acc)
  (mk-acc nl-count))
(defn- pop-acc ^Accumulator [^LinkedList parents]
  (.removeFirst parents))

(letfn [(with-line-meta [x ^Accumulator acc]
          (with-meta x {:line (inc (.nl-count-at-open acc))}))]
  (defn list-with-line
    ([^Accumulator acc]
     (cond-> (tinyclj.lang.Literal/listOfList (.elements acc))
       (not (.isEmpty (.elements acc)))
       (with-line-meta acc)))
    ([^Symbol op ^Accumulator acc1]
     (-> (list op (.get (.elements acc1) 0))
         (with-line-meta acc1))))

  (defn parse-syntax-quote [^Ctx ctx ^Accumulator acc1]
    (let [x (sq/encode (.get (.elements acc1) 0) ctx)]
      (cond-> x (instance? IObj x) (with-line-meta acc1)))))

(defn- parse-fnlit [^Accumulator acc ^ArrayList arg-env]
  (letfn [(type-str [x]
            (if (nil? x) "(none)" (str x)))
          (tagged-parameter [^int idx]
            (let [sym (replacement-sym idx)
                  tags (->> (.get arg-env idx)
                            (filter #(not (zero? ^int (val %))))
                            (map key))]
              (when (> (count tags) 1)
                (wrong "conflicting type tags for arg literal:"
                       (str/join " " (->> tags (map type-str) sort))))
              (if-some [tag (first tags)]
                (with-meta sym {:tag tag})
                sym)))
          (fnlit-sig []
            (with-meta
              (->> (when (some? (seq (.get arg-env 0)))
                     ['& (tagged-parameter 0)])
                   (concat (for [idx (range 1 (.size arg-env))]
                             (tagged-parameter ^int idx)))
                   (vec))
              {:tag 'auto-return-type}))]
    (let [expr (list-with-line acc)]
      (with-meta (list 'fn* (fnlit-sig) expr) (meta expr)))))

;;; ------------------------------------------------------------------------

(def ^:private int-pat    ;from LispReader.java, but added suffix [lL]
  #"([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)([lLN])?")
(def ^:private float-pat  ;from LispReader.java, but added suffix [fF]
  #"([-+]?[0-9]+(\.[0-9]*)?([eE][-+]?[0-9]+)?)([fFM])?")
(def ^:private ratio-pat                ;from LispReader.java
  #"([-+]?[0-9]+)/([0-9]+)")

(defn- parse-number [^String s]   ;see matchNumber in LispReader.java 
  (letfn [(unsupported-big-int []
            (wrong "BigInt values are not supported"))
          (parse-int [^Matcher m ^String n ^int radix]
            (let [bn (cond-> (BigInteger. n radix)
                       (= "-" (.group m 1)) (.negate))
                  x (.group m 8)]
              (if (some? x)
                (case (.charAt x 0)
                  \N (unsupported-big-int)
                  (\l \L) (if (< (.bitLength bn) 64)
                            (object (.longValue bn))
                            (wrong (str "value out of range for long: " bn)))
                  #_else (wrong (str "unsupported number suffix: " x)))
                (if (< (.bitLength bn) 32)
                  (object (.intValue bn))
                  (wrong (str "value out of range for int: " bn))))))
          (match-int [^Matcher m]
            (if-some [n (or (.group m 2) (.group m 3))]
              (parse-int m n 10)
              (if-some [n (.group m 4)]
                (parse-int m n 16)
                (if-some [n (.group m 5)]
                  (parse-int m n 8)
                  (if-some [n (.group m 7)]
                    (parse-int m n (Integer/parseInt (.group m 6)))
                    (wrong "invalid integer number:" (.group m)))))))

          (unsupported-big-decimal []
            (wrong "BigDecimal values are not supported"))
          (match-float [^Matcher m ^String s]
            (if-some [x (.group m 4)]
              (case (.charAt x 0)
                \M (unsupported-big-decimal)
                (\f \F) (object (Float/parseFloat s)))
              (object (Double/parseDouble s))))]

    (try
      (or (let [m (.matcher int-pat s)]
            (when (.matches m)
              (match-int m)))
          (let [m (.matcher float-pat s)]
            (when (.matches m)
              (match-float m s)))
          (let [m (.matcher ratio-pat s)]
            (when (.matches m)
              (wrong "Ratio values are not supported")))
          (wrong "invalid number:" s))
      (catch NumberFormatException e
        (wrong "number format error:" (.getMessage e))))))

(defn- parse-unicode-char ^char [^String s ^int offset ^int length ^int base]
  (when (or (not= (.length s) (+ offset length))
            (neg? (Character/digit (.charAt s offset) base)))
    (wrong "invalid character code:" s))
  (try
    (let [n (Integer/parseInt s offset (+ offset length) base)]
      (if (or (neg? n) (> n (int Character/MAX_VALUE)))
        (do (wrong "character out of range:" s) \0)
        (char n)))
    (catch NumberFormatException e
      (wrong "number format error:" (.getMessage e))
      \0)))

(defn- parse-octal-char ^char [^String s ^int offset ^int length]
  (when (> length 3)
    (wrong "invalid octal escape sequence length:" s))
  (let [uc (parse-unicode-char s offset length 8)]
    (when (> (int uc) 0377)
      (wrong "octal escape sequence must be in range [0, 377]"))
    uc))


(defn- parse-arg-literal [^String s ^ArrayList arg-env]
  (letfn [(parse-arg-num ^int [^String s] ;pre: (.length s) > 1
            (let [n (if (Character/isDigit (.charAt s 1))
                      (try
                        (Integer/parseUnsignedInt s 1 (.length s) 10)
                        (catch NumberFormatException _
                          -1))
                      -1)]
              (when-not (<= 1 n max-fnlit-param)
                (wrong "arg literal must be %, %& or %integer"))
              n))]
    (cond
      (= s "%") (register-arg! arg-env 1)
      (= s "%&") (register-arg! arg-env 0)
      :else (register-arg! arg-env (parse-arg-num s)))))

(defn- parse-character [^String s]     ;pre: `s` starts with backslash
  ;; see CharacterReader.invoke()
  (let [h (when (> (.length s) 1)
            (.charAt s 1))]
    (or (when (= (.length s) 2)
          (object h))
        (get {"\\newline" \u000a
              "\\space" \u0020
              "\\tab" \u0009
              "\\backspace" \u0008
              "\\formfeed" \u000c
              "\\return" \u000d} s nil)
        (when (= h \u)
          (let [uc (parse-unicode-char s 2 4 16)]
            (if (<= 0xD800 (int uc) 0xDFFF) ;surrogate code unit?
              (wrong "invalid surrogate character:" s)
              (object uc))))
        (when (= h \o)
          (object (parse-octal-char s 2 (- (.length s) 2))))
        (wrong "unsupported character:" s))))

(defn- parse-sym-or-kw [^String s ^ISeq synquote-stack ^Ctx ctx]
  (letfn [(match-sym-or-kw [^String s]
            ;; See matchSymbol in LispReader.java.  Note: Regex
            ;; symbolPat diverges from function `symbol` if there are
            ;; multiple slashes, e.g. like `a/b/c`: regex splits
            ;; ("a/b/" "c") while symbol splits ("a/" "b/c").  Because
            ;; of its limited value and the high cost (around half of
            ;; the reader's time!), we do not do any regex matching on
            ;; symbols or keywords.
            (when-not (or #_(and (some? ns) (.endsWith ns ":/"))
                          (.endsWith s ":")
                          (not= (.indexOf s "::" 1) -1))
              (if (.startsWith s ":")
                (if (.startsWith s "::")
                  (let [ks (Symbol/intern (.substring s 2))]
                    (if-some [lookup-key (namespace ks)]
                      (when-some [nstr (get (.get-ns-alias-map ctx) lookup-key)]
                        (Keyword/intern nstr (name ks)))
                      (Keyword/intern (.ns-str ctx) (name ks))))
                  (-> (Symbol/intern (.substring s 1))
                      (Keyword/intern)))
                (cond-> (Symbol/intern s)
                  (some? synquote-stack)
                  (sq/wrap-synquote-name (first synquote-stack))))))]
    (cond
      (.equals "nil" s) nil
      (.equals "true" s) Boolean/TRUE
      (.equals "false" s) Boolean/FALSE
      :else (or (match-sym-or-kw s)
                (wrong "invalid token:" s)))))

(defn- parse-string [^ArrayList parts]  ;see StringReader.invoke()
  (let [sb (StringBuilder.)]
    (letfn [(append-escape ^int [^String s ^int pos] ;pre: (.charAt s pos) = \\
              (let [ch (.charAt s (inc pos))
                    oct? (fn ^boolean [^int d]
                           (if (>= (+ pos d) (.length s))
                             false
                             (>= (Character/digit (.charAt s (+ pos d)) 8) 0)))]
                (case ch
                  \t (do (.append sb \tab) 2)
                  \r (do (.append sb \return) 2)
                  \n (do (.append sb \newline) 2)
                  \\ (do (.append sb \\) 2)
                  \" (do (.append sb \") 2)
                  \b (do (.append sb \backspace) 2)
                  \f (do (.append sb \formfeed) 2)
                  \u (let [j (min (.length s) (+ pos 6))
                           x (.substring s pos j)]
                       (.append sb (parse-unicode-char x 2 4 16))
                       6)
                  #_else
                  (if (Character/isDigit ch)
                    (let [len (if (oct? 2) (if (oct? 3) 3 2) 1)
                          x (.substring s pos (+ pos len 1))]
                      (.append sb (parse-octal-char x 1 len))
                      (inc len))
                    (do (wrong (str "unsupported escape character: \\" ch))
                        0)))))
            (append-chars ^void [^String s]
              (loop [i 0]
                (let [j (.indexOf s "\\" i)]
                  (if (neg? j)
                    (.append sb s i (.length s))
                    (do (.append sb s i j)
                        (recur (+ j (append-escape s j))))))))]
      (run! append-chars parts)
      (.toString sb))))

(defn- checked-map [^ArrayList es]
  (loop [seen #{}, i 0]
    (cond
      (= i (.size es))
      (tinyclj.lang.Literal/map (.toArray es))

      (contains? seen (.get es i))
      (wrong "duplicate key:" (.get es i))

      :else (recur (conj seen (.get es i)) (+ i 2)))))

(defn- checked-set [^ArrayList es]
  (loop [seen #{}, i 0]
    (cond
      (= i (.size es))
      (tinyclj.lang.Literal/set (.toArray es))

      (contains? seen (.get es i))
      (wrong "duplicate key:" (.get es i))

      :else (recur (conj seen (.get es i)) (inc i)))))

(deftype Reader [^String cs
                 ^:unsynchronized-mutable ^int start
                 ^:unsynchronized-mutable ^Accumulator acc
                 ^LinkedList parents    ;used as stack of Accumulators
                 ^:unsynchronized-mutable ^int nl-count
                 
                 ^:unsynchronized-mutable ^Ctx ctx
                 ^:unsynchronized-mutable ^ISeq synquote-stack
                 ^:unsynchronized-mutable ^ISeq unquote-stack
                 ^:unsynchronized-mutable ^ArrayList arg-env
                 ^:unsynchronized-mutable ^int discard-level]
  tcljc.parser.FormBuilder
  (update-pos [_ ex pos]
    (if (contains? (ex-data ex) :reader/line)
      ex
      (loop [line-num 1, i 0]
        (let [j (.indexOf cs "\n" i)]
          (if (or (neg? j) (>= j pos))
            (-> ex
                (wrong/update-ex-data assoc :reader/line (object line-num))
                (wrong/update-ex-data assoc :reader/column (object (- pos i))))
            (recur (inc line-num) (inc j)))))))
  
  (number [this end]
    (when (zero? discard-level)
      (add-element acc (p/with-error-pos this start
                         (parse-number (.substring cs start end)))))
    (set! start end))
  (token [this end]
    (when (zero? discard-level)
      (let [s (.substring cs start end)
            c (.charAt s 0)]
        (add-element acc (p/with-error-pos this start
                           (cond
                             (and (some? arg-env) (= c \%))
                             (parse-arg-literal s arg-env)

                             (= c \\) (parse-character s)
                           
                             :else (parse-sym-or-kw s synquote-stack ctx))))))
    (set! start end))
  (text [_ end nl-before-end?]
    (set! nl-count (+ nl-count (int nl-before-end?)))
    (when (and (not= start end) (zero? discard-level))
      (add-element acc (.substring cs start end)))
    (set! start end))
  (ws [_ end comment? nl-before-end?]
    (set! nl-count (+ nl-count (int nl-before-end?)))
    (set! start end))

  (start [_ end-of-open]
    (cond
      (zero? discard-level)
      (do 
        (set! acc (push+mk-acc parents acc nl-count))
        ;; Push new state for the during of the group, but only if outside
        ;; of any discards.  `end` below pops the state.
        (case (.charAt cs start)
          \` (set! synquote-stack (cons (sq/mk-gensym-map) synquote-stack))
          \~ (do (set! unquote-stack (cons synquote-stack unquote-stack))
                 (set! synquote-stack (next synquote-stack)))
          \# (case (.charAt cs (inc start))
               \( (if (some? arg-env)
                    (wrong "nested fn literals #(...) are not allowed")
                    (set! arg-env (mk-arg-env)))
               \_ (do (set! discard-level (inc discard-level))
                      (set! acc (pop-acc parents))) ;undo
               #_else nil)
          #_else nil))

      (.startsWith cs "#_" start)
      (do (set! discard-level (inc discard-level))
          nil))
    
    (set! start end-of-open))
  (end [this end-of-close start-of-open]
    (cond
      (zero? discard-level)
      (let [x (p/with-error-pos this start-of-open
                (case (.charAt cs start-of-open)
                  \( (list-with-line acc)
                  \[ (tinyclj.lang.Literal/vector (.toArray (.elements acc)))
                  \{ (checked-map (.elements acc))
                  \" (parse-string (.elements acc))

                  \^ (let [dm (.get (.elements acc) 0)
                           x (.get (.elements acc) 1)]
                       (if (instance? IMeta x)
                         (register-meta! x (merge-meta (meta x) dm) arg-env)
                         (wrong "metadata can only be applied to IMeta instances")))
                  \@ (list-with-line 'deref acc)
                  \' (list-with-line cfg/sym-quote acc)
                  \` (do (set! synquote-stack (next synquote-stack))
                         (parse-syntax-quote ctx acc))
                  \~ (let [op (if (.startsWith cs "~@" start-of-open)
                                sq/sym-unquote-splicing
                                sq/sym-unquote)]
                       (set! synquote-stack (first unquote-stack))
                       (set! unquote-stack (next unquote-stack))
                       (list-with-line op acc))
                  
                  \#
                  (case (.charAt cs (inc start-of-open))
                    \{ (checked-set (.elements acc))
                    \( (let [x (parse-fnlit acc arg-env)]
                         (set! arg-env nil)
                         x)
                    \" (let [s (str/join "" (.elements acc))]
                         (.clear (.elements acc))
                         (.add (.elements acc) s)
                         (list-with-line cfg/sym-regex-literal acc))
                    \' (list-with-line 'var acc)
                    \# (let [sval (.get (.elements acc) 0)]
                         (or (get {'Inf Double/POSITIVE_INFINITY
                                   '-Inf Double/NEGATIVE_INFINITY
                                   'NaN Double/NaN} sval)
                             (wrong (str "unknown symbolic value: ##" sval))))
                    \< (wrong "unreadable form"))))]
        (set! acc (pop-acc parents))
        (add-element acc x)
        nil)

      (.startsWith cs "#_" start-of-open)
      (do (set! discard-level (dec discard-level))
          nil))
    (set! start end-of-close))
  
  tcljc.io.Reader
  (read-1 [this form-ctx eof-value]
    ;; (assert (.isEmpty elements))
    ;; (assert (nil? ctx))
    ;; (assert (nil? synquote-stack))
    ;; (assert (nil? unquote-stack))
    ;; (assert (nil? arg-env))
    ;; (assert (zero? discard-level))
    (set! ctx form-ctx)
    (p/parse-1 start this cs)
    (set! ctx nil)
    (if (.isEmpty (.elements acc))
      eof-value
      (do #_(assert (= (.size elements) 1))
          (.remove (.elements acc) 0)))))

(defn mk-reader ^Reader [^String cs]
  (Reader. cs 0 (mk-acc 0) (LinkedList.) 0 nil nil nil nil 0))
