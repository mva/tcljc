;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.runtime      ;symbolic descriptors for stuff from tinyclj.rt
  (:require
   [tcljc.config :as cfg]
   [tcljc.javabase :as jb]
   [tinyclj.string :as str])
  (:import
   (clojure.lang Named ISeq IMeta)
   (java.lang.classfile CodeBuilder)
   (java.lang.classfile.constantpool ConstantPoolBuilder LoadableConstantEntry
                                     ConstantDynamicEntry)
   (java.lang.constant ClassDesc ConstantDescs ConstantDesc Constable
                       DirectMethodHandleDesc DirectMethodHandleDesc$Kind
                       MethodTypeDesc MethodHandleDesc)
   (java.lang.invoke MethodHandles$Lookup MethodHandle TypeDescriptor$OfField)
   (java.lang.reflect Method Constructor)
   (java.util List)
   (java.util.regex Pattern))
  (:refer-clojure
   :exclude [symbol keyword vector map set seq list object objects
             int long float double boolean char byte short void]))

;;; https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/invoke/MethodHandleInfo.html
(def mhk-static DirectMethodHandleDesc$Kind/STATIC)               ;6
(def mhk-virtual DirectMethodHandleDesc$Kind/VIRTUAL)             ;5
(def mhk-special DirectMethodHandleDesc$Kind/SPECIAL)             ;7 super.m()
(def mhk-constructor DirectMethodHandleDesc$Kind/CONSTRUCTOR)     ;8 new C()
(def mhk-getter DirectMethodHandleDesc$Kind/GETTER)               ;1
(def mhk-setter DirectMethodHandleDesc$Kind/SETTER)               ;3
(def mhk-static-getter DirectMethodHandleDesc$Kind/STATIC_GETTER) ;2
(def mhk-static-setter DirectMethodHandleDesc$Kind/STATIC_SETTER) ;4
(def mhk-interface-virtual DirectMethodHandleDesc$Kind/INTERFACE_VIRTUAL) ;9
(def mhk-interface-static DirectMethodHandleDesc$Kind/INTERFACE_STATIC) ;6
(def mhk-interface-special DirectMethodHandleDesc$Kind/INTERFACE_SPECIAL) ;7

(def dcd-default-name ConstantDescs/DEFAULT_NAME)

(defn unreflect ^MethodHandle [^MethodHandles$Lookup lookup x]
  (cond (instance? Method x) (.unreflect lookup x)
        (instance? Constructor x) (.unreflectConstructor lookup x)
        :else (.unreflectGetter lookup x)))

(defn describe-constable ^ConstantDesc [^Constable x]
  (if (nil? x)
    jb/jvm-null
    (.get (.describeConstable x))))
(defn describe-class ^ClassDesc [^Class tp]
  ^ClassDesc (.get (.describeConstable tp)))


(defn null-value-pred ^Boolean [const-value]
  ;; This function assumes that any `const-value` is produced by
  ;; compiler code, and that all non-NULL values (including
  ;; DynamicConstantDesc) always describe some literal and known to be
  ;; non-null value.
  (cond
    (nil? const-value) nil                            ;may be null
    (identical? jb/jvm-null const-value) Boolean/TRUE ;is always null
    :else Boolean/FALSE))                             ;is never null


;;; Return the class descriptor to which classes, field types,
;;; parameter types, and return types `x` are mapped on the JVM level.
;;; Accepts ClassDesc, Class, descriptor string.
(defn cd-of ^ClassDesc [cdx]
  (cond
    (instance? ClassDesc cdx) cdx
    (instance? Class cdx) (describe-class cdx)
    :else (throw (IllegalArgumentException. (str (class cdx))))))

(defn cd-list-of ^List [cdxs]
  (tinyclj.core/map cd-of cdxs))

(def no-param-types (new ClassDesc* 0))

;;; FIXME... bootstrap chokes on MethodTypeDesc/of overloads, so
;;; provide a wrapper that bypasses the confusing stuff for now; can
;;; this be removed once tcljc is its own one and only bootstrap?
(defn mtd-of* ^MethodTypeDesc [^ClassDesc return-type & ^ClassDesc* parameter-types]
  (MethodTypeDesc/of return-type parameter-types))
(defn mtd-of ^MethodTypeDesc [return-type parameter-types]
  (MethodTypeDesc/of (cd-of return-type) (cd-list-of parameter-types)))


(def object-constructor
  (MethodHandleDesc/ofConstructor ConstantDescs/CD_Object no-param-types))
(defn fixed-args-constructor ^DirectMethodHandleDesc [clx cdxs]
  (let [pdescs (-> (cd-list-of cdxs)
                   ^ClassDesc* (.toArray no-param-types))]
    (MethodHandleDesc/ofConstructor (cd-of clx) pdescs)))

;;; ------------------------------------------------------------------------

(def clnm-symbol 'clojure.lang.Symbol)
(def clnm-keyword 'clojure.lang.Keyword)
(def clnm-vector 'clojure.lang.IPersistentVector)
(def clnm-map 'clojure.lang.IPersistentMap)
(def clnm-set 'clojure.lang.IPersistentSet)
(def clnm-list 'clojure.lang.IPersistentList)
(def clnm-seq 'clojure.lang.ISeq)
(def clnm-iobj 'clojure.lang.IObj)

(def symbol (ClassDesc/of (name clnm-symbol)))
(def keyword (ClassDesc/of (name clnm-keyword)))
(def ^:private vector (ClassDesc/of (name clnm-vector)))
(def map (ClassDesc/of (name clnm-map)))
(def ^:private set (ClassDesc/of (name clnm-set)))
(def list (ClassDesc/of (name clnm-list)))
(def ^:private seq (ClassDesc/of (name clnm-seq)))
(def pattern (ClassDesc/of "java.util.regex.Pattern"))
(def iobj (ClassDesc/of (name clnm-iobj)))

(def int ConstantDescs/CD_int)
(def ^:private long ConstantDescs/CD_long)
(def ^:private float ConstantDescs/CD_float)
(def ^:private double ConstantDescs/CD_double)
(def boolean ConstantDescs/CD_boolean)
(def ^:private char ConstantDescs/CD_char)
(def ^:private byte ConstantDescs/CD_byte)
(def ^:private short ConstantDescs/CD_short)
(def void ConstantDescs/CD_void)

(def object ConstantDescs/CD_Object)
(def ^:private objects (.arrayType object))

(def MethodHandle ConstantDescs/CD_MethodHandle)
(def MethodHandleArray (.arrayType MethodHandle))
(def ^:private Lookup ConstantDescs/CD_MethodHandles_Lookup)
(def ^:private MethodType ConstantDescs/CD_MethodType)
(def ^:private CallSite ConstantDescs/CD_CallSite)
(def ^:private TypeDescriptor (ClassDesc/of "java.lang.invoke.TypeDescriptor"))
(def ^:private LambdaMetafactory (ClassDesc/of "java.lang.invoke.LambdaMetafactory"))
(def ^:private ObjectMethods (ClassDesc/of "java.lang.runtime.ObjectMethods"))
(def ^:private Member (ClassDesc/of "java.lang.reflect.Member"))

(def ^:private Object object)
(def ^:private ObjectArray (.arrayType Object))
(def ^:private Class ConstantDescs/CD_Class)
(def Record (ClassDesc/of "java.lang.Record"))
(def String (ClassDesc/of "java.lang.String"))
(def ^:private Exception (ClassDesc/of "java.lang.Exception"))
(def ^:private Function (ClassDesc/of "java.util.function.Function"))

(def Alias (ClassDesc/of "tinyclj.lang.Alias"))
(def Macro (ClassDesc/of "tinyclj.lang.Macro"))
(def RT (ClassDesc/of "tinyclj.lang.RT"))
(def ^:private Literal (ClassDesc/of "tinyclj.lang.Literal"))
(def ^:private BootstrapMethod (ClassDesc/of "tinyclj.lang.BootstrapMethod"))

(def clnm-Var 'clojure.lang.Var)

(def ClojureRT (ClassDesc/of "clojure.lang.RT"))
(def ^:private ClojureUtil (ClassDesc/of "clojure.lang.Util"))
(def Var (ClassDesc/of (name clnm-Var)))
(def ^:private ArraySeq (ClassDesc/of "clojure.lang.ArraySeq"))

(def clnm-ifn 'clojure.lang.IFn)
(def clnm-abstract-fn 'tinyclj.lang.AFnMh)
(def clnm-static-fn 'tinyclj.lang.StaticFnMh)

(def IFn (ClassDesc/of (name clnm-ifn)))
(def AFn (ClassDesc/of (name clnm-abstract-fn)))
(def StaticFnMh (ClassDesc/of (name clnm-static-fn)))

(def name-requires "requires~1")

(defmacro aclass-desc [ptypev]
  (assert (vector? ptypev))
  `(doto (new java.lang.constant.ClassDesc* ~(count ptypev))
     ~@(map-indexed #(tinyclj.core/list 'aset %1 %2) ptypev)))

(defmacro mtd [rtype ptypev]
  `(MethodTypeDesc/of ~rtype ~(with-meta ptypev {:tag 'java.util.List})))


;;; methods generated by "virtuals" fn translation pattern:
(def name-arity-method "__arityOrNull")
(def mtd-arity-method (mtd MethodHandle [int]))
(def name-dmh-method "__directMethodHandles")
(def mtd-dmh-method (mtd MethodHandleArray []))
(def name-factory-method "__create")
(def name-patch-method "__patch")
(def name-with-meta-impl "__withMetaImpl")
(def name-meta-method "meta")


(defmacro mhd-static [[owner name] rtype ptypev]
  `(MethodHandleDesc/ofMethod mhk-static ~owner ~name (mtd ~rtype ~ptypev)))
(defmacro mhd-virtual [[owner name] rtype ptypev]
  `(MethodHandleDesc/ofMethod mhk-virtual ~owner ~name (mtd ~rtype ~ptypev)))
(defmacro mhd-constr [[owner] ptypev]
  `(MethodHandleDesc/ofConstructor ~owner (aclass-desc ~ptypev)))
(defmacro mhd-itf-virtual [[owner name] rtype ptypev]
  `(MethodHandleDesc/ofMethod mhk-interface-virtual ~owner ~name
                              (mtd ~rtype ~ptypev)))

;;; useful building blocks for descriptors:
(def mtd-void-void (mtd void []))
(def mtd-object-void (mtd Object []))
(def mtd-object-object (mtd Object [Object]))
(def mtd-object-object-object (mtd Object [Object Object]))
(def mtd-map-object (mtd map [Object]))
(def mtd-String-void (mtd String []))

;;; used for coll-literal implementation (e.g. as part of compile-quote):
(def mhd-with-meta (mhd-static [Literal "with_meta"] iobj [iobj map]))
(def mhd-vector (mhd-static [Literal "vector"] vector [objects]))
(def mhd-map (mhd-static [Literal "map"] map [objects]))
(def mhd-set (mhd-static [Literal "set"] set [objects]))
(def mhd-list (mhd-static [Literal "list"] list [objects]))

;;; compilation/runtime interaction:
(def mhd-apply (mhd-static [RT "apply"] object [IFn object]))
(def mhd-applyMacroMapped
  (mhd-static [RT "applyMacroMapped"]
              object [Function Function AFn object object]))
(def mhd-pushFileContext (mhd-static [RT "pushFileContext"] void [String]))
(def mhd-popFileContext (mhd-static [RT "popFileContext"] void []))
(def mhd-markCoreInitialization (mhd-static [RT "markCoreInitialization"]
                                            void [String]))
(def mhd-arityHandlesIfFn (mhd-static [RT "arityHandlesIfFn"]
                                      MethodHandleArray [Lookup Class Object]))
(def mhd-publicDefInfo (mhd-static [RT "publicDefInfo"]
                                   ObjectArray [Lookup Member]))

;;; namespace boilerplate:
(def mhd-createNamespace (mhd-static [RT "createNamespace"] void [String]))
(def mhd-var-2 (mhd-static [ClojureRT "var"] Var [String String]))
(def mhd-var-3 (mhd-static [ClojureRT "var"] Var [String String Object]))
(def mhd-Var-deref (mhd-virtual [Var "deref"] Object []))
(def mhd-Var-set (mhd-virtual [Var "set"] Object [Object]))
(def mhd-Var-setMeta (mhd-virtual [Var "setMeta"] Var [map]))
(def mhd-Var-setDynamic (mhd-virtual [Var "setDynamic"] Var []))
(def mhd-Var-bindRoot (mhd-virtual [Var "bindRoot"] void [Object]))

;;; bytecode/instruction support:
(def mhd-isInstance (mhd-virtual [Class "isInstance"] boolean [Object]))
(def mhd-equiv (mhd-static [ClojureUtil "equiv"] boolean [Object Object]))
(def mhd-no-matching-clause (mhd-static [RT "noMatchingClause"]
                                        Exception [Object]))
(def mhd-methodHandleArray1 (mhd-static [RT "methodHandleArray"]
                                        MethodHandleArray [MethodHandle]))
(def mhd-methodHandleArray* (mhd-static [RT "methodHandleArray"]
                                        MethodHandleArray [MethodHandleArray]))
(def mhd-array-to-iseq (mhd-static [ArraySeq "create"] ArraySeq [ObjectArray]))

;;; records:
(def mhd-IPersistentMap-valAt (mhd-itf-virtual [map "valAt"]
                                               Object [Object Object]))
(def mhd-IPersistentMap-without (mhd-itf-virtual [map "without"] map [Object]))
(def mhd-RT-seqOrElse (mhd-static [ClojureRT "seqOrElse"] Object [Object]))

;;; class dependencies:
(def mhd-Object (mhd-constr [Object] []))
(def mhd-AFn (mhd-constr [AFn] [map]))

;;; type conversion:
(def mhd-truthy-reference (mhd-static [RT "truthyReference"] boolean [Object]))
(def mhd-Objects-toString
  (mhd-static [(ClassDesc/of "java.util.Objects") "toString"]
              String [Object String]))


;;; polymorphic MethodHandle invokes:
(def mhd-MethodHandle-invoke (mhd-virtual [MethodHandle "invoke"]
                                          Object [ObjectArray]))
(def mhd-MethodHandle-invokeExact (mhd-virtual [MethodHandle "invokeExact"]
                                               Object [ObjectArray]))

;;; capstone and segment class initialization:
(def mhd-RT-ensureInitialized (mhd-static [RT "ensureInitialized"]
                                          void [Class]))

;;; bootstrap methods:
(def bsm-null ConstantDescs/BSM_NULL_CONSTANT)
(def bsm-invoke ConstantDescs/BSM_INVOKE)
(def bsm-concat ;note: "makeConcat" delegates to ""makeConcatWithConstants"
  (mhd-static [(ClassDesc/of "java.lang.invoke.StringConcatFactory")
               "makeConcatWithConstants"]
              CallSite [Lookup String MethodType String ObjectArray]))
(def bsm-quote (mhd-static [BootstrapMethod "quote"] Object
                           [Lookup String Class ObjectArray]))
(def bsm-clause-code
  (mhd-static [BootstrapMethod "bsmCaseClauseCode"]
              CallSite [Lookup String MethodType ObjectArray]))
(def bsm-static-fn (mhd-static [BootstrapMethod "createStaticFn"] StaticFnMh
                               [Lookup String Class MethodHandleArray]))
(def bsm-invoke-fn (mhd-static [BootstrapMethod "invokeFn"]
                               CallSite [Lookup String MethodType]))
(def bsm-metafactory (mhd-static [LambdaMetafactory "metafactory"]
                                 CallSite [Lookup String MethodType MethodType
                                           MethodHandle MethodType]))
(def bsm-object-method (mhd-static [ObjectMethods "bootstrap"]
                                   Object [Lookup String TypeDescriptor
                                           Class String MethodHandleArray]))

;;; ------------------------------------------------------------------------

(defn boolean-desc ^Integer [^boolean x]
  (if x jb/jvm-int-one jb/jvm-int-zero))

(defn loadable-entry ^LoadableConstantEntry [^ConstantPoolBuilder cpb
                                              ^Object c]
  (letfn [(type-desc-meta ^ClassDesc [^Object c]
            (cond
              (symbol? c) symbol
              (seq? c) list
              (vector? c) vector
              (map? c) map
              (set? c) set
              :else (throw (IllegalArgumentException. (str (class c))))))
          (cde-quote ^ConstantDynamicEntry [^String fnm ^ClassDesc tp bs-args]
            (let [bsm (.bsmEntry cpb (.methodHandleEntry cpb bsm-quote)
                                 ^java.util.List bs-args)
                  nat (.nameAndTypeEntry cpb fnm tp)]
              (.constantDynamicEntry cpb bsm nat)))
          
          (cde-named ^ConstantDynamicEntry [^String fnm ^ClassDesc tp ^Named c]
            (let [nm-entry (.stringEntry cpb (name c))]
              (cde-quote fnm tp (if-some [nmsp (namespace c)]
                                  [(.stringEntry cpb nmsp) nm-entry]
                                  [nm-entry]))))
          (cde-pattern ^ConstantDynamicEntry [^Pattern c]
            (cde-quote "re-pattern" pattern [(.stringEntry cpb (.pattern c))]))
          (cde-coll ^ConstantDynamicEntry [^DirectMethodHandleDesc mhd ^ISeq cs]
            (cde-quote (.methodName mhd) (-> mhd .invocationType .returnType)
                       (for [c cs] (loadable-entry cpb c))))
          
          (entry-imeta ^ConstantDynamicEntry [^Object c]
            (cond
              (symbol? c) (cde-named "symbol" symbol c)
              (seq? c) (cde-coll mhd-list c)
              (vector? c) (cde-coll mhd-vector (tinyclj.core/seq c))
              (map? c) (cde-coll mhd-map (mapcat identity c))
              (set? c) (cde-coll mhd-set (tinyclj.core/seq c))
              :else (throw (IllegalArgumentException. (str (class c))))))
          (entry-nometa ^LoadableConstantEntry [^Object c]
            ;; describe `c` ignoring its meta value
            (cond
              (nil? c) (recur jb/jvm-null) ;guard against nil in collections
              (instance? ConstantDesc c) (.loadableConstantEntry cpb c)
              (instance? Constable c) (recur (describe-constable c))
              (tinyclj.core/keyword? c) (cde-named "keyword" keyword c)
              (instance? IMeta c) (entry-imeta c)
              (instance? Pattern c) (cde-pattern c)
              :else (throw (IllegalArgumentException. (str (class c))))))]
    
    (if-some [m (cfg/source-meta c)]
      ;; (instance? IMeta c) is implied by (some? m)
      (let [bs-args ^List [(entry-imeta c) (loadable-entry cpb m)]
            bsm (.bsmEntry cpb (.methodHandleEntry cpb bsm-quote) bs-args)
            nat (.nameAndTypeEntry cpb "with-meta" (type-desc-meta c))]
        (.constantDynamicEntry cpb bsm nat))
      (entry-nometa c))))

(defn load-constant ^CodeBuilder [^CodeBuilder xb ^Object c]
  (cond
    (instance? ConstantDesc c) (.constantInstruction xb ^ConstantDesc c)
    (instance? LoadableConstantEntry c) (.ldc xb ^LoadableConstantEntry c)
    :else (recur xb (loadable-entry (.constantPool xb) c))))
