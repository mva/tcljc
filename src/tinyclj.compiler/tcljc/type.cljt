;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.type
  (:require
   [tcljc.classfile :as cf]
   [tcljc.javabase :as jb]
   [tcljc.runtime :as rt]
   [tcljc.expr :as x]
   [tcljc.exprfold :as xf])
  (:import
   (tcljc.expr Expr IAdaptPath)
   (clojure.lang IPersistentVector)
   (java.lang.classfile Opcode)
   (java.lang.constant ConstantDescs DirectMethodHandleDesc)
   (java.lang.invoke TypeDescriptor$OfField))
  (:refer-clojure :exclude [int long boolean short byte char float double]))

(definterface TypeConversion
  (adapt ^Expr [^Expr arg]))

(def tc-identity (^TypeConversion fn [arg] arg))

(deftype Wrapper [^Class class-primitive
                  ^Class class-wrapper
                  ^Expr default-value
                  ^int numeric-order
                  ^boolean computational-int?
                  ^DirectMethodHandleDesc unboxing-mhd
                  ^TypeConversion primitive-to
                  ^TypeConversion unbox-exact-to
                  ^TypeConversion box-of
                  ^TypeConversion reference-to]
  java.lang.Record)

;;; Convert any primitive value to int.  This includes void, boolean,
;;; and char.  Idempotent if argument is already of type int.
(def ^:private primitive-to-int
  (^TypeConversion fn [arg]
   (condp jb/same-class? (x/type arg)
     Integer/TYPE arg
     Long/TYPE (xf/conv jb/int arg Opcode/L2I)
     Float/TYPE (xf/conv jb/int arg Opcode/F2I)
     Double/TYPE (xf/conv jb/int arg Opcode/D2I)
     Void/TYPE x/expr-zero-int
     #_else (x/identity jb/int arg))))  ;all computational int types

(letfn [(to-upper ^TypeConversion [^TypeConversion tc]
          (^TypeConversion fn [arg]
           (or (.adapt tc arg)
               (.adapt tc (.adapt primitive-to-int arg)))))
        (to-lower ^TypeConversion [^Class to-tp ^Opcode opc]
          (^TypeConversion fn [arg]
           (if (x/type? to-tp arg)
             arg
             (xf/conv to-tp (.adapt primitive-to-int arg) opc))))
        
        (wrapper ^Wrapper [^Class class-primitive
                           ^Class class-wrapper
                           ^int numeric-order
                           ^boolean computational-int?
                           ^TypeConversion primitive-to
                           ^DirectMethodHandleDesc unboxing-mhd
                           ^DirectMethodHandleDesc boxing-mhd
                           ^DirectMethodHandleDesc converting-mhd]
          (Wrapper. class-primitive class-wrapper
                    (if (jb/same-class? jb/boolean class-primitive)
                      x/expr-false
                      (.adapt primitive-to x/expr-zero-int))
                    numeric-order computational-int? unboxing-mhd primitive-to
                    (^TypeConversion fn [arg]
                     (x/invoke-xref (x/flags-of arg) class-primitive [arg]
                                    unboxing-mhd))
                    (^TypeConversion fn [arg]
                     (x/invoke-xref (x/flags-of arg) class-wrapper [arg]
                                    boxing-mhd))
                    (^TypeConversion fn [arg]
                     (x/invoke-xref (x/flags-of arg) class-primitive [arg]
                                    (if (x/type? class-wrapper arg)
                                      unboxing-mhd
                                      converting-mhd)))))]
  (def int
    (wrapper Integer/TYPE Integer 3 true
             primitive-to-int
             (rt/mhd-virtual [ConstantDescs/CD_Integer "intValue"]
                             ConstantDescs/CD_int [])
             (rt/mhd-static [ConstantDescs/CD_Integer "valueOf"]
                            ConstantDescs/CD_Integer [ConstantDescs/CD_int])
             (rt/mhd-static [rt/ClojureRT "intCast"] ConstantDescs/CD_int
                            [ConstantDescs/CD_Object])))
  (def long
    (wrapper Long/TYPE Long 2 false
             (to-upper (^TypeConversion fn [arg]
                        (condp jb/same-class? (x/type arg)
                          Integer/TYPE (xf/conv jb/long arg Opcode/I2L)
                          Long/TYPE arg
                          Float/TYPE (xf/conv jb/long arg Opcode/F2L)
                          Double/TYPE (xf/conv jb/long arg Opcode/D2L)
                          #_else nil)))
             (rt/mhd-virtual [ConstantDescs/CD_Long "longValue"]
                             ConstantDescs/CD_long [])
             (rt/mhd-static [ConstantDescs/CD_Long "valueOf"]
                            ConstantDescs/CD_Long [ConstantDescs/CD_long])
             (rt/mhd-static [rt/ClojureRT "longCast"] ConstantDescs/CD_long
                            [ConstantDescs/CD_Object])))
  (def boolean
    (wrapper Boolean/TYPE Boolean -1 true
             nil    ;conversion to boolean is not a thing for Java/JVM
             (rt/mhd-virtual [ConstantDescs/CD_Boolean "booleanValue"]
                             ConstantDescs/CD_boolean [])
             (rt/mhd-static [ConstantDescs/CD_Boolean "valueOf"]
                            ConstantDescs/CD_Boolean [ConstantDescs/CD_boolean])
             (rt/mhd-static [rt/ClojureRT "booleanCast"] ConstantDescs/CD_boolean
                            [ConstantDescs/CD_Object])))
  (def short
    (wrapper Short/TYPE Short 4 true
             (to-lower jb/short Opcode/I2S)
             (rt/mhd-virtual [ConstantDescs/CD_Short "shortValue"]
                             ConstantDescs/CD_short [])
             (rt/mhd-static [ConstantDescs/CD_Short "valueOf"]
                            ConstantDescs/CD_Short [ConstantDescs/CD_short])
             (rt/mhd-static [rt/ClojureRT "shortCast"] ConstantDescs/CD_short
                            [ConstantDescs/CD_Object])))
  (def byte
    (wrapper Byte/TYPE Byte 5 true
             (to-lower jb/byte Opcode/I2B)
             (rt/mhd-virtual [ConstantDescs/CD_Byte "byteValue"]
                             ConstantDescs/CD_byte [])
             (rt/mhd-static [ConstantDescs/CD_Byte "valueOf"]
                            ConstantDescs/CD_Byte [ConstantDescs/CD_byte])
             (rt/mhd-static [rt/ClojureRT "byteCast"] ConstantDescs/CD_byte
                            [ConstantDescs/CD_Object])))
  (def char
    (wrapper Character/TYPE Character -1 true ;not numeric in Clojure
             (to-lower jb/char Opcode/I2C)
             (rt/mhd-virtual [ConstantDescs/CD_Character "charValue"]
                             ConstantDescs/CD_char [])
             (rt/mhd-static [ConstantDescs/CD_Character "valueOf"]
                            ConstantDescs/CD_Character [ConstantDescs/CD_char])
             (rt/mhd-static [rt/ClojureRT "charCast"] ConstantDescs/CD_char
                            [ConstantDescs/CD_Object])))
  (def float
    (wrapper Float/TYPE Float 1 false
             (to-upper (^TypeConversion fn [arg]
                        (condp jb/same-class? (x/type arg)
                          Integer/TYPE (xf/conv jb/float arg Opcode/I2F)
                          Long/TYPE (xf/conv jb/float arg Opcode/L2F)
                          Float/TYPE arg
                          Double/TYPE (xf/conv jb/float arg Opcode/D2F)
                          #_else nil)))
             (rt/mhd-virtual [ConstantDescs/CD_Float "floatValue"]
                             ConstantDescs/CD_float [])
             (rt/mhd-static [ConstantDescs/CD_Float "valueOf"]
                            ConstantDescs/CD_Float [ConstantDescs/CD_float])
             (rt/mhd-static [rt/ClojureRT "floatCast"] ConstantDescs/CD_float
                            [ConstantDescs/CD_Object])))
  (def double
    (wrapper Double/TYPE Double 0 false
             (to-upper (^TypeConversion fn [arg]
                        (condp jb/same-class? (x/type arg)
                          Integer/TYPE (xf/conv jb/double arg Opcode/I2D)
                          Long/TYPE (xf/conv jb/double arg Opcode/L2D)
                          Float/TYPE (xf/conv jb/double arg Opcode/F2D)
                          Double/TYPE arg
                          #_else nil)))
             (rt/mhd-virtual [ConstantDescs/CD_Double "doubleValue"]
                             ConstantDescs/CD_double [])
             (rt/mhd-static [ConstantDescs/CD_Double "valueOf"]
                            ConstantDescs/CD_Double [ConstantDescs/CD_double])
             (rt/mhd-static [rt/ClojureRT "doubleCast"] ConstantDescs/CD_double
                            [ConstantDescs/CD_Object])))
  (def void
    (let [discard-result (^TypeConversion fn [arg] (pop arg))]
      (Wrapper. Void/TYPE nil x/expr-empty -1 false nil ;no class-wrapper Void
                discard-result          ;primitive-to
                nil                     ;unbox-to
                (^TypeConversion fn [arg] x/expr-nil-object) ;box-of
                discard-result)))       ;reference-to
  
  
  (def logical ;Clojure's rules for logically true or false expressions
    (Wrapper. (.class-primitive boolean)
              (.class-wrapper boolean)
              x/expr-false
              (.numeric-order boolean)
              (.computational-int? boolean)
              (.unboxing-mhd boolean)
              (^TypeConversion fn [arg]
               (condp jb/same-class? (x/type arg)
                 jb/boolean arg ;identity if `arg` is primitive boolean
                 jb/void x/expr-false   ;void is false
                 #_else x/expr-true)) ;all other primitive types are true
              (.unbox-exact-to boolean)
              (.box-of boolean)
              (^TypeConversion fn [arg]
               (if (and (not (x/const-value? arg))
                        (.isAssignableFrom (x/type arg) Boolean))
                 (.adapt (.reference-to boolean) arg)
                 ;; any reference that is a non-Boolean subtype of Object:
                 (xf/acmp arg x/expr-nil-object cf/ne))))))

;;; True if `from-tp` widens to numeric type `to-tp`.
(defn widens-to-numeric? ^boolean [^Wrapper from-tp ^Wrapper to-tp]
  (>= (.numeric-order from-tp) (.numeric-order to-tp) (.numeric-order double)))

(defn numeric? ^boolean [^Wrapper tp]
  (>= (.numeric-order tp) (.numeric-order double)))
(defn widens-to-int? ^boolean [^Wrapper tp]
  (>= (.numeric-order tp) (.numeric-order int)))
(defn widens-to-long? ^boolean [^Wrapper tp]
  (>= (.numeric-order tp) (.numeric-order long)))

(letfn [(of* ^Wrapper [^Class cl ^Wrapper of-reference]
          (if (.isPrimitive cl)
            (condp identical? cl 
              Integer/TYPE int
              Long/TYPE long
              Boolean/TYPE boolean
              Short/TYPE short
              Byte/TYPE byte
              Character/TYPE char
              Float/TYPE float
              Double/TYPE double
              Void/TYPE void)
            of-reference))]

  (def generic-reference
    (Wrapper. Object nil x/expr-nil-object -1 false nil
              (^TypeConversion fn [arg] ;primitive-to
               (.adapt (.box-of (of* (x/type arg) nil)) arg))
              nil                              ;unbox-to
              nil                              ;box-of
              tc-identity))                    ;reference-to

  (defn of ^Wrapper [^Class cl]
    (of* cl generic-reference))
  (defn of-expr ^Wrapper [^Expr x]
    (of* (x/type x) generic-reference))
  
  (defn of-descriptor ^Wrapper [^TypeDescriptor$OfField tpd]
    (case (.charAt (.descriptorString tpd) 0)
      \L generic-reference
      \I int
      \J long
      \Z boolean
      \S short
      \B byte
      \C char
      \F float
      \D double
      \V void))
  
  (defn primitive? ^boolean [^Wrapper tp]
    (not (identical? generic-reference tp)))
  
  (defn checkcast-and-unbox-to ^Expr [^Wrapper tp ^Expr arg]
    (.adapt (.unbox-exact-to tp) (xf/checkcast arg (.class-wrapper tp))))

  (defn default-value-of ^Expr [^Class tp]
    (if (jb/reference? tp)
      (x/const tp nil)
      (.default-value (of* tp nil)))))

;;; ------------------------------------------------------------------------

(defn computational-of
  (^Expr [^Expr arg]
   (computational-of (of-expr arg) arg))
  (^Expr [^Wrapper tp ^Expr arg]
   (if (and (.computational-int? tp) (not (identical? int tp)))
     (.adapt (.primitive-to int) arg)
     arg)))                    ;int, long, float, double, or non-numeric

(defn floating-point-of ^Expr [^Wrapper tp ^Expr arg]
  (if (widens-to-long? tp)
    (.adapt (.primitive-to float) arg)
    arg))                               ;float, double, or non-numeric

(defn logical-value-of ^Expr [^Expr arg] ;takes primitive or reference value
  (.adapt (if (x/primitive? arg)
            (.primitive-to logical)
            (.reference-to logical))
          arg))

(defn reference-of [^Expr arg]
  (if (x/primitive? arg)
    (.adapt (.box-of (of-expr arg)) arg)
    (x/identity arg)))


(defn unboxes-to? ^boolean [^Class from-tp ^Wrapper to]
  (and (some? (.class-wrapper to))
       (jb/jvm-castable-to? from-tp (.class-wrapper to))))
(defn boxes-to? ^boolean [^Wrapper from ^Class to-tp]
  (unboxes-to? to-tp from))

;;; `from-tp` can be changed to `to-tp`, either by numerical widening
;;; or by unboxing.  Returns false if `from-tp` or `to-tp` is void.
(defn adaptable-to? ^boolean [^Class from-tp ^Class to-tp]
  (let [to (of to-tp)]
    (or (widens-to-numeric? (of from-tp) to)
        (unboxes-to? from-tp to))))

;;; ------------------------------------------------------------------------

(defn- coerce* ^Expr [^Expr x ^Class to-tp] ;pre: `x` is not branching
  (cond
    (jb/void? to-tp) (xf/pop x)
    (x/void? x) (x/progn* [x (default-value-of to-tp)])
    :else (xf/checkcast x to-tp)))

(deftype AdaptCoerce [^Class to-tp]
  IAdaptPath
  (apply-to-instr [_ x]
    (coerce* x to-tp))
  (after [this before]
    (if (and (jb/void? to-tp) (.safe-instructions? before))
      this
      (x/adpt-comp this before)))
  (safe-instructions? [_]
    (or (jb/void? to-tp) (jb/object? to-tp)))
  (toString [_]
    (str "coerce-" (.getName to-tp))))

(defn coerce ^Expr [^Expr x ^Class to-tp]
  (if (x/adapting? x)
    (x/with-adapt-paths x to-tp (AdaptCoerce. to-tp))
    (coerce* x to-tp)))
(defn coerce-to-void ^Expr [^Expr x]
  (coerce x jb/void))
(defn coercing ^TypeConversion [^Class to-tp]
  (^TypeConversion fn [arg]
   (coerce arg to-tp)))


(defn progn-expr ^Expr [^IPersistentVector statmv ^Expr expr]
  (if (zero? (count statmv))
    expr
    (x/progn* (conj (mapv coerce-to-void statmv) expr))))
(defn prog2-expr ^Expr [^Expr statm ^Expr expr]
  (x/progn* [(coerce-to-void statm) expr]))

;;; ------------------------------------------------------------------------

;;; Supply type conversion from argument/source type `atype` to
;;; parameter/sink type `ptype`.  Result is nil if no such conversion
;;; is possible.  The conversion may not produce a value of the exact
;;; type `ptype`, but the value's type will be assignment compatible
;;; to `ptype` as far as the JVM is concerned.  That is, it is always
;;; possible to introduce an `x/identity` expression that reinterprets
;;; the converted value as `ptype`.
(defn argument-conversion ^TypeConversion [^Class atype ^Class ptype]
  ;; pre: (not (or (jb/polymorphic? ptype) (jb/void? ptype)))
  (cond
    (jb/jvm-assignable-to? atype ptype) ;Java rule, subsumes identical
    tc-identity

    (jb/void? atype)
    (coercing ptype)

    ;; from here on holds: argument is not void
    
    (jb/reference? ptype)
    (if (jb/reference? atype)
      (when (jb/jvm-assignable-to? ptype atype) ;Clojure rule
        (coercing ptype))

      ;; else: argument is primitive but not void
      (let [atp (of atype)]
        (when (jb/jvm-assignable-to? (.class-wrapper atp) ptype)
          (.box-of atp))))

    (jb/void? ptype)
    (throw (IllegalStateException.))

    ;; from here on holds: parameter is primitive but not void
            
    (jb/reference? atype)
    (let [ptp (of ptype)]
      (when (unboxes-to? atype ptp)
        (^TypeConversion fn [arg]
         (checkcast-and-unbox-to ptp arg))))

    :else                          ;argument is primitive but not void
    (let [ptp (of ptype)]
      (when (widens-to-numeric? (of atype) ptp)
        (.primitive-to ptp)))))
