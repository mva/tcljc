;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https://www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.wrong
  (:require [tcljc.config :as cfg]
            [tcljc.javabase :as jb]
            [tinyclj.alpha.ptest__term :as term])
  (:import (clojure.lang Symbol ExceptionInfo IPersistentMap)
           (java.lang.invoke TypeDescriptor$OfField)
           (java.nio.file Path)))

(defn update-ex-data ^ExceptionInfo [^ExceptionInfo ex f & args]
  (let [ex* (ex-info (ex-message ex) (apply f (ex-data ex) args) (ex-cause ex))]
    (when-some [t (.getStackTrace ex)]
      (.setStackTrace ex* t))
    ex*))

;;; The compiler reports errors by throwing an ExceptionInfo instance.
;;; Its data map encodes information about the context of the error,
;;; while the exception's message is a free form error message.
;;;
;;; If it exists, then :form/line-number is the line number of the
;;; innermost list form "around" the point of error.
;;;
;;; If an `ExceptionInfo` is decorated with a ex-cause value, then it
;;; is assumed that this Throwable originates outside of the control
;;; of the compiler (e.g. during macro expansion).
(defn- push-line-number ^ExceptionInfo [^ExceptionInfo ex ^int ln]
  (cond-> ex
    (and (not= ln cfg/no-line-number)
         (not (contains? (ex-data ex) :form/line-number)))
    (update-ex-data assoc :form/line-number (object ln))))

(defn rethrow-with-line-number ^void [^ExceptionInfo e ^int ln]
  (throw (push-line-number e ln)))

(defn mk-e
  (^ExceptionInfo [msg]
   (mk-e msg {}))
  (^ExceptionInfo [msg data]
   #_(prn :error msg data)
   #_(.printStackTrace (Throwable.))
   (ex-info msg data)))
(defn- mk-e-line-number ^ExceptionInfo [msg form]
  (push-line-number (mk-e msg) (cfg/line-number form)))

;;; Only assoc `k` to the exception's data if this key is not defined
;;; yet.  With exceptions decorated from the most to the least
;;; specific context, this is used to preserve the most specific
;;; information available.
(defn assoc-if-new ^ExceptionInfo [^ExceptionInfo e k v]
  (cond-> e
    (not (contains? (ex-data e) k))
    (update-ex-data assoc k v)))

(defn assoc-dep-map ^ExceptionInfo [^Throwable t ^IPersistentMap dep-map]
  #_(.printStackTrace t)
  (-> (if (instance? ExceptionInfo t)
        ^ExceptionInfo t
        (ex-info "unhandled exception" {} t))
      (update-ex-data assoc :emitter/namespaces dep-map)))

;;; ------------------------------------------------------------------------

(defn str* ^String [x]
  (cond
    (nil? x) "nil"
    (class? x) (str (cfg/type-symbol x))
    (string? x) (pr-str x)
    :else (str x)))

(defn q ^String [x]                    ;quoting a source code fragment
  (let [s (str* x), s' (term/quote s)]
    (if (identical? s s')
      (str "`" s "`")                 ;fallback if styles are disabled
      s')))
(defn q-symbol ^String [x]
  (if (symbol? x)
    (q x)
    (str x)))

(defn got ^String [x] (str " (got: " (str* x) ")"))
(defn got-int ^String [^int i] (got (object i)))
(defn got-q ^String [x] (got (q x)))



(defn syntax
  ([^String msg]
   (throw (mk-e msg)))
  ([^String msg-prefix form]
   (throw (mk-e-line-number (str msg-prefix (got-q form)) form))))
(defn ensure-sym
  (^Symbol [form]
   (if (symbol? form)
     form
     (syntax "expect symbol" form)))
  (^Symbol [form ^Symbol exp]
   (if (= form exp)
     exp
     (syntax (str "expected symbol " (q exp)) form))))
(defn ensure-simple-sym ^Symbol [form]
  (if (and (symbol? form) (nil? (namespace form)))
    form
    (syntax "expect unqualified symbol" form)))




(defn unresolved [^String msg-prefix sym-or-str]
  (throw (mk-e (str msg-prefix (q sym-or-str)))))
(defn unresolved-nmsp-sym [resolved-ns-nm ^Symbol fq-sym]
  (throw (mk-e (str "no public var " (q (name fq-sym)) " in namespace "
                    (q resolved-ns-nm)))))
(defn unresolved-interop [^String msg-prefix ^String nm ^Class opt-owner
                          ^IPersistentMap data]
  (throw (mk-e (cond-> (str msg-prefix (q (symbol nil nm)))
                 (some? opt-owner) (str " in " (symbol nil (.getName opt-owner))))
               data)))

(defn class-not-found [x]
  (if (instance? NoClassDefFoundError x)
    (class-not-found (ex-message ^NoClassDefFoundError x))
    (let [sym (symbol x)]               ;idempotent
      (unresolved "class not found: " sym))))
(defn no-class-def-found ^ExceptionInfo [^NoClassDefFoundError e]
  (let [nm (.replace (ex-message e) \/ \.)]
    (ex-info (str "failed to load class " (q (symbol nil nm))) {} e)))


(defn file [^Path rpath]
  (throw (mk-e (str "failed to locate resource file " (q (str rpath))))))

;;; This indicates an error regarding a type expression, i.e. an
;;; expression of type Class.
(defn type-expr [^String msg-prefix ^TypeDescriptor$OfField tp]
  (throw (mk-e (str msg-prefix (got tp)))))

(defn other
  ([^String msg]
   (throw (mk-e msg)))
  ([^String msg form]
   (throw (mk-e-line-number msg form))))

;;; ------------------------------------------------------------------------

(defn check-argc
  ([^int n form]
   (let [argc (dec (count form))]
     (when-not (= argc n)
       (other (str (q (first form)) " takes " n " argument"
                   (when-not (= 1 n) "s") (got-int argc))))))
  ([^int n ^int m form]
   (let [argc (dec (count form))]
     (when-not (<= n argc m)
       (other (str (q (first form)) " takes " n " to " m " arguments"
                   (got-int argc)))))))

(defn check-argc-min [^int n form]
  (let [argc (dec (count form))]
    (when-not (>= argc n)
      (other (str (q (first form)) " takes " n " or more arguments"
                  (got-int argc))))))
