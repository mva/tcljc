(ns tinyclj.alpha.pp
  (:require [tinyclj.alpha.ptest__term :as term]
            [tinyclj.alpha.ptest__pp :as impl]
            [tinyclj.alpha.ptest__align :as align])
  (:import (clojure.lang IPersistentMap)))

(def ^:private page-width-default 80)

(defn- lines-str
  ([form]
   (lines-str form {:page-width page-width-default}))
  ([form ^IPersistentMap opts]
   (let [page-width ^int (get opts :page-width (object page-width-default))
         doc (impl/doc-dup form)
         lv (impl/pretty1* page-width doc)]
     (impl/lines-str lv))))

(defn prn
  ([form]
   (println (lines-str form)))
  ([form ^IPersistentMap opts]
   (println (lines-str form opts))))

(defn- side-by-side-str           ;derived from ptest__align/print-a-b
  ([a b]
   (side-by-side-str a b {:page-width page-width-default}))
  ([a b opts]
   (let [page-width ^int (get opts :page-width (object page-width-default))
         style (if term/enable-color-output
                 align/color-exclusive-compact #_color-exclusive-spaced
                 align/plain-text-spaced)
         al (align/align (align/arrify a) (align/arrify b))
         doc-a (align/alignment-doc style align/part-of-a al)
         doc-b (align/alignment-doc style align/part-of-b al)]
     (assert (= (impl/width doc-a) (impl/width doc-b)))
     
     (let [side-by-side-width (quot (- page-width align/side-by-side-gap) 2)
           lines-a (impl/pretty1* side-by-side-width doc-a)
           lines-b (impl/pretty1* side-by-side-width doc-b)]
       (assert (= (count lines-a) (count lines-b)))
       (impl/side-by-side-str align/side-by-side-gap lines-a lines-b)))))

;;; Note: Apply this to smallish nested data only; the current
;;; implementation of sequence alignment is O(n^2).
(defn prn-diff
  ([a b]
   (println (side-by-side-str a b)))
  ([a b ^IPersistentMap opts]
   (println (side-by-side-str a b opts))))
