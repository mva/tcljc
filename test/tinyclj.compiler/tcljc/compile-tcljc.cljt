(ns tcljc.compile-tcljc
  (:require
   [tcljc.config :as cfg]
   [tcljc.classfile :as cf]
   [tcljc.runtime :as rt]
   [tcljc.expr :as x]
   [tcljc.emitter :as em]
   [tcljc.predefined :as predefined]))

(defn run []
  (let [tcljc-mdir (cfg/dest-dir "tcljc.mdir")
        sourcev [(.resolve tcljc-mdir (cfg/path-of "tinyclj-rt.jar"))
                 (cfg/path-of "src/tinyclj.core")
                 (cfg/path-of "src/tinyclj.compiler")
                 (cfg/path-of "test/tinyclj.compiler")]
        app-ld (cfg/app-class-loader :platform sourcev)
        dest-dir (cfg/dest-dir "tcljc.compile-tcljc-stage1")
        load-from-dest-dir? false
        all-nmsps [#_"tinyclj.core"
                   #_"tinyclj.core.all"
                   #_"tcljc.rtiow-ref"
                   "tcljc.main"]

        rt-lookup (cfg/get-rt-lookup app-ld)
        dyn-ld (cfg/dyn-class-loader app-ld (if load-from-dest-dir?
                                              [dest-dir]
                                              []))
        provided-nmsp (em/mk-provided-nmsp)
        env (em/mk-build-env app-ld dest-dir dyn-ld provided-nmsp)]
    (-> (em/emit-namespaces env all-nmsps)
        (time)
        (em/summary)
        #_(prn))))

(defn -main [& args]
  (try
    (run)
    (finally
      (shutdown-agents))))     ;can only shut down when owning the JVM
