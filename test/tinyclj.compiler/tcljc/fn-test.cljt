;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https:;;www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.fn-test
  (:require [tcljc.bootstrap :refer [nmsp]]
            [tcljc.reader-test :refer [deterministic-gensyms]]
            [tinyclj.alpha.ptest :refer :all]))

(deftest primitive-int-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn~2" "(II)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "fn~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def f (fn* ^int [^int a ^int b] (+ a b)))]))))

(deftest widen-result-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn~1" "(Z)F"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "fn~1" "(Z)F")
             ["LOCAL 0: boolean b"]
             (ILOAD_0)
             (IFEQ L:0)
             (ICONST_1)
             (GOTO L:1)
             [L:0]
             (ICONST_0)
             [L:1]
             (I2F)
             (FRETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def f (fn* ^float [^boolean b] (if b 1 0)))]))))

(deftest def-fn-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]

           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "add2" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn~2" "(II)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "fn~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def add2 (fn* ^int [^int a ^int b] (+ a b)))]))))

(deftest invoke-redef-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]

           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(FIELD [PUBLIC STATIC VOLATILE]
                    "add2" "Ltinyclj/lang/StaticFnMh;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "two" "Ljava/lang/Object;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "fn~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")

             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn~2" "(II)I"]]])
             (PUTSTATIC . "add2" "Ltinyclj/lang/StaticFnMh;")

             (GETSTATIC . "add2" "Ltinyclj/lang/StaticFnMh;")
             (ICONST_1)
             (ICONST_1)
             (INVOKEDYNAMIC "_" "(Ltinyclj/lang/AFnMh;II)Ljava/lang/Object;"
                            :bsm-invoke-fn [])
             (PUTSTATIC . "two" "Ljava/lang/Object;")

             (RETURN)]]]
         ;; Not implemented: Take the first def as the methods'
         ;; signature specification and then use .invokeExact() to
         ;; call it.  May make a difference in compiled code.  Less so
         ;; if the redef-ed var is a macro, because macro expansion is
         ;; triggered by the compiler and uses a generic untyped
         ;; invocation anyway.
         (nmsp '[(ns pkg.ns0)
                 (def ^:redef add2 (fn* ^int [^int a ^int b] (+ a b)))
                 (def two (add2 1 1))]))))

(deftest invoke-generic-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]

           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(FIELD [PUBLIC STATIC VOLATILE]
                    "apply2-int" "Ltinyclj/lang/StaticFnMh;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "two" "Ljava/lang/Object;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "add2" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn~2" "(II)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "fn~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "fn^2fdc~3" "(Ljava/lang/Object;II)I")
             ["LOCAL 0: Object f"]
             ["LOCAL 1: int a"]
             ["LOCAL 2: int b"]
             (ALOAD_0)
             (ILOAD_1)
             (ILOAD_2)
             (INVOKEDYNAMIC "_" "(Ljava/lang/Object;II)I" :bsm-invoke-fn [])
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn^2fdc~3" "(Ljava/lang/Object;II)I"]]])
             (PUTSTATIC . "apply2-int" "Ltinyclj/lang/StaticFnMh;")

             (GETSTATIC . "apply2-int" "Ltinyclj/lang/StaticFnMh;")
             (INVOKESTATIC . "add2" "()Ltinyclj/lang/StaticFnMh;")
             (ICONST_1)
             (ICONST_1)
             (INVOKEDYNAMIC "_" "(Ltinyclj/lang/AFnMh;Ltinyclj/lang/AFnMh;II)Ljava/lang/Object;"
                            :bsm-invoke-fn [])
             (PUTSTATIC . "two" "Ljava/lang/Object;")
             
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def add2 (fn* ^int [^int a ^int b] (+ a b)))
                 ;; Type hint on call to f is propagated into the
                 ;; call.  Without it, the call would be "(II)Object",
                 ;; now it is "(II)I".
                 (def ^:redef apply2-int (fn* ^int [f ^int a ^int b]
                                              ^int (f a b)))
                 (def two (apply2-int add2 1 1))]))))

(deftest defn-test                    ;but minus the actual defn macro
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]

           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(FIELD [PUBLIC STATIC VOLATILE]
                    "add2" "Ltinyclj/lang/StaticFnMh;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "two" "Ljava/lang/Object;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "add2~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]
            
            

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "add2~2" "(II)I"]]])
             (PUTSTATIC . "add2" "Ltinyclj/lang/StaticFnMh;")
            
             (GETSTATIC . "add2" "Ltinyclj/lang/StaticFnMh;")
             (ICONST_1)
             (ICONST_1)
             (INVOKEDYNAMIC "_" "(Ltinyclj/lang/AFnMh;II)Ljava/lang/Object;"
                            :bsm-invoke-fn [])
             (PUTSTATIC . "two" "Ljava/lang/Object;")
             
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def ^:redef add2 (fn* ^:redef add2 ^int [^int a ^int b]
                                        (+ a b)))
                 ;; in general, `add2` may be assigned a fn that does
                 ;; return anything
                 (def two (add2 1 1))]))))

(deftest defn-multi-arity-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]

           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(FIELD [PUBLIC STATIC VOLATILE]
                    "add" "Ltinyclj/lang/StaticFnMh;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "zero" "Ljava/lang/Object;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "one" "Ljava/lang/Object;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "two" "Ljava/lang/Object;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "add~0" "()I")
             (ICONST_0)
             (IRETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "add~1" "(I)I")
             ["LOCAL 0: int a"]
             (ILOAD_0)
             (IRETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "add~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "add~0" "()I"]
                    [STATIC . "add~1" "(I)I"]
                    [STATIC . "add~2" "(II)I"]]])
             (PUTSTATIC . "add" "Ltinyclj/lang/StaticFnMh;")

             (GETSTATIC . "add" "Ltinyclj/lang/StaticFnMh;")
             (INVOKEDYNAMIC "_" "(Ltinyclj/lang/AFnMh;)Ljava/lang/Object;"
                            :bsm-invoke-fn [])
             (PUTSTATIC . "zero" "Ljava/lang/Object;")

             (GETSTATIC . "add" "Ltinyclj/lang/StaticFnMh;")
             (ICONST_1)
             (INVOKEDYNAMIC "_" "(Ltinyclj/lang/AFnMh;I)Ljava/lang/Object;"
                            :bsm-invoke-fn [])
             (PUTSTATIC . "one" "Ljava/lang/Object;")
             
             (GETSTATIC . "add" "Ltinyclj/lang/StaticFnMh;")
             (ICONST_1)
             (ICONST_1)
             (INVOKEDYNAMIC "_" "(Ltinyclj/lang/AFnMh;II)Ljava/lang/Object;"
                            :bsm-invoke-fn [])
             (PUTSTATIC . "two" "Ljava/lang/Object;")
             
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def ^:redef add (fn* ^:redef add
                                       (^int []
                                        0)
                                       (^int [^int a]
                                        a)
                                       (^int [^int a ^int b]
                                        (+ a b))))
                 (def zero (add))
                 (def one (add 1))
                 (def two (add 1 1))]))))

(deftest invoke-static-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]

           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "two" "I")]
            
            [(METHOD [PUBLIC STATIC FINAL] "add2" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn~2" "(II)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "fn~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (ICONST_1)
             (ICONST_1)
             (INVOKESTATIC . "fn~2" "(II)I")
             (PUTSTATIC . "two" "I")
             
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def add2 (fn* ^int [^int a ^int b] (+ a b)))
                 (def two (add2 1 1))]))))

(deftest delegating-str-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "res" "Ljava/lang/String;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "f~1" "(I)Ljava/lang/String;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "f~1" "(I)Ljava/lang/String;")
             ["LOCAL 0: int n"]
             (ILOAD_0)
             (INVOKEDYNAMIC "_" "(I)Ljava/lang/String;"
                            :bsm-concat ["fn\\u0001"])
             (ARETURN)]
            

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (BIPUSH 123)
             (INVOKESTATIC . "f~1" "(I)Ljava/lang/String;")
             (PUTSTATIC . "res" "Ljava/lang/String;")
             
             (RETURN)]]]
         ;; `str` is mapped to invoke dynamic and cannot be delegated
         ;; to, i.e. a regular static method implements function `f`
         (nmsp '[(ns pkg.ns0)
                 (def f (fn* f ^String [^int n]
                             (str "fn" n)))
                 (def res (f 123))]))))

(deftest static-recursive-call-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "inc-fn" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "inc~1" "(I)I"]
                    [STATIC . "inc~2" "(II)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "inc~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "inc~1" "(I)I")
             ["LOCAL 0: int a"]
             (ILOAD_0)
             (ICONST_1)
             (INVOKESTATIC . "inc~2" "(II)I")
             (IRETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def inc-fn (fn* inc
                                  (^int [^int a ^int b]
                                   (+ a b))
                                  (^int [^int a]
                                   (inc a 1))))]))))

(deftest virtual-recursive-call-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "inc-fn" "Ltinyclj/lang/AFnMh;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "three" "Ljava/lang/Object;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "mk-inc-fn" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "mk-inc-fn~1" "(I)Ltinyclj/lang/AFnMh;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "mk-inc-fn~1" "(I)Ltinyclj/lang/AFnMh;")
             ["LOCAL 0: int n"]
             (ILOAD_0)
             (INVOKESTATIC mk-inc-fn$inc "__create" "(I)Lpkg/ns0/mk-inc-fn$inc;")
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (ICONST_1)
             (INVOKESTATIC . "mk-inc-fn~1" "(I)Ltinyclj/lang/AFnMh;")
             (PUTSTATIC . "inc-fn" "Ltinyclj/lang/AFnMh;")
             
             (GETSTATIC . "inc-fn" "Ltinyclj/lang/AFnMh;")
             (ICONST_2)
             (INVOKEDYNAMIC "_" "(Ltinyclj/lang/AFnMh;I)Ljava/lang/Object;" :bsm-invoke-fn [])
             (PUTSTATIC . "three" "Ljava/lang/Object;")
             
             (RETURN)]]
           
           [(CLASS Vx [PUBLIC FINAL] "pkg/ns0/mk-inc-fn$inc" nil "tinyclj/lang/AFnMh")
            [(FIELD [PRIVATE FINAL] "n" "I")]
            
            [(METHOD [PUBLIC FINAL] "fn2" "(II)I")
             ["LOCAL 0: mk-inc-fn$inc inc"]
             ["LOCAL 1: int a"]
             ["LOCAL 2: int b"]
             (ILOAD_1)
             (ILOAD_2)
             (IADD)
             (IRETURN)]
            
            [(METHOD [PUBLIC FINAL] "fn1" "(I)I")
             ["LOCAL 0: mk-inc-fn$inc inc"]
             ["LOCAL 1: int a"]
             (ALOAD_0)
             (ILOAD_1)
             (ALOAD_0)
             (GETFIELD . "n" "I")
             (INVOKEVIRTUAL . "fn2" "(II)I")
             (IRETURN)]
            
            [(METHOD [PUBLIC FINAL] "__arityOrNull" "(I)Ljava/lang/invoke/MethodHandle;")
             #_["LOCAL 0: mk-inc-fn$inc __this"]
             #_["LOCAL 1: int n"]
             (ILOAD_1)
             (LOOKUPSWITCH L:2 [1 2] [L:0 L:1])
             [L:0]
             (LDC [VIRTUAL . "fn1" "(I)I"])
             (ARETURN)
             [L:1]
             (LDC [VIRTUAL . "fn2" "(II)I"])
             (ARETURN)
             [L:2]
             (ACONST_NULL)
             (ARETURN)]
            
            [(METHOD [PUBLIC FINAL] "__directMethodHandles" "()[Ljava/lang/invoke/MethodHandle;")
             #_["LOCAL 0: mk-inc-fn$inc __this"]
             (LDC [STATIC RT "methodHandleArray"
                   "([Ljava/lang/invoke/MethodHandle;)[Ljava/lang/invoke/MethodHandle;"])
             (LDC [VIRTUAL . "fn1" "(I)I"])
             (LDC [VIRTUAL . "fn2" "(II)I"])
             (INVOKEVIRTUAL MethodHandle "invoke"
                            "(Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;)[Ljava/lang/invoke/MethodHandle;")
             (ARETURN)]
            
            [(METHOD [PRIVATE] "<init>" "(Lclojure/lang/IPersistentMap;I)V")
             #_["LOCAL 0: uninitialized_this_type __this"]
             #_["LOCAL 1: IPersistentMap __meta"]
             #_["LOCAL 2: int n"]
             (ALOAD_0)
             (ALOAD_1)
             (INVOKESPECIAL AFnMh "<init>" "(Lclojure/lang/IPersistentMap;)V")
             (ALOAD_0)
             (ILOAD_2)
             (PUTFIELD . "n" "I")
             (RETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "__create" "(I)Lpkg/ns0/mk-inc-fn$inc;")
             #_["LOCAL 0: int n"]
             (NEW mk-inc-fn$inc) (DUP)
             (ACONST_NULL)
             (ILOAD_0)
             (INVOKESPECIAL . "<init>" "(Lclojure/lang/IPersistentMap;I)V")
             (ARETURN)]
            
            [(METHOD [PROTECTED FINAL] "__withMetaImpl" "(Lclojure/lang/IPersistentMap;)Lpkg/ns0/mk-inc-fn$inc;")
             #_["LOCAL 0: mk-inc-fn$inc __this"]
             #_["LOCAL 1: IPersistentMap __meta"]
             (NEW mk-inc-fn$inc) (DUP)
             (ALOAD_1)
             (ALOAD_0)
             (GETFIELD . "n" "I")
             (INVOKESPECIAL . "<init>" "(Lclojure/lang/IPersistentMap;I)V")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def mk-inc-fn
                   (fn* mk-inc-fn ^auto-return-type [^int n]
                        (fn* inc
                             (^int [^int a ^int b]
                              (+ a b))
                             (^int [^int a]
                              (inc a n)))))
                 (def inc-fn (mk-inc-fn 1))
                 (def three (inc-fn 2))]))))

(deftest fn-recur-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "fn-recur" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn-recur~1" "(I)Ljava/lang/Object;"]]])
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "fn-recur~1" "(I)Ljava/lang/Object;")
             ["LOCAL 0: int i"]
             [L:0]
             (ILOAD_0)
             (BIPUSH 100)
             (IF_ICMPGE L:1)
             (IINC 0 1)
             (GOTO L:0)
             [L:1]
             (ACONST_NULL)
             (ARETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def fn-recur (fn* fn-recur [^int i]
                                    (if (< i 100)
                                      (recur (inc i)))))]))))

;;; Only works when read by tcljc.reader or its tclj-in-tclj
;;; counterpart, otherwise the expansion of #(...) is not properly
;;; type hinted.
(deftest def-fn-literal-hinted-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "fn~2" "(II)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "fn~2" "(II)I")
             ["LOCAL 0: int p$1$__fnlit__"]
             ["LOCAL 1: int p$2$__fnlit__"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (-> (nmsp '[(ns pkg.ns0)
                     (def f #(+ ^int %1 ^int %2))])
             (deterministic-gensyms)))))

(deftest delegate-to-interface
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V") (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "key" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[INTERFACE_VIRTUAL Map$Entry "getKey" "()Ljava/lang/Object;"]]])
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn
                   "_"
                   "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "f~1" "(Ljava/util/Map$Entry;)V"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "f~1" "(Ljava/util/Map$Entry;)V")
             ["LOCAL 0: Map$Entry e"]
             (ALOAD_0)
             (INVOKEINTERFACE Map$Entry "getKey" "()Ljava/lang/Object;" :itf)
             (POP)
             (RETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def key (fn* key [^java.util.Map$Entry e]
                               (. e (getKey))))
                 (def f (fn* f ^void [^java.util.Map$Entry e]
                             (key e)))]))))

(deftest auto-return-nil
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f~0" "()Ljava/lang/Object;")
             (ACONST_NULL)
             (ARETURN)]
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (fn* f ^auto-return-type []
                      nil)]))))

(deftest auto-return-void
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f~0" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (fn* f ^auto-return-type []
                      (do))]))))

(deftest auto-return-throw
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f~0" "()V")
             (NEW Exception)
             (DUP)
             (INVOKESPECIAL Exception "<init>" "()V")
             (ATHROW)]
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (fn* f ^auto-return-type []
                      (throw (Exception.)))]))))

(deftest auto-return-polymorphic
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f~1"
                     "(Ljava/lang/invoke/MethodHandle;)Ljava/lang/Object;")
             ["LOCAL 0: MethodHandle mh"]
             (ALOAD_0)
             (INVOKEVIRTUAL MethodHandle "invoke" "()Ljava/lang/Object;")
             (ARETURN)]
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (fn* f ^auto-return-type [^java.lang.invoke.MethodHandle mh]
                      (.invoke mh))]))))

(deftest auto-return-dead-code
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f~0" "()I")
             (NEW Exception)
             (DUP)
             (INVOKESPECIAL Exception "<init>" "()V")
             (ATHROW)]
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (fn* f ^auto-return-type []
                      (throw (Exception.))
                      123)]))))

(deftest pass-double-to-float-test
  (is (thrown-with-msg? clojure.lang.ExceptionInfo
                        #"cannot assign to .*float.* \(got: double\)"
                        (nmsp '[(ns pkg.ns0)
                                ((fn* f [^float x] nil) 0.0)]))))

