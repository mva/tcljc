;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https:;;www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.invoke-test
  (:require [tcljc.javabase :as jb]
            [tcljc.compiler.invoke :as invoke]
            [tcljc.expr :as x]
            [tinyclj.alpha.ptest :refer :all])
  (:import (tcljc.expr Expr InvokeXref InvokePoly)
           (clojure.lang ExceptionInfo)
           (java.lang.constant DirectMethodHandleDesc)))

(letfn [(fake-argv [atypes]
          ;; some dummy expression that is not constant folded
          (mapv #(x/insn* x/flags-no-ln % [] nil) atypes))
        (xref [^DirectMethodHandleDesc mhd]
          (list 'INVOKE-XREF (symbol nil (-> mhd .kind (str)))
                (.displayName (.owner mhd))
                (.methodName mhd) (.lookupDescriptor mhd)
                (if (.isOwnerInterface mhd) :owner-is-itf :owner-is-class)))
        (poly [^InvokePoly x]
          (list 'INVOKE-POLY (symbol nil (-> x .kind (str)))
                (.displayName (.owner x))
                (.method-name x)
                (if (.owner-interface? x) :owner-is-itf :owner-is-class)))
        (inv1 [^Expr x]
          (assert (some? x))
          (cond
            (instance? InvokeXref x) (xref (.mhd ^InvokeXref x))
            (instance? InvokePoly x) (poly ^InvokePoly x)
            :else (throw (IllegalArgumentException. (str (class x))))))]
  
  (defn inv-constr [^Class owner & ^Class* atypes]
    (inv1 (invoke/constructor x/flags-no-ln owner (fake-argv atypes))))
  (defn inv-static [^Class owner ^String nm & ^Class* atypes]
    (inv1 (invoke/member x/flags-no-ln owner nm (fake-argv atypes) true)))
  (defn inv-virtual [^Class owner ^String nm & ^Class* atypes]
    (inv1 (invoke/member x/flags-no-ln owner nm
                         (fake-argv (cons owner atypes)) false))))

(deftest constructor-invoke-test
  (is (= '(INVOKE-XREF CONSTRUCTOR "HashMap" "<init>" "()V" :owner-is-class)
         (inv-constr java.util.HashMap))))

(deftest static-field-test
  (is (= '(INVOKE-XREF STATIC_GETTER "Math" "PI" "D" :owner-is-class)
         (inv-static java.lang.Math "PI"))))

(deftest static-invoke-test
  (is (= '(INVOKE-XREF STATIC "System" "getProperties"
                       "()Ljava/util/Properties;"
                       :owner-is-class)
         (inv-static java.lang.System "getProperties")))
  (is (= '(INVOKE-XREF STATIC "System" "getProperty"
                       "(Ljava/lang/String;)Ljava/lang/String;"
                       :owner-is-class)
         (inv-static java.lang.System "getProperty" String)))

  (is (= '(INVOKE-XREF STATIC "MethodHandles" "lookup"
                       "()Ljava/lang/invoke/MethodHandles$Lookup;"
                       :owner-is-class)
         (inv-static java.lang.invoke.MethodHandles "lookup")))
  (is (= '(INVOKE-XREF STATIC "RT" "setCoreLookup"
                       "(Ljava/lang/invoke/MethodHandles$Lookup;)V"
                       :owner-is-class)
         (inv-static tinyclj.lang.RT "setCoreLookup"
                     java.lang.invoke.MethodHandles$Lookup)))

  ;; Math/log takes a double and requires implicit conversion from int
  (is (= '(INVOKE-XREF STATIC "Math" "log" "(D)D" :owner-is-class)
         (inv-static java.lang.Math "log" jb/int)))
  (is (thrown-with-msg? ExceptionInfo #"no static method matching"
                        (inv-static java.lang.Math "log" jb/boolean)))
  (is (thrown-with-msg? ExceptionInfo #"no static method matching"
                        (inv-static java.lang.Math "log" jb/char)))
  
  ;; Math/max has four paired overloads
  (is (= '(INVOKE-XREF STATIC "Math" "max" "(II)I" :owner-is-class)
         (inv-static java.lang.Math "max" jb/int jb/int)))
  (is (= '(INVOKE-XREF STATIC "Math" "max" "(JJ)J" :owner-is-class)
         (inv-static java.lang.Math "max" jb/long jb/long)))
  (is (= '(INVOKE-XREF STATIC "Math" "max" "(FF)F" :owner-is-class)
         (inv-static java.lang.Math "max" jb/float jb/float)))
  (is (= '(INVOKE-XREF STATIC "Math" "max" "(DD)D" :owner-is-class)
         (inv-static java.lang.Math "max" jb/double jb/double)))

  ;; varargs call with box of primitive int passed via the `args`
  ;; array of type `Object...`
  (is (= '(INVOKE-XREF STATIC "String" "format"
                       "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;"
                       :owner-is-class)
         (inv-static String "format" String jb/int))))


(deftest virtual-field-test
  (is (= '(INVOKE-XREF GETTER "Point" "x" "I" :owner-is-class)
         (inv-virtual java.awt.Point "x"))))

;;; Note: In general, the owner of an invoke instruction is the class
;;; from which the resolve process started, *not* the class that
;;; defines the invoked method.  The same is true for field
;;; instructions, when e.g. a static final field of a base class is
;;; resolved using one of its extending classes.
(deftest virtual-invoke-test
  (is (= '(INVOKE-XREF VIRTUAL "String" "toUpperCase"
                       "()Ljava/lang/String;" :owner-is-class)
         (inv-virtual String "toUpperCase")))
  (is (= '(INVOKE-XREF VIRTUAL "Class" "getName"
                       "()Ljava/lang/String;" :owner-is-class)
         (inv-virtual Class "getName")))

  ;; varargs call: no `parameterTypes` and three `parameterTypes`
  (is (= '(INVOKE-XREF VIRTUAL "Class" "getMethod"
                       "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;"
                       :owner-is-class)
         (inv-virtual Class "getMethod" String)))
  (is (= '(INVOKE-XREF VIRTUAL "Class" "getConstructor"
                       "([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;"
                       :owner-is-class)
         (inv-virtual Class "getConstructor" Class Class Class)))

  ;; `withInterfaceSymbols` with an `Object` argument is ambiguous in
  ;; Clojure (but not in Java!), and resolved to a single method with
  ;; `List`, `ClassDesc`, or an empty argument list
  (is (thrown-with-msg? ExceptionInfo #"multiple virtual methods match"
                        (inv-virtual java.lang.classfile.ClassBuilder
                                     "withInterfaceSymbols" Object)))
  (is (= '(INVOKE-XREF INTERFACE_VIRTUAL "ClassBuilder" "withInterfaceSymbols"
                       "(Ljava/util/List;)Ljava/lang/classfile/ClassBuilder;"
                       :owner-is-itf)
         (inv-virtual java.lang.classfile.ClassBuilder "withInterfaceSymbols"
                      java.util.List)))
  (is (= '(INVOKE-XREF INTERFACE_VIRTUAL "ClassBuilder" "withInterfaceSymbols"
                       "([Ljava/lang/constant/ClassDesc;)Ljava/lang/classfile/ClassBuilder;"
                       :owner-is-itf)
         (inv-virtual java.lang.classfile.ClassBuilder "withInterfaceSymbols"
                      java.lang.constant.ClassDesc)))
  (is (= '(INVOKE-XREF INTERFACE_VIRTUAL "ClassBuilder" "withInterfaceSymbols"
                       "([Ljava/lang/constant/ClassDesc;)Ljava/lang/classfile/ClassBuilder;"
                       :owner-is-itf)
         (inv-virtual java.lang.classfile.ClassBuilder "withInterfaceSymbols"))))

(deftest interface-varargs-clash-test
  ;; this should resolve to the varargs method
  ;; static MethodTypeDesc of(ClassDesc returnDesc, ClassDesc... paramDescs)
  (is (= '(INVOKE-XREF INTERFACE_STATIC "MethodTypeDesc" "of"
                       "(Ljava/lang/constant/ClassDesc;[Ljava/lang/constant/ClassDesc;)Ljava/lang/constant/MethodTypeDesc;"
                       :owner-is-itf)
         (inv-static java.lang.constant.MethodTypeDesc "of"
                     java.lang.constant.ClassDesc
                     java.lang.constant.ClassDesc)))
  
  ;; this should resolve to the List method
  ;; static MethodTypeDesc of(ClassDesc returnDesc, List<ClassDesc> paramDescs)
  (is (= '(INVOKE-XREF INTERFACE_STATIC
                       "MethodTypeDesc" "of"
                       "(Ljava/lang/constant/ClassDesc;Ljava/util/List;)Ljava/lang/constant/MethodTypeDesc;"
                       :owner-is-itf)
         (inv-static java.lang.constant.MethodTypeDesc "of"
                     java.lang.constant.ClassDesc
                     java.util.List))))

(deftest compatible-args-test
  ;; the "dominate" checks must establish any precondition required by
  ;; `alignment` before calling it
  (is (= '(INVOKE-XREF INTERFACE_STATIC "Set" "of"
                       "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Set;"
                       :owner-is-itf)
         (inv-static java.util.Set "of"
                     java.nio.file.attribute.PosixFilePermission
                     java.nio.file.attribute.PosixFilePermission
                     java.nio.file.attribute.PosixFilePermission))))

(deftest one-arg-vs-one-plus-varargs-test
  (is (= '(INVOKE-XREF INTERFACE_VIRTUAL "Path" "resolve"
                       "(Ljava/lang/String;)Ljava/nio/file/Path;"
                       :owner-is-itf)
         (inv-virtual java.nio.file.Path "resolve" String)))
  (is (= '(INVOKE-XREF INTERFACE_VIRTUAL "Path" "resolve"
                       "(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;"
                       :owner-is-itf)
         (inv-virtual java.nio.file.Path "resolve" String String))))

(deftest void-argument-test
  (is (= '(INVOKE-XREF STATIC "Math" "log" "(D)D" :owner-is-class)
         (inv-static java.lang.Math "log" jb/void)))
  (is (= '(INVOKE-XREF STATIC "Objects" "toString"
                       "(Ljava/lang/Object;)Ljava/lang/String;" :owner-is-class)
         (inv-static java.util.Objects "toString" jb/void))))
