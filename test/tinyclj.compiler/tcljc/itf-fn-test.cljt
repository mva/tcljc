;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https:;;www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.itf-fn-test
  (:require [tcljc.bootstrap :refer [nmsp asm-expr]]
            [tinyclj.alpha.ptest :refer :all]))

(deftest restrictions-of-itf-fn
  (is (thrown-with-msg? clojure.lang.ExceptionInfo
                        #"type tag on function name is not supported"
                        (asm-expr (fn* ^Runnable foo []
                                       nil))))
  (is (thrown-with-msg? clojure.lang.ExceptionInfo
                        #"interface function cannot have a name"
                        (asm-expr (^Runnable fn* foo []
                                   nil)))))

(deftest defn-itf-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/100")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "add2" "Lpkg/ns0/FnInt2;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "two" "I")]
            
            [(METHOD [PUBLIC STATIC FINAL] "FnInt2~2" "(II)I")
             ["LOCAL 0: int a"]
             ["LOCAL 1: int b"]
             (ILOAD_0)
             (ILOAD_1)
             (IADD)
             (IRETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")

             (INVOKEDYNAMIC "arity-2" "()Lpkg/ns0/FnInt2;" :bsm-metafactory
                            ["MethodTypeDesc[(int,int)int]"
                             [STATIC . "FnInt2~2" "(II)I"]
                             "MethodTypeDesc[(int,int)int]"])
             (PUTSTATIC . "add2" "Lpkg/ns0/FnInt2;")
             (GETSTATIC . "add2" "Lpkg/ns0/FnInt2;")
             (ICONST_1)
             (ICONST_1)
             (INVOKEINTERFACE FnInt2 "arity-2" "(II)I" :itf)
             (PUTSTATIC . "two" "I")
             (RETURN)]]
           [(CLASS Vx [PUBLIC INTERFACE ABSTRACT] "pkg/ns0/FnInt2")
            [(METHOD [PUBLIC ABSTRACT] "arity-2" "(II)I")]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (definterface* FnInt2
                   (arity-2 ^int [^int a ^int b]))
                 (def add2 (^pkg.ns0.FnInt2 fn* [a b]
                            (+ a b)))
                 (def two (.arity-2 add2 1 1))]))))


(deftest def-functional-itf-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/100")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "f" "Ljava/lang/Runnable;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "Runnable~0" "()V")
             (RETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "g" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "g~0" "()Ljava/lang/Object;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "g~0" "()Ljava/lang/Object;")
             (GETSTATIC . "f" "Ljava/lang/Runnable;")
             (INVOKEINTERFACE Runnable "run" "()V" :itf)
             (ACONST_NULL)
             (ARETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (INVOKEDYNAMIC "run" "()Ljava/lang/Runnable;" :bsm-metafactory
                            ["MethodTypeDesc[()void]"
                             [STATIC . "Runnable~0" "()V"]
                             "MethodTypeDesc[()void]"])
             (PUTSTATIC . "f" "Ljava/lang/Runnable;")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def ^Runnable f
                   (^Runnable fn* [] ;mapped to Runnable.run(), which returns void
                        nil))
                 (def g (fn* g []
                             (.run f)))]))))

(deftest def-comparator-itf-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/100")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "f"
                    "Ljava/util/Comparator;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "Comparator~2"
                     "(Ljava/lang/Object;Ljava/lang/Object;)I")
             ["LOCAL 0: Object o1"]
             ["LOCAL 1: Object o2"]
             (ICONST_0)
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "g" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "g~0" "()I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "g~0" "()I")
             (GETSTATIC . "f" "Ljava/util/Comparator;")
             (ACONST_NULL)
             (ACONST_NULL)
             (INVOKEINTERFACE Comparator "compare"
                              "(Ljava/lang/Object;Ljava/lang/Object;)I" :itf)
             (IRETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (INVOKEDYNAMIC "compare" "()Ljava/util/Comparator;"
                            :bsm-metafactory
                            ["MethodTypeDesc[(Object,Object)int]"
                             [STATIC . "Comparator~2"
                              "(Ljava/lang/Object;Ljava/lang/Object;)I"]
                             "MethodTypeDesc[(Object,Object)int]"])
             (PUTSTATIC . "f" "Ljava/util/Comparator;")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def ^java.util.Comparator f
                   (^java.util.Comparator fn* [o1 o2]
                    0))
                 (def g (fn* g ^int []
                             (.compare f nil nil)))]))))

;;; This requires a properly informed ClassHierarchyResolver, or the
;;; an invalid stack map is generated for "fn~1".
(deftest join-two-interface-functions
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/100")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "fn-1" "Lpkg/ns0/FnMyFn;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "fn-2" "Lpkg/ns0/FnMyFn;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "FnMyFn~0" "()I")
             (ICONST_1)
             (IRETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "FnMyFn^9e71~0" "()I")
             (ICONST_2)
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "f~1" "(Ljava/lang/Object;)V"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "f~1" "(Ljava/lang/Object;)V")
             ["LOCAL 0: Object x"]
             (ALOAD_0)
             (IFNONNULL L:0)
             (GETSTATIC . "fn-2" "Lpkg/ns0/FnMyFn;")
             (GOTO L:1)
             [L:0]
             (GETSTATIC . "fn-1" "Lpkg/ns0/FnMyFn;")
             [L:1]
             (ASTORE_1)
             ["LOCAL 1: FnMyFn g*"]
             (RETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (INVOKEDYNAMIC "fn0" "()Lpkg/ns0/FnMyFn;" :bsm-metafactory
                            ["MethodTypeDesc[()int]"
                             [STATIC . "FnMyFn~0" "()I"]
                             "MethodTypeDesc[()int]"])
             (PUTSTATIC . "fn-1" "Lpkg/ns0/FnMyFn;")
             (INVOKEDYNAMIC "fn0" "()Lpkg/ns0/FnMyFn;" :bsm-metafactory
                            ["MethodTypeDesc[()int]"
                             [STATIC . "FnMyFn^9e71~0" "()I"]
                             "MethodTypeDesc[()int]"])
             (PUTSTATIC . "fn-2" "Lpkg/ns0/FnMyFn;")
             (RETURN)]]
           [(CLASS Vx [PUBLIC INTERFACE ABSTRACT] "pkg/ns0/FnMyFn")
            [(METHOD [PUBLIC ABSTRACT] "fn0" "()I")]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (definterface* FnMyFn
                   (fn0 ^int []))
                 (import* pkg.ns0.FnMyFn)
                 (def fn-1 (^FnMyFn fn* [] 1))
                 (def fn-2 (^FnMyFn fn* [] 2))
                 (def f (fn* f ^void [x]
                             (let* [g* (if (nil? x) fn-2 fn-1)]
                               nil)))]))))

(deftest default-vs-provided-sig
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/100")
            [(METHOD [PUBLIC STATIC FINAL] "Consumer~1" "(Ljava/lang/Object;)V")
             ["LOCAL 0: Object x"]
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "Consumer^ca69~1" "(Ljava/lang/String;)V")
             ["LOCAL 0: String s"]
             (RETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             
             (INVOKEDYNAMIC "accept"
                            "()Ljava/util/function/Consumer;"
                            :bsm-metafactory
                            ["MethodTypeDesc[(Object)void]"
                             [STATIC . "Consumer~1" "(Ljava/lang/Object;)V"]
                             "MethodTypeDesc[(Object)void]"])
             (LDC "foo")
             (INVOKEINTERFACE Consumer "accept" "(Ljava/lang/Object;)V" :itf)
             
             (INVOKEDYNAMIC "accept"
                            "()Ljava/util/function/Consumer;"
                            :bsm-metafactory
                            ["MethodTypeDesc[(Object)void]"
                             [STATIC . "Consumer^ca69~1" "(Ljava/lang/String;)V"]
                             "MethodTypeDesc[(String)void]"])
             (LDC "foo")
             (INVOKEINTERFACE Consumer "accept" "(Ljava/lang/Object;)V" :itf)
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (.accept (^java.util.function.Consumer fn* [x])
                          "foo")
                 (.accept (^java.util.function.Consumer fn* ^void [^String s])
                          "foo")]))))

(deftest sig-mismatch
  (is (thrown-with-msg?
       clojure.lang.ExceptionInfo
       #"function result .*java.lang.Object.* not assignment compatible to method's .*void.*"
       (nmsp '[(ns pkg.ns0)
               (.accept (^java.util.function.Consumer fn* [^String s]
                         nil)
                        "foo")])))
  
  (is (thrown-with-msg?
       clojure.lang.ExceptionInfo
       #"function parameter .*int.* not assignment compatible to method's .*java.lang.Object.*"
       (nmsp '[(ns pkg.ns0)
               (.accept (^java.util.function.Consumer fn* ^void [^int s]
                         nil)
                        "foo")]))))
