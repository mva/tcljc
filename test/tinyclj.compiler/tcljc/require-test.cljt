;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https:;;www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.require-test
  (:require [tcljc.bootstrap :refer [nmsp]]
            [tinyclj.alpha.ptest :refer :all]))

(deftest two-namespaces-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns1/_10")
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns1")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns1/___" nil "pkg/ns1/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (ns pkg.ns1)]))))

(deftest export-redef-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/exp/_10")
            [(FIELD [PUBLIC STATIC VOLATILE] "foo" "I")
             (ConstantValue 123)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.exp")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns1/_10")
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns1")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC ___)
             (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns1/___" nil "pkg/ns1/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "pkg.exp,tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.exp)
                 (def ^:redef foo 123)
                 (ns pkg.ns1
                   (:require pkg.exp))]))))

(deftest export-rename-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/exp/_10")
            [(FIELD [PUBLIC STATIC FINAL] "foo" "I")
             (ConstantValue 123)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.exp")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns1/_10")
            [(FIELD [PUBLIC STATIC FINAL] "x" "I")
             (ConstantValue 124)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns1")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC ___)
             (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns1/___" nil "pkg/ns1/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "pkg.exp,tinyclj.core")
             (ARETURN)]]]

         (nmsp '[(ns pkg.exp)
                 (def foo 123)
                 (ns pkg.ns1
                   (:require [pkg.exp :refer :all :rename {foo bar}]))
                 (def x (+ bar 1))]))))

(deftest public-var-test
  (let [exp '[[(CLASS Vx [PUBLIC] "pkg/exp/_10")
               [(FIELD [PUBLIC STATIC FINAL] "public-var" "I")
                (ConstantValue 123)]

               [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
                (LDC "pkg.exp")
                (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
                (RETURN)]]
              [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
               [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
                (LDC "tinyclj.core")
                (ARETURN)]]
              
              [(CLASS Vx [PUBLIC] "pkg/ns0/_10")
               [(FIELD [PUBLIC STATIC FINAL] "local-var" "I")
                (ConstantValue 123)]
               
               [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
                (LDC "pkg.ns0")
                (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
                (LDC ___)
                (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
                (RETURN)]]
                            [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_10")
               [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
                (LDC "pkg.exp,tinyclj.core")
                (ARETURN)]]]]
    (is (= exp (nmsp '[(ns pkg.exp)
                       (def public-var 123)

                       (ns pkg.ns0
                         (:require pkg.exp))
                       (def local-var (+ pkg.exp/public-var 0))])))

    (is (= exp (nmsp '[(ns pkg.exp)
                       (def public-var 123)

                       (ns pkg.ns0
                         (:require [pkg.exp :as a]))
                       (def local-var (+ a/public-var 0))])))

    (is (= exp (nmsp '[(ns pkg.exp)
                       (def public-var 123)

                       (ns pkg.ns0
                         (:require [pkg.exp :refer [public-var]]))
                       (def local-var (+ public-var 0))])))

    (is (= exp (nmsp '[(ns pkg.exp)
                       (def public-var 123)

                       (ns pkg.ns0
                         (:require [pkg.exp :refer :all]))
                       (def local-var (+ public-var 0))])))))

(deftest export-clojure-var-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/exp/_10")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "public-var" "Lclojure/lang/Var;")
             (Signature "Lclojure/lang/Var<Ljava/lang/Object;>;")]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.exp")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
            
             (LDC "pkg.exp")
             (LDC "public-var")
             (LDC "123")
             (INVOKESTATIC RT "var" "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Lclojure/lang/Var;")
             (LDC [:bsm-quote "map" "Lclojure/lang/IPersistentMap;"
                   [[:bsm-quote "keyword" "Lclojure/lang/Keyword;" ["var"]]
                    [:bsm-get-static-final "TRUE" "Ljava/lang/Boolean;" [Boolean]]]])
             (INVOKEVIRTUAL Var "setMeta" "(Lclojure/lang/IPersistentMap;)Lclojure/lang/Var;")
             (PUTSTATIC . "public-var" "Lclojure/lang/Var;")

             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_10")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "local-var" "Ljava/lang/Object;")]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC ___)
             (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
             
             (GETSTATIC _10 "public-var" "Lclojure/lang/Var;")
             (INVOKEVIRTUAL Var "deref" "()Ljava/lang/Object;")
             (PUTSTATIC . "local-var" "Ljava/lang/Object;")
             
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "pkg.exp,tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.exp)
                 (def ^:var public-var "123")
                 
                 (ns pkg.ns0
                   (:require pkg.exp))
                 (def local-var pkg.exp/public-var)]))))

(deftest refer-static-fn-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "inc1" "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "inc1~1" "(I)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "inc1~1" "(I)I")
             ["LOCAL 0: int n"]
             (ILOAD_0)
             (ICONST_1)
             (IADD)
             (IRETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.exp")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_10")
            [(FIELD [PUBLIC STATIC VOLATILE] "inc1_alias" "Ljava/lang/Object;")
             (RuntimeVisibleAnnotations (Alias ["of" "pkg.exp/inc1"]))]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "three" "Ljava/lang/Object;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT]
                    "three_alias" "I")]
            
            [(METHOD [PUBLIC STATIC FINAL] "apply1" "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "apply1~2" "(Ljava/lang/Object;I)Ljava/lang/Object;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "apply1~2" "(Ljava/lang/Object;I)Ljava/lang/Object;")
             ["LOCAL 0: Object f"]
             ["LOCAL 1: int n"]
             (ALOAD_0)
             (ILOAD_1)
             (INVOKEDYNAMIC "_" "(Ljava/lang/Object;I)Ljava/lang/Object;" :bsm-invoke-fn [])
             (ARETURN)]

            #_[(METHOD [PUBLIC STATIC FINAL] "inc1_alias" "()Ltinyclj/lang/StaticFn;")
               (INVOKESTATIC _10 "inc1" "()Ltinyclj/lang/StaticFn;")
               (ARETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC ___)
             (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
             
             (INVOKESTATIC _10 "inc1" "()Ltinyclj/lang/StaticFn;")
             (ICONST_2)
             (INVOKESTATIC . "apply1~2" "(Ljava/lang/Object;I)Ljava/lang/Object;")
             (PUTSTATIC . "three" "Ljava/lang/Object;")
             
             (ICONST_2)
             (INVOKESTATIC _10 "inc1~1" "(I)I")
             (PUTSTATIC . "three_alias" "I")
             
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "pkg.exp,tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.exp)
                 (def inc1 (fn* inc1 ^int [^int n]
                                (+ n 1)))
                 
                 (ns pkg.ns0
                   (:require pkg.exp))
                 (def apply1 (fn* apply1 [f ^int n]
                                  (f n)))
                 ;; this should also be turned into a lazy static:
                 (def inc1_alias pkg.exp/inc1)
                 (def three (apply1 pkg.exp/inc1 2))
                 ;; this should call original static method:
                 (def three_alias (inc1_alias 2))]))))


(deftest require-alias-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/exp/_10")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "src" "Ljava/lang/String;")]
            [(FIELD [PUBLIC STATIC VOLATILE] "alias" "Ljava/lang/Object;")
             (RuntimeVisibleAnnotations (Alias ["of" "pkg.exp/src"]))]
             
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.exp")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC "v")
             (INVOKESTATIC System "getenv" "(Ljava/lang/String;)Ljava/lang/String;")
             (PUTSTATIC . "src" "Ljava/lang/String;")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "f~0" "()Ljava/lang/Object;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "f~0" "()Ljava/lang/Object;")
             (GETSTATIC _10 "src" "Ljava/lang/String;")
             (ARETURN)]
             
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC ___)
             (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "pkg.exp,tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.exp)
                 (def src (System/getenv "v"))
                 (def alias src)
                 
                 (ns pkg.ns0
                   (:require pkg.exp))
                 (def f (fn* f [] pkg.exp/alias))]))))

(deftest require-macro-test
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "simple-macro" "()Ltinyclj/lang/StaticFn;")
             (RuntimeVisibleAnnotations (Macro))
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "simple-macro~2"
                     "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "simple-macro~2"
                     "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
             ["LOCAL 0: Object &form"]
             ["LOCAL 1: Object &env"]
             (LDC "foo")
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.exp")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "f~0" "()Ljava/lang/Object;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "f~0" "()Ljava/lang/Object;")
             (LDC "foo")
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC ___)
             (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "pkg.exp,tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.exp)
                 (def ^:macro simple-macro
                   (fn* simple-macro [&form &env]
                        "foo"))
                 
                 (ns pkg.ns0
                   (:require pkg.exp))
                 (def f (fn* f [] (pkg.exp/simple-macro)))]))))

(deftest import-varargs-fn-wrapping-constructor
  (is (= '[[(CLASS Vx [PUBLIC FINAL] "pkg/exp/T" nil "java/lang/Object" [IType])
            [(FIELD [PUBLIC FINAL] "value" "Ljava/lang/Object;")]
            [(FIELD [PUBLIC FINAL] "hooks" "[Ljava/util/function/Consumer;")]
            
            [(METHOD [PUBLIC] "<init>" "(Ljava/lang/Object;[Ljava/util/function/Consumer;)V")
             (ALOAD_0)
             (INVOKESPECIAL Object "<init>" "()V")
             (ALOAD_0)
             (ALOAD_1)
             (PUTFIELD . "value" "Ljava/lang/Object;")
             (ALOAD_0)
             (ALOAD_2)
             (PUTFIELD . "hooks" "[Ljava/util/function/Consumer;")
             (RETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "mk-t-varargs-constr"
                     "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "mk-t-varargs-constr~2"
                     "(Ljava/lang/Object;[Ljava/util/function/Consumer;)Lpkg/exp/T;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL VARARGS] "mk-t-varargs-constr~2"
                     "(Ljava/lang/Object;[Ljava/util/function/Consumer;)Lpkg/exp/T;")
             ["LOCAL 0: Object value"]
             ["LOCAL 1: Consumer[] hooks"]
             (NEW T)
             (DUP)
             (ALOAD_0)
             (ALOAD_1)
             (INVOKESPECIAL T "<init>" "(Ljava/lang/Object;[Ljava/util/function/Consumer;)V")
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "mk-t-varargs-new" "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "mk-t-varargs-new~2"
                     "(Ljava/lang/Object;[Ljava/util/function/Consumer;)Lpkg/exp/T;"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL VARARGS] "mk-t-varargs-new~2"
                     "(Ljava/lang/Object;[Ljava/util/function/Consumer;)Lpkg/exp/T;")
             ["LOCAL 0: Object value"]
             ["LOCAL 1: Consumer[] hooks"]
             (NEW T)
             (DUP)
             (ALOAD_0)
             (ALOAD_1)
             (INVOKESPECIAL T "<init>" "(Ljava/lang/Object;[Ljava/util/function/Consumer;)V")
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "mk-t-fixargs" "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[CONSTRUCTOR T "<init>"
                     "(Ljava/lang/Object;[Ljava/util/function/Consumer;)V"]]])
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.exp")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_10")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "c"
                    "Ljava/util/function/Consumer;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "t-1"
                    "Lpkg/exp/T;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "t-2"
                    "Lpkg/exp/T;")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "t-3"
                    "Lpkg/exp/T;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "Consumer~1" "(Ljava/lang/Object;)V")
             ["LOCAL 0: Object x"]
             (RETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC ___)
             (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
             (INVOKEDYNAMIC "accept" "()Ljava/util/function/Consumer;"
                            :bsm-metafactory
                            ["MethodTypeDesc[(Object)void]"
                             [STATIC . "Consumer~1" "(Ljava/lang/Object;)V"]
                             "MethodTypeDesc[(Object)void]"])
             (PUTSTATIC . "c" "Ljava/util/function/Consumer;")
             
             (ACONST_NULL)
             (ICONST_1)
             (ANEWARRAY "Consumer[]")
             (DUP)
             (ICONST_0)
             (GETSTATIC . "c" "Ljava/util/function/Consumer;")
             (AASTORE)
             (INVOKESTATIC _10 "mk-t-varargs-constr~2" "(Ljava/lang/Object;[Ljava/util/function/Consumer;)Lpkg/exp/T;")
             (PUTSTATIC . "t-1" "Lpkg/exp/T;")
             
             (ACONST_NULL)
             (ICONST_1)
             (ANEWARRAY "Consumer[]")
             (DUP)
             (ICONST_0)
             (GETSTATIC . "c" "Ljava/util/function/Consumer;")
             (AASTORE)
             (INVOKESTATIC _10 "mk-t-varargs-new~2" "(Ljava/lang/Object;[Ljava/util/function/Consumer;)Lpkg/exp/T;")
             (PUTSTATIC . "t-2" "Lpkg/exp/T;")
             
             (NEW T)
             (DUP)
             (ACONST_NULL)
             (ICONST_0)
             (ANEWARRAY "Consumer[]")
             (INVOKESPECIAL T "<init>" "(Ljava/lang/Object;[Ljava/util/function/Consumer;)V")
             (PUTSTATIC . "t-3" "Lpkg/exp/T;")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "pkg.exp,tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.exp)
                 (import* java.util.function.Consumer)
                 (deftype* pkg.exp/T pkg.exp.T
                   [value ^Consumer* hooks]
                   :implements [clojure.lang.IType])
                 (import* pkg.exp.T)
                 (def mk-t-varargs-constr
                   (fn* mk-t-varargs-constr ^T [value & ^Consumer* hooks]
                        (T. value hooks)))
                 (def mk-t-varargs-new
                   (fn* mk-t-varargs-new ^T [value & ^Consumer* hooks]
                        (T/new value hooks)))
                 (def mk-t-fixargs pkg.exp.T/new)
                 
                 (ns pkg.ns0
                   (:require pkg.exp))
                 (import* java.util.function.Consumer)
                 (def c (^Consumer fn* [x] nil))
                 (def t-1 (pkg.exp/mk-t-varargs-constr nil c))
                 (def t-2 (pkg.exp/mk-t-varargs-new nil c))
                 (def t-3 (pkg.exp/mk-t-fixargs nil (new Consumer* 0)))]))))

(deftest import-varargs-fn-wrapping-static-method
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "hash-varargs-static"
                     "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "hash-varargs-static~1" "([Ljava/lang/Object;)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL VARARGS] "hash-varargs-static~1"
                     "([Ljava/lang/Object;)I")
             ["LOCAL 0: Object[] objs"]
             (ALOAD_0)
             (INVOKESTATIC Arrays "hashCode" "([Ljava/lang/Object;)I")
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "hash-varargs-member"
                     "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC . "hash-varargs-member~1" "([Ljava/lang/Object;)I"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL VARARGS] "hash-varargs-member~1" "([Ljava/lang/Object;)I")
             ["LOCAL 0: Object[] objs"]
             (ALOAD_0)
             (INVOKESTATIC Arrays "hashCode" "([Ljava/lang/Object;)I")
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "hash-from-member" "()Ltinyclj/lang/StaticFn;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFn;"
                   [[STATIC Arrays "hashCode" "([Ljava/lang/Object;)I"]]])
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.exp")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/exp/___" nil "pkg/exp/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]
           
           [(CLASS Vx [PUBLIC] "pkg/ns0/_10")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "h-1" "I")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "h-2" "I")]
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "h-3" "I")]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (LDC ___)
             (INVOKESTATIC RT "ensureInitialized" "(Ljava/lang/Class;)V")
             
             (ICONST_1)
             (ANEWARRAY "Object[]")
             (DUP)
             (ICONST_0)
             (LDC "foo")
             (AASTORE)
             (INVOKESTATIC _10 "hash-varargs-static~1" "([Ljava/lang/Object;)I")
             (PUTSTATIC . "h-1" "I")
             
             (ICONST_1)
             (ANEWARRAY "Object[]")
             (DUP)
             (ICONST_0)
             (LDC "bar")
             (AASTORE)
             (INVOKESTATIC _10 "hash-varargs-member~1" "([Ljava/lang/Object;)I")
             (PUTSTATIC . "h-2" "I")
             
             (ICONST_0)
             (ANEWARRAY "Object[]")
             (INVOKESTATIC Arrays "hashCode" "([Ljava/lang/Object;)I")
             (PUTSTATIC . "h-3" "I")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_10")
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "pkg.exp,tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.exp)
                 (import* java.util.Arrays)
                 (def hash-varargs-static
                   (fn* hash-varargs-static ^int [& ^Object* objs]
                        (Arrays/hashCode objs)))
                 (def hash-varargs-member
                   (fn* hash-varargs-member ^int [& ^Object* objs]
                        (^{:param-tags [Object*]} Arrays/hashCode objs)))
                 (def hash-from-member ^{:param-tags [Object*]} Arrays/hashCode)
                 
                 (ns pkg.ns0
                   (:require pkg.exp))
                 (def h-1 (pkg.exp/hash-varargs-static "foo"))
                 (def h-2 (pkg.exp/hash-varargs-member "bar"))
                 (def h-3 (pkg.exp/hash-from-member (new Object* 0)))]))))
