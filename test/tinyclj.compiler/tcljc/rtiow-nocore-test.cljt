(ns tcljc.rtiow-nocore-test
  (:require
   [tcljc.config :as cfg]
   [tcljc.classfile :as cf]
   [tcljc.runtime :as rt]
   [tcljc.expr :as x]
   [tcljc.context :as ctx]
   [tcljc.emitter :as em]
   [tcljc.predefined :as predefined]
   [tinyclj.alpha.ptest :refer [deftest]])
  (:import
   (tcljc.context FnRequireNamespace)))

(def ^:private app-paths
  [#_(cfg/path-of "../jvm-stuff/bootstrap-tclj/tinyclj.rt")
   (cfg/path-of "test/tinyclj.compiler")])

(defn- ^FnRequireNamespace noop-require-namespace [ns-str provided-nmsp]
  nil)

(defn- core-ns-globals [^java.lang.invoke.MethodHandles$Lookup l]
  (let [tp (.findClass l "clojure.lang.Namespace")
        bref (x/global-ref '*ns* "tinyclj.core" tp false true nil)
        ld-st (cf/ld-st-static rt/ClojureRT "CURRENT_NS" rt/Var)]
    (.deliver-load bref ld-st)
    {"*ns*" bref}))

(deftest compile-rtiow-nocore-test
  (let [app-ld (cfg/app-class-loader :system app-paths)
        rt-lookup (cfg/get-rt-lookup app-ld)
        dyn-ld (cfg/dyn-class-loader app-ld [])
        dest-dir (cfg/dest-dir "tcljc.rtiow-nocore")
        env (em/mk-build-env app-ld dest-dir dyn-ld {})]
    (ctx/with-executor
      {:binding-sym exc-nmsp
       :parent-fn compile-rtiow-nocore-test}
      (let [ns-str "tcljc.rtiow-nocore-ref"
            provided-nmsp (em/mk-provided-nmsp)
            known-ns (assoc predefined/implicit-known-ns
                            cfg/core-lib {cfg/key-force-clinit x/expr-empty})
            
            exc-method (when-not cfg/deterministic-namespace-compile?
                         exc-nmsp)
            globals (core-ns-globals rt-lookup)
            tl-ctx (em/mk-ctx env noop-require-namespace
                              known-ns globals ns-str
                              exc-method)]
        (em/compile-and-emit env tl-ctx false provided-nmsp)))))
