;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https:;;www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.str-test
  (:require [tcljc.bootstrap :refer [asm-expr call-expr]]
            [tinyclj.alpha.ptest :refer :all]))

(deftest concat-test
  (is (= '[(LDC "one is 210000")
           (ARETURN)]
         (asm-expr (str "one is " 210000))))

  (is (= '[(GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "")
           (INVOKESTATIC Objects "toString" "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;")
           (INVOKEDYNAMIC "_" "(Ljava/lang/String;)Ljava/lang/String;"
                          :bsm-concat ["test if nil: \\u0001"])
           (ARETURN)]
         (asm-expr (str "test if nil: " java.lang.System/out)))))

(deftest no-args-str-test
  (is (= '[(LDC "")
           (ARETURN)]
         (asm-expr (str)))))

(deftest unary-str-test
  (is (= '[(LDC "123")
           (ARETURN)]
         (asm-expr (str 123)))))

(deftest compile-time-const
  (is (= '[(LDC "") (ARETURN)]
         (asm-expr (str nil))))
  (is (= '[(LDC "true") (ARETURN)]
         (asm-expr (str true))))
  (is (= '[(LDC "false") (ARETURN)]
         (asm-expr (str false))))
  (is (= '[(LDC "abc") (ARETURN)]
         (asm-expr (str "abc"))))
  (is (= '[(LDC "123") (ARETURN)]
         (asm-expr (str 123))))
  (is (= '[(LDC "1234.5") (ARETURN)]
         (asm-expr (str 1234.5))))

  (is (= '[(LDC "sym") (ARETURN)]
         (asm-expr (str 'sym))))
  (is (= '[(LDC ":kw") (ARETURN)]
         (asm-expr (str :kw))))
  (is (= '[(LDC "A") (ARETURN)]
         (asm-expr (str \A))))
  (is (= '[(LDC "foo") (ARETURN)]
         (asm-expr (str #"foo"))))
  (is (= '[(LDC "class java.lang.Object") (ARETURN)]
         (asm-expr (str Object)))))

(deftest collection-const
  (is (= '[(LDC "(1 2 3)") (ARETURN)]
           (asm-expr (str '(1 2 3)))))  ;quoted form
  (is (= '[(LDC "[1 2 3]") (ARETURN)]
           (asm-expr (str [1 2 3])))))  ;vector literal with constants

(deftest assert-expansion-test
  ;; This assumes that defmacro assert uses just `(str ... '~x)`
  ;; instead of Clojure's original `(str ... (pr-str '~x))`.  The
  ;; expression `~x` is reader ouput, and unless it is the literal nil
  ;; its `pr-str` and `str` should be equal.
  (is (= '[["LOCAL 0: boolean x"]
           (NEW AssertionError)
           (DUP)
           (LDC "Assert failed: (some-assertion \"abc\" 123.0 true java.lang.Object nil)")
           (INVOKESPECIAL AssertionError "<init>" "(Ljava/lang/Object;)V")
           (ATHROW)]
         (asm-expr [^boolean x]
                   (throw (new AssertionError
                               (str "Assert failed: "
                                    ;; omitting some? check here
                                    '(some-assertion "abc"
                                                     123.0
                                                     true
                                                     java.lang.Object
                                                     nil)))))))

  (is (= '[["LOCAL 0: boolean x"]
           (NEW AssertionError)
           (DUP)
           (LDC "Assert failed: nil")
           (INVOKESPECIAL AssertionError "<init>" "(Ljava/lang/Object;)V")
           (ATHROW)]
         (asm-expr [^boolean x]
                   (if (not nil)
                     (throw (new AssertionError
                                 (str "Assert failed: "
                                      (if (some? 'nil)
                                        'nil
                                        "nil")))))))))
