;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https:;;www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.try-test
  (:require [tcljc.bootstrap :refer [asm-expr call-expr nmsp]]
            [tinyclj.alpha.ptest :refer :all])
  (:import (clojure.lang ExceptionInfo)))

(deftest try-finally
  (is (= '[[L:0]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (GOTO L:2)
           
           #_catch-any (EXCEPTION_CATCH L:0 L:1 L:1 any) [L:1]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (ATHROW)

           #_finally [L:2]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (RETURN)]
         (asm-expr (try
                     (.println System/out "Hello World")
                     (finally
                       (.println System/out "Finally...")))))))

(deftest try-catch
  (is (= '[[L:0]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (RETURN)
           (EXCEPTION_CATCH L:0 L:1 L:1 Exception)
           
           [L:1] (ASTORE_0) ["LOCAL 0: Exception e"]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Catch...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (RETURN)]
         (asm-expr (try
                     (.println System/out "Hello World")
                     (catch Exception e
                       (.println System/out "Catch...")))))))

(deftest try-catch-finally
  (is (= '[[L:0]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (GOTO L:3)
           (EXCEPTION_CATCH L:0 L:1 L:1 Exception)
           
           [L:1] (ASTORE_0) ["LOCAL 0: Exception e"]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Catch...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (GOTO L:3)
           
           #_catch-any (EXCEPTION_CATCH L:0 L:2 L:2 any) [L:2]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (ATHROW)
           
           #_finally [L:3]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (RETURN)]
         (asm-expr (try
                     (.println System/out "Hello World")
                     (catch Exception e
                       (.println System/out "Catch..."))
                     (finally
                       (.println System/out "Finally...")))))))

(deftest try-no-return
  (is (= '[[L:0]
           (NEW Exception) (DUP)
           (INVOKESPECIAL Exception "<init>" "()V")
           (ATHROW)
           (EXCEPTION_CATCH L:0 L:1 L:1 Exception)
           [L:1]
           
           (ASTORE_0)
           ["LOCAL 0: Exception e"]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Catch...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (RETURN)]
         (asm-expr (try
                     (throw (Exception.))
                     (catch Exception e
                       (.println System/out "Catch...")))))))

(deftest try-finally-nested
  (is (= '[[L:0]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (GOTO L:2)
           
           #_catch-any (EXCEPTION_CATCH L:0 L:1 L:1 any) [L:1]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally 1...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (ATHROW)
           
           #_finally [L:2]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally 1...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (GOTO L:4)
           
           #_catch-any (EXCEPTION_CATCH L:0 L:3 L:3 any) [L:3]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally 2...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (ATHROW)

           #_finally [L:4]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally 2...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (RETURN)]
         (asm-expr (try
                     (try
                       (.println System/out "Hello World")
                       (finally
                         (.println System/out "Finally 1...")))
                     (finally
                       (.println System/out "Finally 2...")))))))

(deftest try-expression-opnd
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "asm-expr~2"
                     "(DI)Ljava/lang/String;")
             ["LOCAL 0: double a"]
             ["LOCAL 2: int b"]
             (DLOAD_0)
             (ILOAD_2)
             (ILOAD_2)
             (INVOKESTATIC . "asm-expr$try~0" "(I)I")
             (INVOKEDYNAMIC "_" "(DII)Ljava/lang/String;"
                            :bsm-concat ["\u0001\u0001\u0001"])
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "asm-expr$try~0" "(I)I")
             ["LOCAL 0: int b"]
             [L:0]
             (ILOAD_0)
             (ICONST_1)
             (IADD)
             (GOTO L:2)
             
             #_catch-any (EXCEPTION_CATCH L:0 L:1 L:1 any) [L:1]
             (GETSTATIC System "out" "Ljava/io/PrintStream;")
             (LDC "Finally...")
             (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
             (ATHROW)
             
             #_finally [L:2]
             (GETSTATIC System "out" "Ljava/io/PrintStream;")
             (LDC "Finally...")
             (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
             (IRETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V") (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (fn* asm-expr ^String [^double a ^int b]
                      (str a b (try
                                 (+ b 1)
                                 (finally
                                   (.println System/out "Finally...")))))]))))

(deftest try-expression-statm
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "asm-expr~2"
                     "(DI)Ljava/lang/String;")
             ["LOCAL 0: double a"]
             ["LOCAL 2: int b"]
             (DLOAD_0)
             (ILOAD_2)
             (ILOAD_2)
             (INVOKESTATIC . "asm-expr$try~0" "(I)F")
             (POP)
             (ICONST_3)
             (INVOKEDYNAMIC "_" "(DII)Ljava/lang/String;" :bsm-concat ["\u0001\u0001\u0001"])
             (ARETURN)]
            
            [(METHOD [PUBLIC STATIC FINAL] "asm-expr$try~0" "(I)F")
             ["LOCAL 0: int b"]
             [L:0]
             (ILOAD_0)
             (I2F)
             (FCONST_1)
             (FDIV)
             (GOTO L:2)
             
             #_catch-any (EXCEPTION_CATCH L:0 L:1 L:1 any) [L:1]
             (GETSTATIC System "out" "Ljava/io/PrintStream;")
             (LDC "Finally...")
             (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
             (ATHROW)
             
             #_finally [L:2]
             (GETSTATIC System "out" "Ljava/io/PrintStream;")
             (LDC "Finally...")
             (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
             (FRETURN)]
            
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V") (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (fn* asm-expr ^String [^double a ^int b]
                      (str a b (do (try
                                     (/ b 1)
                                     (finally
                                       (.println System/out "Finally...")))
                                   3)))]))))

;; Note (1): Not all constructs are reduced to "the" empty expression.
;; If an exception handler covers an empty bytecode region after
;; bytecode emit like (EXCEPTION_CATCH L:0 L:0 L:2 any), then this
;; handler must be omitted from the class file.
;;
;; Note (2): The current setup guarantees that the try block's region
;; is never empty (it holds at least a xRETURN or a GOTO), which
;; implies that the try-catch region is also never empty.  This means
;; that the two isEmpty() checks can be avoided, but with the "cost"
;; that an empty try block is not omitted entirely.
(deftest try-empty-body
  (is (= '[[L:0]
           (GOTO L:2)
           (EXCEPTION_CATCH L:0 L:1 L:1 any)
           [L:1]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (ATHROW)
           [L:2]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (LDC "abc")
           (ARETURN)]
         (asm-expr ^String []
                   (do (try
                         (finally
                           (.println System/out "Hello World")))
                       "abc"))))
  
  (is (= '[[L:0]
           (GOTO L:2)
           (EXCEPTION_CATCH L:0 L:1 L:1 any)
           [L:1]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (ATHROW)
           [L:2]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (LDC "abc")
           (ARETURN)]
         (asm-expr ^String []
                   (do (try
                         nil
                         nil
                         (finally
                           (.println System/out "Hello World")))
                       "abc")))))

(deftest try-empty-handler
  (is (= '[[L:0]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (GOTO L:2)
           (EXCEPTION_CATCH L:0 L:1 L:1 Exception)
           
           [L:1] (ASTORE_0) ["LOCAL 0: Exception _"]
           (GOTO L:2)
           
           [L:2]
           (LDC "abc")
           (ARETURN)]
         (asm-expr ^String []
                   (do (try
                         (.println System/out "Hello World")
                         (catch Exception _
                           nil))
                       "abc")))))

(deftest try-without-handlers
  (is (= '[(BIPUSH 123)
           (IRETURN)]
         (asm-expr (try 123)))))

(deftest throw-in-expr-position
  (is (= '[(NEW Exception)
           (DUP)
           (LDC "boom")
           (INVOKESPECIAL Exception "<init>" "(Ljava/lang/String;)V")
           (ATHROW)]
         (asm-expr (let* [a (throw (Exception. "boom"))])))))

(deftest try-catch-throw-finally
  (is (= '[[L:0]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (GOTO L:3)
           (EXCEPTION_CATCH L:0 L:1 L:1 Exception)
  
           [L:1] (ASTORE_0) ["LOCAL 0: Exception e"]
           (ALOAD_0)
           (ATHROW)
           
           #_catch-any (EXCEPTION_CATCH L:0 L:2 L:2 any) [L:2]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (ATHROW)
           
           #_finally [L:3]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Finally...")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (RETURN)]
         (asm-expr (try
                     (.println System/out "Hello World")
                     (catch Exception e
                       (throw e))
                     (finally
                       (.println System/out "Finally...")))))))

(deftest finally-duplicates-local-1
  (is (= '[(ICONST_2)
           (ANEWARRAY "Object[]")
           (ASTORE_0)
           ["LOCAL 0: Object[] aframe"]
           
           [L:0]
           (ACONST_NULL)
           (GOTO L:2)
           
           #_catch-any (EXCEPTION_CATCH L:0 L:1 L:1 any) [L:1]
           (ALOAD_0)
           (INVOKESTATIC RT "seq" "(Ljava/lang/Object;)Lclojure/lang/ISeq;")
           (ASTORE_1)
           ["LOCAL 1: ISeq seq_126"]
           #_["POP 1: seq_126"]
           (ATHROW)
           
           #_finally [L:2]
           (ALOAD_0)
           (INVOKESTATIC RT "seq" "(Ljava/lang/Object;)Lclojure/lang/ISeq;")
           (ASTORE_1)
           ["LOCAL 1: ISeq seq_126"]
           #_["POP 1: seq_126"]
           (ARETURN)
           #_["POP 0: aframe"]]
         (asm-expr (let* [aframe (new objects 2)]
                     (try
                       nil
                       (finally
                         (loop* [seq_126 (clojure.lang.RT/seq aframe)]
                                nil))))))))

(deftest finally-duplicates-local-2
  (is (= '[[L:0]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (LDC "Hello World")
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (GOTO L:2)
           
           #_catch-any (EXCEPTION_CATCH L:0 L:1 L:1 any) [L:1]
           (LDC "foo")
           (INVOKESTATIC System "getenv" "(Ljava/lang/String;)Ljava/lang/String;")
           (ASTORE_0)
           ["LOCAL 0: String s"]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (ALOAD_0)
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (ATHROW)
           
           #_finally [L:2]
           (LDC "foo")
           (INVOKESTATIC System "getenv" "(Ljava/lang/String;)Ljava/lang/String;")
           (ASTORE_0)
           ["LOCAL 0: String s"]
           (GETSTATIC System "out" "Ljava/io/PrintStream;")
           (ALOAD_0)
           (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
           (RETURN)]
         (asm-expr (try
                     (.println System/out "Hello World")
                     (finally
                       (let* [s (System/getenv "foo")]
                         ;; definition of local `s` appears twice in
                         ;; the output code
                         (.println System/out s))))))))

(deftest finally-duplicates-function
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "f~1" "(Ljava/lang/Object;)Ljava/lang/Object;")
             ["LOCAL 0: Object s"]
             (GETSTATIC System "out" "Ljava/io/PrintStream;")
             (ALOAD_0)
             (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/Object;)V")
             (ACONST_NULL)
             (ARETURN)]

            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")

             [L:0]
             (GETSTATIC System "out" "Ljava/io/PrintStream;")
             (LDC "Hello World")
             (INVOKEVIRTUAL PrintStream "println" "(Ljava/lang/String;)V")
             (GOTO L:3)
             (EXCEPTION_CATCH L:0 L:1 L:1 Throwable)
             
             [L:1] (ASTORE_0) ["LOCAL 0: Throwable _"]
             (GOTO L:3)
             
             #_catch-any (EXCEPTION_CATCH L:0 L:2 L:2 any) [L:2]
             (LDC "finally")
             (INVOKESTATIC . "f~1" "(Ljava/lang/Object;)Ljava/lang/Object;")
             (POP)
             (ATHROW)
             
             #_finally [L:3]
             (LDC "finally")
             (INVOKESTATIC . "f~1" "(Ljava/lang/Object;)Ljava/lang/Object;")
             (POP)
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (try
                   (.println System/out "Hello World")
                   (catch Throwable _
                     nil)
                   (finally
                     ((fn f [s] (.println System/out s)) "finally")))]))))

(deftest retain-body-type-over-nil
  (is (= '[[(CLASS Vx [PUBLIC] "pkg/ns0/_100")
            [(FIELD [PUBLIC STATIC FINAL TRANSIENT] "x" "Ljava/lang/String;")]
            
            [(METHOD [PUBLIC STATIC FINAL] "f" "()Ltinyclj/lang/StaticFnMh;")
             (LDC [:bsm-static-fn "_" "Ltinyclj/lang/StaticFnMh;"
                   [[STATIC . "f~0" "()V"]]])
             (ARETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "f~0" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC] "<clinit>" "()V")
             (LDC "pkg.ns0")
             (INVOKESTATIC RT "createNamespace" "(Ljava/lang/String;)V")
             [L:0]
             (LDC "foo")
             (GOTO L:3)
             (EXCEPTION_CATCH L:0 L:1 L:1 Exception)
             (EXCEPTION_CATCH L:0 L:1 L:2 Throwable)
             
             [L:1] (ASTORE_0) ["LOCAL 0: Exception _"]
             (INVOKESTATIC . "f~0" "()V")
             (ACONST_NULL)
             (GOTO L:3)
             
             [L:2] (ASTORE_0) ["LOCAL 0: Throwable _"]
             (INVOKESTATIC . "f~0" "()V")
             (ACONST_NULL)
             (GOTO L:3)
             
             [L:3]
             (PUTSTATIC . "x" "Ljava/lang/String;")
             (RETURN)]]
           [(CLASS Vx [PUBLIC] "pkg/ns0/___" nil "pkg/ns0/_100")
            [(METHOD [PUBLIC STATIC FINAL] "forceClinit~1" "()V")
             (RETURN)]
            [(METHOD [PUBLIC STATIC FINAL] "requires~1" "()Ljava/lang/String;")
             (LDC "tinyclj.core")
             (ARETURN)]]]
         (nmsp '[(ns pkg.ns0)
                 (def f (fn* f ^void []))
                 (def x (try
                          "foo"
                          (catch Exception _ (f) nil)
                          (catch Throwable _ (f) nil)))]))))
