;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https:;;www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.unboxing-test
  (:require [tcljc.bootstrap :refer [asm-expr]]
            [tinyclj.alpha.ptest :refer :all]))

(deftest assign-reference-to-primtive-type
  (is (= '[["LOCAL 0: Object x"]
           (ALOAD_0)
           (CHECKCAST Integer)
           (INVOKEVIRTUAL Integer "intValue" "()I")
           (IRETURN)]
         (asm-expr ^int [^Object x] x)))
  (is (= '[["LOCAL 0: Number x"]
           (ALOAD_0)
           (CHECKCAST Integer)
           (INVOKEVIRTUAL Integer "intValue" "()I")
           (IRETURN)]
         (asm-expr ^int [^Number x] x)))
  (is (= '[["LOCAL 0: Integer x"]
           ["LOCAL 1: char ch"]         ;to force method generation
           (ALOAD_0)
           (INVOKEVIRTUAL Integer "intValue" "()I")
           (IRETURN)]
         (asm-expr ^int [^Integer x ^char ch] x))))

(deftest resolve-simple-method-after-unboxing
  (is (= '[["LOCAL 0: Object x"]
           (ICONST_0)
           (ALOAD_0)
           (CHECKCAST Integer)
           (INVOKEVIRTUAL Integer "intValue" "()I")
           (INVOKESTATIC Math "max" "(II)I")
           (IRETURN)]
         (asm-expr ^int [^Object x] (Math/max 0 x))))
  (is (= '[["LOCAL 0: Object x"]
           (LCONST_0)
           (ALOAD_0)
           (CHECKCAST Long)
           (INVOKEVIRTUAL Long "longValue" "()J")
           (INVOKESTATIC Math "max" "(JJ)J")
           (LRETURN)]
         (asm-expr ^long [^Object x] (Math/max 0l x)))))

(deftest resolve-overloaded-method-after-unboxing
  (is (= '[["LOCAL 0: Object x"]
           (BIPUSH 123)
           (ALOAD_0)
           (CHECKCAST Integer)
           (INVOKEVIRTUAL Integer "intValue" "()I")
           (INVOKESTATIC Math "floorMod" "(II)I")
           (I2L)
           (LRETURN)]
         (asm-expr ^long [^Object x] (Math/floorMod 123 x))))
  (is (= '[["LOCAL 0: Object x"]
           ["LOCAL 1: Object y"]
           (ALOAD_0)
           (CHECKCAST Integer)
           (INVOKEVIRTUAL Integer "intValue" "()I")
           (ALOAD_1)
           (CHECKCAST Integer)
           (INVOKEVIRTUAL Integer "intValue" "()I")
           (INVOKESTATIC Math "floorMod" "(II)I")
           (I2L)
           (LRETURN)]
         ;; note: `filter-dominators` drops method signature "JJ(J)"
         ;; and only "II(I)" is considered
         (asm-expr ^long [^Object x ^Object y] (Math/floorMod x y))))
  (is (= '[["LOCAL 0: Long x"]
           ["LOCAL 1: Object y"]
           (ALOAD_0)
           (INVOKEVIRTUAL Long "longValue" "()J")
           (ALOAD_1)
           (CHECKCAST Integer)
           (INVOKEVIRTUAL Integer "intValue" "()I")
           (INVOKESTATIC Math "floorMod" "(JI)I")
           (I2L)
           (LRETURN)]
         ;; note: similar to above, method signature "JJ(J)" is
         ;; filtered and only "JI(I)" is considered
         (asm-expr ^long [^Long x ^Object y] (Math/floorMod x y))))
  (is (= '[["LOCAL 0: Object x"]
           ["LOCAL 1: Long y"]
           (ALOAD_0)
           (CHECKCAST Long)
           (INVOKEVIRTUAL Long "longValue" "()J")
           (ALOAD_1)
           (INVOKEVIRTUAL Long "longValue" "()J")
           (INVOKESTATIC Math "floorMod" "(JJ)J")
           (LRETURN)]
         ;; note: only method signature "(JJ)J" is compatible
         (asm-expr ^long [^Object x ^Long y] (Math/floorMod x y)))))
