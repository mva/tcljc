;; Copyright (c) Michael van Acken. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 2.0 (https:;;www.eclipse.org/legal/epl-v20.html)
;; which can be found in the file epl-v20.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns tcljc.xcmp-test
  (:require [tcljc.bootstrap :refer [asm-expr call-expr]]
            [tinyclj.alpha.ptest :refer :all]))

;; See "3.5 More Control Examples" of JVMS for details on the NaN
;; handling of fcmpl/fcmpg and dcmpl/dcmpg).  The first two tests are
;; taken direction from p48/p49, the other four have been verified
;; against their javac bytecode.

(deftest lt-test
  (is (= '[["LOCAL 0: double d"]
           (DLOAD_0)
           (LDC2_W 100.0)
           (DCMPG) ;Push 1 if d is NaN or d > 100.0; push 0 if d == 100.0
           (IFGE L:0)                   ;Branch on 0 or 1
           (ICONST_1) (IRETURN)
           [L:0] (ICONST_M1) (IRETURN)]
         (asm-expr [^double d] (if (< d 100.0) +1 -1)))))

(deftest gt-test
  (is (= '[["LOCAL 0: double d"]
           (DLOAD_0)
           (LDC2_W 100.0)
           (DCMPL) ;Push -1 if d is NaN or d < 100.0; push 0 if d == 100.0
           (IFLE L:0)                   ;Branch on 0 or -1
           (ICONST_1) (IRETURN)
           [L:0] (ICONST_M1) (IRETURN)]
         (asm-expr [^double d] (if (> d 100.0) +1 -1)))))

(deftest le-test
  (is (= '[["LOCAL 0: double d"]
           (DLOAD_0)
           (LDC2_W 100.0)
           (DCMPG) ;Push 1 if d is NaN or d > 100.0; push 0 if d == 100.0
           (IFGT L:0)                   ;Branch on 1
           (ICONST_1) (IRETURN)
           [L:0] (ICONST_M1) (IRETURN)]
         (asm-expr [^double d] (if (<= d 100.0) +1 -1)))))

(deftest ge-test
  (is (= '[["LOCAL 0: double d"]
           (DLOAD_0)
           (LDC2_W 100.0)
           (DCMPL) ;Push -1 if d is NaN or d < 100.0; push 0 if d == 100.0
           (IFLT L:0)                   ;Branch on -1
           (ICONST_1) (IRETURN)
           [L:0] (ICONST_M1) (IRETURN)]
         (asm-expr [^double d] (if (>= d 100.0) +1 -1)))))

(deftest eq-test
  (is (= '[["LOCAL 0: double d"]
           (DLOAD_0)
           (LDC2_W 100.0)
           (DCMPL) ;Push -1 if d is NaN or d < 100.0; push 0 if d == 100.0
           (IFNE L:0)                   ;Branch on 1 or -1
           (ICONST_1) (IRETURN)
           [L:0] (ICONST_M1) (IRETURN)]
         (asm-expr [^double d] (if (== d 100.0) +1 -1)))))

(deftest ne-test
  (is (= '[["LOCAL 0: double d"]
           (DLOAD_0)
           (LDC2_W 100.0)
           (DCMPL) ;Push -1 if d is NaN or d < 100.0; push 0 if d == 100.0
           (IFEQ L:0)                   ;Branch on 0
           (ICONST_1) (IRETURN)
           [L:0] (ICONST_M1) (IRETURN)]
         (asm-expr [^double d] (if (not (== d 100.0)) +1 -1)))))


(deftest three-arg-compare-test
  (is (= '[["LOCAL 0: int n"]
           (GETSTATIC Short "MIN_VALUE" "S")
           (ISTORE_1)
           ["LOCAL 1: short __temp"]
           (GETSTATIC Short "MAX_VALUE" "S")
           (ISTORE_2)
           ["LOCAL 2: short __temp"]
           (ILOAD_1)
           (ILOAD_0)
           (IF_ICMPGT L:1)              ;if MIN_VALUE > n: false
           (ILOAD_0)
           (ILOAD_2)
           (IF_ICMPGT L:0)              ;if n > MAX_VALUE: false
           (ICONST_1)    ;true if (MIN_VALUE <= n) && (n <= MAX_VALUE)
           (IRETURN)
           [L:0]
           (ICONST_0)
           (IRETURN)
           [L:1]
           (ICONST_0)
           (IRETURN)]
         (asm-expr [^int n] (<= Short/MIN_VALUE n Short/MAX_VALUE))))
  (true? (call-expr (#(<= Short/MIN_VALUE ^int % Short/MAX_VALUE) Short/MIN_VALUE)))
  (false? (call-expr (#(<= Short/MIN_VALUE ^int % Short/MAX_VALUE) (dec Short/MIN_VALUE)))))

(deftest short-predicate-via-narrow-test
  (is (= '[["LOCAL 0: int n"]
           (ILOAD_0)
           (ILOAD_0)
           (I2S)                        ;narrow to short
           (IF_ICMPNE L:0)
           (ICONST_1)
           (IRETURN)
           [L:0]
           (ICONST_0)
           (IRETURN)]
         (asm-expr [^int n] (= n (short n)))))
  (true? (call-expr (#(= ^int % (short ^int %)) Short/MIN_VALUE)))
  (false? (call-expr (#(= ^int % (short ^int %)) (dec Short/MIN_VALUE)))))
